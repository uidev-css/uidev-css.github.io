{"pageProps":{"post":{"title":"Flutter에서 더 나은 오류 처리 방법  Error Stack 알아보기","description":"","date":"2024-06-21 21:07","slug":"2024-06-21-BetterErrorHandlingforFlutterErrorStack","content":"\n\n## 플러터용 모던 오류 처리 UI가 있습니다. 이로 인해 버그를 더 빨리 해결할 수 있습니다\n\n![이미지](/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_0.png)\n\n이 중간 이야기에서, 단 한 줄의 코드로 오류 화면을 멋지고 현대적인 오류 처리 UI로 변환하는 새 패키지를 공유하겠습니다. 이 패키지는 Android, iOS, Linux, macOS, Windows 및 웹에서 작동합니다.\n\n# 플러터를 위한 에러 스택 소개 🎉\n\n<div class=\"content-ad\"></div>\n\npub.dev을 통해 이 패키지를 설치할 수 있어요. 공개 저장소는 GitHub에 호스팅돼요.\n\n## 에러 스택 설치하기\n\n아래 내용을 당신의 pubspec.yaml 파일에 추가하세요:\n\n```yaml\ndependencies:\n  error_stack: ^1.7.3\n```\n\n<div class=\"content-ad\"></div>\n\n혹시 Flutter를 사용하시나요?\n\nflutter pub add error_stack\n\n프로젝트에 의존성으로 추가되었는지 확인하려면 flutter pub get을 실행해보세요.\n\n# 에러 스택 초기화하기 🛠️\n\n<div class=\"content-ad\"></div>\n\n에러 스택을 사용하려면 아래 예제처럼 main.dart 파일에 ErrorStack.init();을 추가하십시오.\n\n```js\n// main.dart 파일에 에러 스택 추가\n...\nimport 'package:error_stack/error_stack.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await ErrorStack.init(); // 에러 스택 초기화\n  runApp(MyApp());\n}\n```\n\n이제 에러 스택이 활성화되어 UI에서 발생하는 모든 오류를 캐치할 준비가 되었습니다. 테스트를 위해 에러를 시뮬레이션해 보겠습니다!\n\n```js\nimport 'package:flutter/material.dart';\n\nclass ErrorExampleWidget extends StatefulWidget {\n  \n  ErrorExampleWidget({super.key});\n\n  @override\n  createState() => _ErrorExampleWidgetState();\n}\n\nclass _ErrorExampleWidgetState extends State<ErrorExampleWidget> {\n\n  dynamic title = [];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"에러 예제\")\n      ),\n      body: SafeArea(\n         child: Container(\n           child: Text(title), // 타이틀에 대한 Subtype이 String이 아닙니다 💣\n         ),\n      ),\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n에러 발생 예제 페이지(ErrorExamplePage)는 Text 위젯이 첫 번째 인수로 문자열만 허용하기 때문에 오류가 발생할 것입니다.\n\n앱에서 이 위젯을 사용하려고 하면 에러 스택(Error Stack)이 나타납니다.\n\n<img src=\"/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_1.png\" />\n\n# 주요 기능 🚀\n\n<div class=\"content-ad\"></div>\n\n- 웹 UI에서의 빠른 구글 검색을 통해 오류 해결\n- 오류 메시지를 클립보드에 복사\n- 라이트 모드 및 다크 모드 지원\n- 디버그 및 릴리스 모드 오류 화면\n- 릴리스 모드를 위한 사용자 정의 오류 페이지\n\n![이미지](/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_2.png)\n\n## 빠른 구글 검색\n\n내가 좋아하는 기능은 오류를 즉시 구글에서 검색할 수 있는 기능입니다. \"이 오류로 구글에서 검색\"을 탭하면 바로 검색 페이지로 이동하여 오류를 해결하는 방법을 배울 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 앱 재시작\n\n다른 유용한 기능은 디버그 모드에서 앱을 다시 시작할 수 있는 기능입니다. 이는 앱을 수동으로 종료하고 다시 빌드할 필요가 없다는 뜻입니다.\n\n## 릴리스 모드 UI\n\n릴리스 모드에서 앱이 충돌하는 경우, 오류 스택은 사용자에게 다른 UI를 표시할 것입니다. 그러나 사용자 정의 UI를 사용하고 싶다면, 아래 예시처럼 init 메서드에 errorWidget을 추가하십시오.\n\n<div class=\"content-ad\"></div>\n\n```js\nawait ErrorStack.init(\n  errorWidget: (errorDetails) => MaterialApp(\n    home: Scaffold(\n      body: Center(\n        child: Text(\"An error occurred\"),\n      ),\n    ),\n  )\n);\n```\n\n# 마무리하며\n\n이번 미디엄 스토리가 유익했기를 바랍니다! Error Stack을 개발하는 것이 정말 재미있었는데, 더 나은 기능을 추가할 아이디어를 이미 몇 가지 생각해 두었습니다.\n\n만약 궁금하시다면 GitHub의 공개 저장소에서 내부 동작을 확인해볼 수 있습니다. 여러분의 프로젝트에서 시도해보고 피드백을 보내주세요.\n\n<div class=\"content-ad\"></div>\n\n위 문서를 읽어 주셔서 감사합니다.\n\n안토니 고든\n\nhttps://linktr.ee/agordn","ogImage":{"url":"/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_0.png"},"coverImage":"/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>플러터용 모던 오류 처리 UI가 있습니다. 이로 인해 버그를 더 빨리 해결할 수 있습니다</h2>\n<p><img src=\"/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_0.png\" alt=\"이미지\"></p>\n<p>이 중간 이야기에서, 단 한 줄의 코드로 오류 화면을 멋지고 현대적인 오류 처리 UI로 변환하는 새 패키지를 공유하겠습니다. 이 패키지는 Android, iOS, Linux, macOS, Windows 및 웹에서 작동합니다.</p>\n<h1>플러터를 위한 에러 스택 소개 🎉</h1>\n<p>pub.dev을 통해 이 패키지를 설치할 수 있어요. 공개 저장소는 GitHub에 호스팅돼요.</p>\n<h2>에러 스택 설치하기</h2>\n<p>아래 내용을 당신의 pubspec.yaml 파일에 추가하세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">error_stack:</span> <span class=\"hljs-string\">^1.7.3</span>\n</code></pre>\n<p>혹시 Flutter를 사용하시나요?</p>\n<p>flutter pub add error_stack</p>\n<p>프로젝트에 의존성으로 추가되었는지 확인하려면 flutter pub get을 실행해보세요.</p>\n<h1>에러 스택 초기화하기 🛠️</h1>\n<p>에러 스택을 사용하려면 아래 예제처럼 main.dart 파일에 ErrorStack.init();을 추가하십시오.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// main.dart 파일에 에러 스택 추가</span>\n...\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:error_stack/error_stack.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ErrorStack</span>.<span class=\"hljs-title function_\">init</span>(); <span class=\"hljs-comment\">// 에러 스택 초기화</span>\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-title class_\">MyApp</span>());\n}\n</code></pre>\n<p>이제 에러 스택이 활성화되어 UI에서 발생하는 모든 오류를 캐치할 준비가 되었습니다. 테스트를 위해 에러를 시뮬레이션해 보겠습니다!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorExampleWidget</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  \n  <span class=\"hljs-title class_\">ErrorExampleWidget</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>});\n\n  @override\n  <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_ErrorExampleWidgetState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_ErrorExampleWidgetState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">ErrorExampleWidget</span>> {\n\n  dynamic title = [];\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"에러 예제\"</span>)\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">SafeArea</span>(\n         <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n           <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(title), <span class=\"hljs-comment\">// 타이틀에 대한 Subtype이 String이 아닙니다 💣</span>\n         ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>에러 발생 예제 페이지(ErrorExamplePage)는 Text 위젯이 첫 번째 인수로 문자열만 허용하기 때문에 오류가 발생할 것입니다.</p>\n<p>앱에서 이 위젯을 사용하려고 하면 에러 스택(Error Stack)이 나타납니다.</p>\n<h1>주요 기능 🚀</h1>\n<ul>\n<li>웹 UI에서의 빠른 구글 검색을 통해 오류 해결</li>\n<li>오류 메시지를 클립보드에 복사</li>\n<li>라이트 모드 및 다크 모드 지원</li>\n<li>디버그 및 릴리스 모드 오류 화면</li>\n<li>릴리스 모드를 위한 사용자 정의 오류 페이지</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-BetterErrorHandlingforFlutterErrorStack_2.png\" alt=\"이미지\"></p>\n<h2>빠른 구글 검색</h2>\n<p>내가 좋아하는 기능은 오류를 즉시 구글에서 검색할 수 있는 기능입니다. \"이 오류로 구글에서 검색\"을 탭하면 바로 검색 페이지로 이동하여 오류를 해결하는 방법을 배울 수 있습니다.</p>\n<h2>앱 재시작</h2>\n<p>다른 유용한 기능은 디버그 모드에서 앱을 다시 시작할 수 있는 기능입니다. 이는 앱을 수동으로 종료하고 다시 빌드할 필요가 없다는 뜻입니다.</p>\n<h2>릴리스 모드 UI</h2>\n<p>릴리스 모드에서 앱이 충돌하는 경우, 오류 스택은 사용자에게 다른 UI를 표시할 것입니다. 그러나 사용자 정의 UI를 사용하고 싶다면, 아래 예시처럼 init 메서드에 errorWidget을 추가하십시오.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ErrorStack</span>.<span class=\"hljs-title function_\">init</span>(\n  <span class=\"hljs-attr\">errorWidget</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">errorDetails</span>) =></span> <span class=\"hljs-title class_\">MaterialApp</span>(\n    <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"An error occurred\"</span>),\n      ),\n    ),\n  )\n);\n</code></pre>\n<h1>마무리하며</h1>\n<p>이번 미디엄 스토리가 유익했기를 바랍니다! Error Stack을 개발하는 것이 정말 재미있었는데, 더 나은 기능을 추가할 아이디어를 이미 몇 가지 생각해 두었습니다.</p>\n<p>만약 궁금하시다면 GitHub의 공개 저장소에서 내부 동작을 확인해볼 수 있습니다. 여러분의 프로젝트에서 시도해보고 피드백을 보내주세요.</p>\n<p>위 문서를 읽어 주셔서 감사합니다.</p>\n<p>안토니 고든</p>\n<p><a href=\"https://linktr.ee/agordn\" rel=\"nofollow\" target=\"_blank\">https://linktr.ee/agordn</a></p>\n</body>\n</html>\n"},"__N_SSG":true}