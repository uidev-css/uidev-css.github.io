{"pageProps":{"post":{"title":"외부 패키지 없이 Flutter에서 Google Autocomplete Places API 통합하기 종합 가이드","description":"","date":"2024-06-21 20:41","slug":"2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide","content":"\n\n![image](/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_0.png)\n\n소스 코드: [https://github.com/axiftaj/Flutter-Google-Map-Tutorials/tree/main](https://github.com/axiftaj/Flutter-Google-Map-Tutorials/tree/main)\n\nGoogle Autocomplete Places API는 위치 제안 및 예측을 심층적으로 통합할 수 있는 강력한 솔루션을 제공합니다. 이 기능을 통합하는 데 사용할 수 있는 패키지는 있지만 기본 API 호출을 이해하면 개발자가 더 많은 제어와 사용자 정의 기능을 갖게 됩니다. 이 안내서에서는 외부 패키지에 의존하지 않고 Flutter에서 Google Autocomplete Places API를 직접 구현하는 과정을 탐색해 보겠습니다.\n\n필수 사항: 계속하기 전에 다음 사전 요구 사항이 충족되었는지 확인하세요:\n\n<div class=\"content-ad\"></div>\n\n- 플러터 SDK가 설치되어 있어야 합니다\n- 안드로이드 스튜디오 또는 VS CODE\n- 결제가 활성화된 Google Cloud Platform (GCP) 계정 및 Places API가 활성화되어 있어야 합니다\n\n단계 1: Google Cloud Platform 프로젝트 설정\n\n- Google Cloud Platform 콘솔로 이동: https://console.cloud.google.com/\n- 스크린샷에 표시된 대로 새 프로젝트를 만들거나 기존 프로젝트를 선택하세요\n\n![image](/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_1.png)\n\n<div class=\"content-ad\"></div>\n\n3. 프로젝트용 Google Places API를 활성화하세요. API 라이브러리로 이동하여 \"Places API\"를 검색하고 활성화하세요.\n\n왼쪽 상단 모서리에 있는 햄버거 아이콘을 클릭하고 API 및 서비스 라이브러리를 선택한 후, 우측 하단 구석에 있는 Place API를 클릭하세요.\n\n![이미지](/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_2.png)\n\n활성화될 때와 같이 보일 것입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_3.png\" />\n\n4. “Credentials” 탭으로 이동하여 API 자격 증명을 생성하세요. “Create Credentials”를 선택하고 “API Key”를 선택한 후 지침에 따라 API 키를 생성하세요.\n\n상단 좌측 구석의 햄버거 아이콘을 클릭한 후 API 및 서비스 “Credentials”를 선택하고 CREATE CREDENTIALS를 클릭한 후 API Key를 선택하세요. 이렇게 하면 API 키가 생성되며, 이를 다른 사람과 공유하지 마세요.\n\n<img src=\"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 플러터 프로젝트를 생성하고 다음 패키지들을 추가해봐요\n\n```js\nuuid: ^4.3.3\nhttp:\n```\n\nuuid 패키지는 세션을 관리하는 데 사용될 거에요(세션이 무엇인지는 마지막에 설명할게요)\n\n코드 설명:\n\n<div class=\"content-ad\"></div>\n\n먼저 사용자로부터 입력을 받기 위해 Text Field를 사용하는 컨트롤러를 만들었습니다. 그리고 uuid 인스턴스를 초기화하였는데, 이는 새로운 세션을 생성하는 데 도움이 됩니다. 그리고 initState() 메서드에서는 컨트롤러의 변경사항을 감지하고 사용자가 무언가를 입력할 때 getSuggestion(_controller.text) 함수를 호출합니다.\n\n_placeList에는 API 호출이 성공했을 때 화면에 자동완성 추천을 저장합니다.\n\n```dart\nfinal _controller = TextEditingController();\nvar uuid = const Uuid();\nString _sessionToken = '1234567890';\nList<dynamic> _placeList = [];\n\n@override\nvoid initState() {\n  super.initState();\n  _controller.addListener(() {\n    _onChanged();\n  });\n}\n\n_onChanged() {\n  if (_sessionToken == null) {\n    setState(() {\n      _sessionToken = uuid.v4();\n    });\n  }\n  getSuggestion(_controller.text);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 함수에서는 http 패키지를 사용하여 입력 요청을 Google 서버로 보냅니다. 성공적으로 처리되면 해당 데이터를 배열에 저장하고 화면을 새로 고침하여 보여줍니다.\n\nAPI 키는 안전한 저장소에 보관하거나 다른 좋은 방법을 따라 오용되지 않도록 합니다.\n\n```js\nvoid getSuggestion(String input) async {\n\n\n  const String PLACES_API_KEY = \"\";\n\n  try{\n    String baseURL = 'https://maps.googleapis.com/maps/api/place/autocomplete/json';\n    String request = '$baseURL?input=$input&key=$PLACES_API_KEY&sessiontoken=$_sessionToken';\n    var response = await http.get(Uri.parse(request));\n    var data = json.decode(response.body);\n    if (kDebugMode) {\n      print('mydata');\n      print(data);\n    }\n    if (response.statusCode == 200) {\n      setState(() {\n        _placeList = json.decode(response.body)['predictions'];\n      });\n    } else {\n      throw Exception('Failed to load predictions');\n    }\n  }catch(e){\n    print(e);\n  }\n\n}\n```\n\n전체 소스 코드:\n\n<div class=\"content-ad\"></div>\n\n```js\nimport 'dart:convert';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:uuid/uuid.dart';\nimport 'package:http/http.dart' as http;\n\nclass GoogleMapSearchPlacesApi extends StatefulWidget {\n  const GoogleMapSearchPlacesApi({Key? key}) : super(key: key);\n\n\n  @override\n  _GoogleMapSearchPlacesApiState createState() => _GoogleMapSearchPlacesApiState();\n}\n\nclass _GoogleMapSearchPlacesApiState extends State<GoogleMapSearchPlacesApi> {\n\n\n  final _controller =  TextEditingController();\n  var uuid =  const Uuid();\n  String _sessionToken = '1234567890';\n  List<dynamic> _placeList = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _controller.addListener(() {\n      _onChanged();\n    });\n  }\n\n  _onChanged() {\n    if (_sessionToken == null) {\n      setState(() {\n        _sessionToken = uuid.v4();\n      });\n    }\n    getSuggestion(_controller.text);\n  }\n\n  void getSuggestion(String input) async {\n\n\n    const String PLACES_API_KEY = \"your api key\";\n\n    try{\n      String baseURL = 'https://maps.googleapis.com/maps/api/place/autocomplete/json';\n      String request = '$baseURL?input=$input&key=$PLACES_API_KEY&sessiontoken=$_sessionToken';\n      var response = await http.get(Uri.parse(request));\n      var data = json.decode(response.body);\n      if (kDebugMode) {\n        print('mydata');\n        print(data);\n      }\n      if (response.statusCode == 200) {\n        setState(() {\n          _placeList = json.decode(response.body)['predictions'];\n        });\n      } else {\n        throw Exception('Failed to load predictions');\n      }\n    }catch(e){\n      print(e);\n    }\n\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        elevation: 0,\n        title: const Text('Search places Api' ,),\n      ),\n      body: Column(\n        mainAxisAlignment: MainAxisAlignment.start,\n        children: <Widget>[\n          Align(\n            alignment: Alignment.topCenter,\n            child: TextField(\n              controller: _controller,\n              decoration: InputDecoration(\n                hintText: \"Search your location here\",\n                focusColor: Colors.white,\n                floatingLabelBehavior: FloatingLabelBehavior.never,\n                prefixIcon: const Icon(Icons.map),\n                suffixIcon: IconButton(\n                  icon: const Icon(Icons.cancel), onPressed: () {\n                  _controller.clear() ;\n                },\n                ),\n              ),\n            ),\n          ),\n          Expanded(\n            child: ListView.builder(\n              physics: NeverScrollableScrollPhysics(),\n              shrinkWrap: true,\n              itemCount: _placeList.length,\n              itemBuilder: (context, index) {\n                return GestureDetector(\n                  onTap: () async {\n\n                  },\n                  child: ListTile(\n                    title: Text(_placeList[index][\"description\"]),\n                  ),\n                );\n              },\n            ),\n          )\n        ],\n      ),\n    );\n  }\n }\n```\n\n세션 토큰에 대해 자세히 알아보고 사용한 이유에 대해 이해하십시오.\n\n감사합니다. 여러분이 무언가 좋은 것을 배웠기를 바랍니다.\n\n이 블로그가 도움이 되었다면 좋아요와 공유를 부탁드립니다.\n","ogImage":{"url":"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_0.png\" alt=\"image\"></p>\n<p>소스 코드: <a href=\"https://github.com/axiftaj/Flutter-Google-Map-Tutorials/tree/main\" rel=\"nofollow\" target=\"_blank\">https://github.com/axiftaj/Flutter-Google-Map-Tutorials/tree/main</a></p>\n<p>Google Autocomplete Places API는 위치 제안 및 예측을 심층적으로 통합할 수 있는 강력한 솔루션을 제공합니다. 이 기능을 통합하는 데 사용할 수 있는 패키지는 있지만 기본 API 호출을 이해하면 개발자가 더 많은 제어와 사용자 정의 기능을 갖게 됩니다. 이 안내서에서는 외부 패키지에 의존하지 않고 Flutter에서 Google Autocomplete Places API를 직접 구현하는 과정을 탐색해 보겠습니다.</p>\n<p>필수 사항: 계속하기 전에 다음 사전 요구 사항이 충족되었는지 확인하세요:</p>\n<ul>\n<li>플러터 SDK가 설치되어 있어야 합니다</li>\n<li>안드로이드 스튜디오 또는 VS CODE</li>\n<li>결제가 활성화된 Google Cloud Platform (GCP) 계정 및 Places API가 활성화되어 있어야 합니다</li>\n</ul>\n<p>단계 1: Google Cloud Platform 프로젝트 설정</p>\n<ul>\n<li>Google Cloud Platform 콘솔로 이동: <a href=\"https://console.cloud.google.com/\" rel=\"nofollow\" target=\"_blank\">https://console.cloud.google.com/</a></li>\n<li>스크린샷에 표시된 대로 새 프로젝트를 만들거나 기존 프로젝트를 선택하세요</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_1.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>프로젝트용 Google Places API를 활성화하세요. API 라이브러리로 이동하여 \"Places API\"를 검색하고 활성화하세요.</li>\n</ol>\n<p>왼쪽 상단 모서리에 있는 햄버거 아이콘을 클릭하고 API 및 서비스 라이브러리를 선택한 후, 우측 하단 구석에 있는 Place API를 클릭하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-IntegratingGoogleAutocompletePlacesAPIinFlutterWithoutExternalPackagesAComprehensiveGuide_2.png\" alt=\"이미지\"></p>\n<p>활성화될 때와 같이 보일 것입니다.</p>\n<ol start=\"4\">\n<li>“Credentials” 탭으로 이동하여 API 자격 증명을 생성하세요. “Create Credentials”를 선택하고 “API Key”를 선택한 후 지침에 따라 API 키를 생성하세요.</li>\n</ol>\n<p>상단 좌측 구석의 햄버거 아이콘을 클릭한 후 API 및 서비스 “Credentials”를 선택하고 CREATE CREDENTIALS를 클릭한 후 API Key를 선택하세요. 이렇게 하면 API 키가 생성되며, 이를 다른 사람과 공유하지 마세요.</p>\n<h2>플러터 프로젝트를 생성하고 다음 패키지들을 추가해봐요</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">uuid</span>: ^<span class=\"hljs-number\">4.3</span><span class=\"hljs-number\">.3</span>\n<span class=\"hljs-attr\">http</span>:\n</code></pre>\n<p>uuid 패키지는 세션을 관리하는 데 사용될 거에요(세션이 무엇인지는 마지막에 설명할게요)</p>\n<p>코드 설명:</p>\n<p>먼저 사용자로부터 입력을 받기 위해 Text Field를 사용하는 컨트롤러를 만들었습니다. 그리고 uuid 인스턴스를 초기화하였는데, 이는 새로운 세션을 생성하는 데 도움이 됩니다. 그리고 initState() 메서드에서는 컨트롤러의 변경사항을 감지하고 사용자가 무언가를 입력할 때 getSuggestion(_controller.text) 함수를 호출합니다.</p>\n<p>_placeList에는 API 호출이 성공했을 때 화면에 자동완성 추천을 저장합니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">final</span> _controller = TextEditingController();\n<span class=\"hljs-keyword\">var</span> uuid = <span class=\"hljs-keyword\">const</span> Uuid();\n<span class=\"hljs-built_in\">String</span> _sessionToken = <span class=\"hljs-string\">'1234567890'</span>;\n<span class=\"hljs-built_in\">List</span>&#x3C;<span class=\"hljs-built_in\">dynamic</span>> _placeList = [];\n\n<span class=\"hljs-meta\">@override</span>\n<span class=\"hljs-keyword\">void</span> initState() {\n  <span class=\"hljs-keyword\">super</span>.initState();\n  _controller.addListener(() {\n    _onChanged();\n  });\n}\n\n_onChanged() {\n  <span class=\"hljs-keyword\">if</span> (_sessionToken == <span class=\"hljs-keyword\">null</span>) {\n    setState(() {\n      _sessionToken = uuid.v4();\n    });\n  }\n  getSuggestion(_controller.text);\n}\n</code></pre>\n<p>이 함수에서는 http 패키지를 사용하여 입력 요청을 Google 서버로 보냅니다. 성공적으로 처리되면 해당 데이터를 배열에 저장하고 화면을 새로 고침하여 보여줍니다.</p>\n<p>API 키는 안전한 저장소에 보관하거나 다른 좋은 방법을 따라 오용되지 않도록 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getSuggestion</span>(<span class=\"hljs-title class_\">String</span> input) <span class=\"hljs-keyword\">async</span> {\n\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">PLACES_API_KEY</span> = <span class=\"hljs-string\">\"\"</span>;\n\n  <span class=\"hljs-keyword\">try</span>{\n    <span class=\"hljs-title class_\">String</span> baseURL = <span class=\"hljs-string\">'https://maps.googleapis.com/maps/api/place/autocomplete/json'</span>;\n    <span class=\"hljs-title class_\">String</span> request = <span class=\"hljs-string\">'$baseURL?input=$input&#x26;key=$PLACES_API_KEY&#x26;sessiontoken=$_sessionToken'</span>;\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> http.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">Uri</span>.<span class=\"hljs-title function_\">parse</span>(request));\n    <span class=\"hljs-keyword\">var</span> data = json.<span class=\"hljs-title function_\">decode</span>(response.<span class=\"hljs-property\">body</span>);\n    <span class=\"hljs-keyword\">if</span> (kDebugMode) {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'mydata'</span>);\n      <span class=\"hljs-title function_\">print</span>(data);\n    }\n    <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-property\">statusCode</span> == <span class=\"hljs-number\">200</span>) {\n      <span class=\"hljs-title function_\">setState</span>(() {\n        _placeList = json.<span class=\"hljs-title function_\">decode</span>(response.<span class=\"hljs-property\">body</span>)[<span class=\"hljs-string\">'predictions'</span>];\n      });\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Exception</span>(<span class=\"hljs-string\">'Failed to load predictions'</span>);\n    }\n  }<span class=\"hljs-keyword\">catch</span>(e){\n    <span class=\"hljs-title function_\">print</span>(e);\n  }\n\n}\n</code></pre>\n<p>전체 소스 코드:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:convert'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/foundation.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:uuid/uuid.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:http/http.dart'</span> <span class=\"hljs-keyword\">as</span> http;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GoogleMapSearchPlacesApi</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">GoogleMapSearchPlacesApi</span>({<span class=\"hljs-title class_\">Key</span>? key}) : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-attr\">key</span>: key);\n\n\n  @override\n  _GoogleMapSearchPlacesApiState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_GoogleMapSearchPlacesApiState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_GoogleMapSearchPlacesApiState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">GoogleMapSearchPlacesApi</span>> {\n\n\n  final _controller =  <span class=\"hljs-title class_\">TextEditingController</span>();\n  <span class=\"hljs-keyword\">var</span> uuid =  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Uuid</span>();\n  <span class=\"hljs-title class_\">String</span> _sessionToken = <span class=\"hljs-string\">'1234567890'</span>;\n  <span class=\"hljs-title class_\">List</span>&#x3C;dynamic> _placeList = [];\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n    _controller.<span class=\"hljs-title function_\">addListener</span>(() {\n      <span class=\"hljs-title function_\">_onChanged</span>();\n    });\n  }\n\n  <span class=\"hljs-title function_\">_onChanged</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (_sessionToken == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-title function_\">setState</span>(() {\n        _sessionToken = uuid.<span class=\"hljs-title function_\">v4</span>();\n      });\n    }\n    <span class=\"hljs-title function_\">getSuggestion</span>(_controller.<span class=\"hljs-property\">text</span>);\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getSuggestion</span>(<span class=\"hljs-title class_\">String</span> input) <span class=\"hljs-keyword\">async</span> {\n\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">PLACES_API_KEY</span> = <span class=\"hljs-string\">\"your api key\"</span>;\n\n    <span class=\"hljs-keyword\">try</span>{\n      <span class=\"hljs-title class_\">String</span> baseURL = <span class=\"hljs-string\">'https://maps.googleapis.com/maps/api/place/autocomplete/json'</span>;\n      <span class=\"hljs-title class_\">String</span> request = <span class=\"hljs-string\">'$baseURL?input=$input&#x26;key=$PLACES_API_KEY&#x26;sessiontoken=$_sessionToken'</span>;\n      <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> http.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-title class_\">Uri</span>.<span class=\"hljs-title function_\">parse</span>(request));\n      <span class=\"hljs-keyword\">var</span> data = json.<span class=\"hljs-title function_\">decode</span>(response.<span class=\"hljs-property\">body</span>);\n      <span class=\"hljs-keyword\">if</span> (kDebugMode) {\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'mydata'</span>);\n        <span class=\"hljs-title function_\">print</span>(data);\n      }\n      <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-property\">statusCode</span> == <span class=\"hljs-number\">200</span>) {\n        <span class=\"hljs-title function_\">setState</span>(() {\n          _placeList = json.<span class=\"hljs-title function_\">decode</span>(response.<span class=\"hljs-property\">body</span>)[<span class=\"hljs-string\">'predictions'</span>];\n        });\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Exception</span>(<span class=\"hljs-string\">'Failed to load predictions'</span>);\n      }\n    }<span class=\"hljs-keyword\">catch</span>(e){\n      <span class=\"hljs-title function_\">print</span>(e);\n    }\n\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">elevation</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Search places Api'</span> ,),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Column</span>(\n        <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">start</span>,\n        <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n          <span class=\"hljs-title class_\">Align</span>(\n            <span class=\"hljs-attr\">alignment</span>: <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">topCenter</span>,\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">TextField</span>(\n              <span class=\"hljs-attr\">controller</span>: _controller,\n              <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">InputDecoration</span>(\n                <span class=\"hljs-attr\">hintText</span>: <span class=\"hljs-string\">\"Search your location here\"</span>,\n                <span class=\"hljs-attr\">focusColor</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>,\n                <span class=\"hljs-attr\">floatingLabelBehavior</span>: <span class=\"hljs-title class_\">FloatingLabelBehavior</span>.<span class=\"hljs-property\">never</span>,\n                <span class=\"hljs-attr\">prefixIcon</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">map</span>),\n                <span class=\"hljs-attr\">suffixIcon</span>: <span class=\"hljs-title class_\">IconButton</span>(\n                  <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">cancel</span>), <span class=\"hljs-attr\">onPressed</span>: () {\n                  _controller.<span class=\"hljs-title function_\">clear</span>() ;\n                },\n                ),\n              ),\n            ),\n          ),\n          <span class=\"hljs-title class_\">Expanded</span>(\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">ListView</span>.<span class=\"hljs-title function_\">builder</span>(\n              <span class=\"hljs-attr\">physics</span>: <span class=\"hljs-title class_\">NeverScrollableScrollPhysics</span>(),\n              <span class=\"hljs-attr\">shrinkWrap</span>: <span class=\"hljs-literal\">true</span>,\n              <span class=\"hljs-attr\">itemCount</span>: _placeList.<span class=\"hljs-property\">length</span>,\n              <span class=\"hljs-attr\">itemBuilder</span>: (context, index) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">GestureDetector</span>(\n                  <span class=\"hljs-attr\">onTap</span>: () <span class=\"hljs-keyword\">async</span> {\n\n                  },\n                  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">ListTile</span>(\n                    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(_placeList[index][<span class=\"hljs-string\">\"description\"</span>]),\n                  ),\n                );\n              },\n            ),\n          )\n        ],\n      ),\n    );\n  }\n }\n</code></pre>\n<p>세션 토큰에 대해 자세히 알아보고 사용한 이유에 대해 이해하십시오.</p>\n<p>감사합니다. 여러분이 무언가 좋은 것을 배웠기를 바랍니다.</p>\n<p>이 블로그가 도움이 되었다면 좋아요와 공유를 부탁드립니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}