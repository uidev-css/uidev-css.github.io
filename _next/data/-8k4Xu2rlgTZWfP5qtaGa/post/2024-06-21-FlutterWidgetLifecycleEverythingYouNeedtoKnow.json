{"pageProps":{"post":{"title":"플러터 위젯 생명주기 모든 것을 알아보세요","description":"","date":"2024-06-21 21:28","slug":"2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow","content":"\n\n![이미지](/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow.png)\n\n플러터(Flutter)는 구글의 UI 툴킷으로, 모바일, 웹 및 데스크톱용으로 아름답고 네이티브로 결합된 애플리케이션을 단일 코드베이스에서 빠르게 개발할 수 있도록 도와줍니다. 이는 상태를 가지는(stateful) 및 상태를 가지지 않는(stateless) 위젯의 조합입니다. 위젯 라이프사이클을 이해하는 것은 고품질의 플러터 애플리케이션을 개발하기 위해 꼭 필요합니다.\n\n이 블로그 포스트에서는 실제 예제와 함께 플러터에서의 위젯 라이프사이클에 대해 학습하여 작동 방식을 이해하는 데 도움이 되도록 하겠습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:960/1*i4BhVQPDcv8mspZ1TOP4_g.gif)\n\n<div class=\"content-ad\"></div>\n\n위젯 생명주기에 들어가기 전에, 이 위젯이 무엇을 의미하며 Flutter에서 어떤 유형의 위젯이 있는지 먼저 이해해 보겠습니다.\n\n# 위젯이란 무엇인가요?\n\n위젯은 Flutter 애플리케이션의 구성 요소입니다. 버튼에서 복잡한 UI 구성 요소까지 모든 것이 될 수 있습니다. 위젯은 애플리케이션의 사용자 인터페이스를 구성하는 데 사용됩니다. Flutter 애플리케이션은 위젯 트리로 구성됩니다. 각 위젯은 고유한 속성을 가지며 다른 위젯 내에 중첩될 수 있습니다.\n\n여기서 위젯을 자세히 설명했습니다.\n\n<div class=\"content-ad\"></div>\n\n- 상태가 없는 위젯.\n- 상태를 가지는 위젯.\n\n상태가 없는 위젯은 상태를 포함하지 않기 때문에 부모가 변경될 때만 업데이트될 수 있습니다. 생성된 후에 상태가 없는 위젯은 업데이트할 수 없으므로 변하지 않고 불변성을 가집니다. 변경 사항을 보려면 새 데이터를 제공하여 다시 만들어야 합니다.\n\n```dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n상태를 가지는 위젯은 내부적으로 상태를 가지므로 상태가 변경될 때나 부모가 변경될 때 업데이트될 수 있습니다. 가변적인 위젯이므로 수명 동안 여러 번 그려질 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```dart\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n```\n\n![Flutter Widget Lifecycle - Everything You Need to Know](/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow_1.png)\n\n# 위젯 라이프사이클 메서드란:\n\n위젯 라이프사이클은 위젯이 생성, 업데이트 또는 파괴될 때 발생하는 일련의 이벤트입니다. 위젯 라이프사이클을 이해하는 것은 효율적인 Flutter 애플리케이션을 작성하는 데 중요합니다.\n\n\n<div class=\"content-ad\"></div>\n\n- createState(): 위 메서드는 위젯의 상태 객체를 생성합니다. 상태를 가진 위젯을 만들 때, 프레임워크는 createState() 메서드를 호출하며 이를 재정의해야 합니다.\n\n```dart\nclass MyPage extends StatefulWidget {\n  @override\n  _MyPageState createState() => _MyPageState();\n}\n```\n\n- initState(): 위 메서드는 상태 객체 생성 후에 호출됩니다. 위젯의 상태를 초기화하는 데 사용됩니다.\n\n```dart\nlate int _counter;\n@override\nvoid initState() {\n  print(\"initState\");\n  _counter = 0;\n  super.initState();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- build() 메서드: 이 메서드는 상태 객체가 초기화된 후에 호출됩니다. 위젯 트리를 구축하는 데 사용됩니다. initState, didChangeDependencies, didUpdateWidget 또는 setState를 통해 상태가 변경된 후에 위젯이 다시 빌드될 때마다 호출됩니다.\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    print(\"build\");\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\"Lifecycle Demo\"),\n      ),\n      body: Container(\n          child: Column(\n        children: [\n          Text(_counter.toString()),\n          ElevatedButton(onPressed: _increment, child: const Text(\"Increment\"))\n        ],\n      )),\n    );\n  }\n```\n\n- didChangeDependencies() 메서드: 이 메서드는 initState 후에 즉시 호출되며, 상태 객체의 종속성이 InheritedWidget을 통해 변경된 경우에 호출됩니다.\n\n```dart\n  @override\n  void didChangeDependencies() {\n    print(\"didChangeDependencies\");\n    super.didChangeDependencies();\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n- didUpdateWidget(): 위젯이 새로운 속성으로 업데이트될 때 호출되는 메서드입니다. 일반적인 경우는 부모가 생성자를 통해 자식 위젯에 변수를 전달할 때입니다.\n\n```js\n  @override\n  void didUpdateWidget(covariant MyPage oldWidget) {\n    print(\"didUpdateWidget\");\n    super.didUpdateWidget(oldWidget);\n  }\n```\n\n- deactivate(): 이 메서드는 State가 subtree A에서 제거되고 GlobalKey를 사용하여 subtree B로 다시 삽입될 때 호출됩니다.\n\n```js\n  @override\n  void deactivate() {\n    print(\"deactivate\");\n    super.deactivate();\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n- dispose(): 위젯이 영구적으로 파괴되기 전에 호출되는 메서드입니다. 네트워크 연결을 닫거나 애니메이션을 중지하는 등 위젯이 사용한 모든 리소스를 해제하는 데 사용됩니다.\n\n```js\n  @override\n  void dispose() {\n    print(\"dispose\");\n    super.dispose();\n  }\n```\n\n코드 파일\n\n```js\nclass MyPage extends StatefulWidget {\n  const MyPage({super.key});\n\n  @override\n  State<MyPage> createState() {\n    print(\"createState\");\n    return _MyPageState();\n  }\n}\n\nclass _MyPageState extends State<MyPage> {\n  void _increment() {\n    setState(() {\n      _counter = _counter + 1;\n    });\n  }\n\n  late int _counter;\n  @override\n  void initState() {\n    print(\"initState\");\n    _counter = 0;\n    super.initState();\n  }\n\n  @override\n  void didChangeDependencies() {\n    print(\"didChangeDependencies\");\n    super.didChangeDependencies();\n  }\n\n  @override\n  void didUpdateWidget(covariant MyPage oldWidget) {\n    print(\"didUpdateWidget\");\n    super.didUpdateWidget(oldWidget);\n  }\n\n  @override\n  void dispose() {\n    print(\"dispose\");\n    super.dispose();\n  }\n\n  @override\n  void deactivate() {\n    print(\"deactivate\");\n    super.deactivate();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    print(\"build\");\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\"Lifecycle Demo\"),\n      ),\n      body: Container(\n          child: Column(\n        children: [\n          Text(_counter.toString()),\n          ElevatedButton(onPressed: _increment, child: const Text(\"Increment\"))\n        ],\n      )),\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n라이프사이클 메서드의 순서:\n\n![라이프사이클](/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow_2.png)\n\n# 결론\n\n요약하면, 위젯 라이프사이클을 이해하는 것은 고품질의 플러터 애플리케이션을 개발하는 데 필수적입니다. 위젯은 플러터 애플리케이션의 구성 요소이며, 각 위젯은 고유의 라이프사이클을 갖습니다. 위젯 라이프사이클을 숙지함으로써 더 효율적이고 효과적인 플러터 애플리케이션을 개발할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n❤ ❤ 이 글 읽어 주셔서 감사합니다 ❤ ❤\n\n만약 이 블로그가 유익하다고 느끼신다면 아래에 👏 클랩(clap)을 부탁드립니다.\n\nLinkedIn에서 연결해요.\n\n저는 플러터 앱 라이프사이클에 관한 모든 것을 설명한 이 블로그를 썼어요 (위젯 라이프사이클과는 다릅니다)","ogImage":{"url":"/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow_0.png"},"coverImage":"/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow.png\" alt=\"이미지\"></p>\n<p>플러터(Flutter)는 구글의 UI 툴킷으로, 모바일, 웹 및 데스크톱용으로 아름답고 네이티브로 결합된 애플리케이션을 단일 코드베이스에서 빠르게 개발할 수 있도록 도와줍니다. 이는 상태를 가지는(stateful) 및 상태를 가지지 않는(stateless) 위젯의 조합입니다. 위젯 라이프사이클을 이해하는 것은 고품질의 플러터 애플리케이션을 개발하기 위해 꼭 필요합니다.</p>\n<p>이 블로그 포스트에서는 실제 예제와 함께 플러터에서의 위젯 라이프사이클에 대해 학습하여 작동 방식을 이해하는 데 도움이 되도록 하겠습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:960/1*i4BhVQPDcv8mspZ1TOP4_g.gif\" alt=\"이미지\"></p>\n<p>위젯 생명주기에 들어가기 전에, 이 위젯이 무엇을 의미하며 Flutter에서 어떤 유형의 위젯이 있는지 먼저 이해해 보겠습니다.</p>\n<h1>위젯이란 무엇인가요?</h1>\n<p>위젯은 Flutter 애플리케이션의 구성 요소입니다. 버튼에서 복잡한 UI 구성 요소까지 모든 것이 될 수 있습니다. 위젯은 애플리케이션의 사용자 인터페이스를 구성하는 데 사용됩니다. Flutter 애플리케이션은 위젯 트리로 구성됩니다. 각 위젯은 고유한 속성을 가지며 다른 위젯 내에 중첩될 수 있습니다.</p>\n<p>여기서 위젯을 자세히 설명했습니다.</p>\n<ul>\n<li>상태가 없는 위젯.</li>\n<li>상태를 가지는 위젯.</li>\n</ul>\n<p>상태가 없는 위젯은 상태를 포함하지 않기 때문에 부모가 변경될 때만 업데이트될 수 있습니다. 생성된 후에 상태가 없는 위젯은 업데이트할 수 없으므로 변하지 않고 불변성을 가집니다. 변경 사항을 보려면 새 데이터를 제공하여 다시 만들어야 합니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> main() => runApp(MyApp());\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Container();\n  }\n}\n</code></pre>\n<p>상태를 가지는 위젯은 내부적으로 상태를 가지므로 상태가 변경될 때나 부모가 변경될 때 업데이트될 수 있습니다. 가변적인 위젯이므로 수명 동안 여러 번 그려질 수 있습니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> main() => runApp(MyApp());\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  _MyAppState createState() => _MyAppState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_MyAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&#x3C;<span class=\"hljs-title\">MyApp</span>> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Container();\n  }\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow_1.png\" alt=\"Flutter Widget Lifecycle - Everything You Need to Know\"></p>\n<h1>위젯 라이프사이클 메서드란:</h1>\n<p>위젯 라이프사이클은 위젯이 생성, 업데이트 또는 파괴될 때 발생하는 일련의 이벤트입니다. 위젯 라이프사이클을 이해하는 것은 효율적인 Flutter 애플리케이션을 작성하는 데 중요합니다.</p>\n<ul>\n<li>createState(): 위 메서드는 위젯의 상태 객체를 생성합니다. 상태를 가진 위젯을 만들 때, 프레임워크는 createState() 메서드를 호출하며 이를 재정의해야 합니다.</li>\n</ul>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  _MyPageState createState() => _MyPageState();\n}\n</code></pre>\n<ul>\n<li>initState(): 위 메서드는 상태 객체 생성 후에 호출됩니다. 위젯의 상태를 초기화하는 데 사용됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">late</span> <span class=\"hljs-built_in\">int</span> _counter;\n<span class=\"hljs-meta\">@override</span>\n<span class=\"hljs-keyword\">void</span> initState() {\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"initState\"</span>);\n  _counter = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">super</span>.initState();\n}\n</code></pre>\n<ul>\n<li>build() 메서드: 이 메서드는 상태 객체가 초기화된 후에 호출됩니다. 위젯 트리를 구축하는 데 사용됩니다. initState, didChangeDependencies, didUpdateWidget 또는 setState를 통해 상태가 변경된 후에 위젯이 다시 빌드될 때마다 호출됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-dart\">  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"build\"</span>);\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      appBar: AppBar(\n        title: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">\"Lifecycle Demo\"</span>),\n      ),\n      body: Container(\n          child: Column(\n        children: [\n          Text(_counter.toString()),\n          ElevatedButton(onPressed: _increment, child: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">\"Increment\"</span>))\n        ],\n      )),\n    );\n  }\n</code></pre>\n<ul>\n<li>didChangeDependencies() 메서드: 이 메서드는 initState 후에 즉시 호출되며, 상태 객체의 종속성이 InheritedWidget을 통해 변경된 경우에 호출됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-dart\">  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-keyword\">void</span> didChangeDependencies() {\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"didChangeDependencies\"</span>);\n    <span class=\"hljs-keyword\">super</span>.didChangeDependencies();\n  }\n</code></pre>\n<ul>\n<li>didUpdateWidget(): 위젯이 새로운 속성으로 업데이트될 때 호출되는 메서드입니다. 일반적인 경우는 부모가 생성자를 통해 자식 위젯에 변수를 전달할 때입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">didUpdateWidget</span>(<span class=\"hljs-params\">covariant MyPage oldWidget</span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"didUpdateWidget\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">didUpdateWidget</span>(oldWidget);\n  }\n</code></pre>\n<ul>\n<li>deactivate(): 이 메서드는 State가 subtree A에서 제거되고 GlobalKey를 사용하여 subtree B로 다시 삽입될 때 호출됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deactivate</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"deactivate\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">deactivate</span>();\n  }\n</code></pre>\n<ul>\n<li>dispose(): 위젯이 영구적으로 파괴되기 전에 호출되는 메서드입니다. 네트워크 연결을 닫거나 애니메이션을 중지하는 등 위젯이 사용한 모든 리소스를 해제하는 데 사용됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"dispose\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">dispose</span>();\n  }\n</code></pre>\n<p>코드 파일</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyPage</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>});\n\n  @override\n  <span class=\"hljs-title class_\">State</span>&#x3C;<span class=\"hljs-title class_\">MyPage</span>> <span class=\"hljs-title function_\">createState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"createState\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">_MyPageState</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyPageState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyPage</span>> {\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_increment</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">setState</span>(() {\n      _counter = _counter + <span class=\"hljs-number\">1</span>;\n    });\n  }\n\n  late int _counter;\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"initState\"</span>);\n    _counter = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">didChangeDependencies</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"didChangeDependencies\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">didChangeDependencies</span>();\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">didUpdateWidget</span>(<span class=\"hljs-params\">covariant MyPage oldWidget</span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"didUpdateWidget\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">didUpdateWidget</span>(oldWidget);\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"dispose\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">dispose</span>();\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deactivate</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"deactivate\"</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">deactivate</span>();\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"build\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Lifecycle Demo\"</span>),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Container</span>(\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n        <span class=\"hljs-attr\">children</span>: [\n          <span class=\"hljs-title class_\">Text</span>(_counter.<span class=\"hljs-title function_\">toString</span>()),\n          <span class=\"hljs-title class_\">ElevatedButton</span>(<span class=\"hljs-attr\">onPressed</span>: _increment, <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Increment\"</span>))\n        ],\n      )),\n    );\n  }\n}\n</code></pre>\n<p>라이프사이클 메서드의 순서:</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterWidgetLifecycleEverythingYouNeedtoKnow_2.png\" alt=\"라이프사이클\"></p>\n<h1>결론</h1>\n<p>요약하면, 위젯 라이프사이클을 이해하는 것은 고품질의 플러터 애플리케이션을 개발하는 데 필수적입니다. 위젯은 플러터 애플리케이션의 구성 요소이며, 각 위젯은 고유의 라이프사이클을 갖습니다. 위젯 라이프사이클을 숙지함으로써 더 효율적이고 효과적인 플러터 애플리케이션을 개발할 수 있습니다.</p>\n<p>❤ ❤ 이 글 읽어 주셔서 감사합니다 ❤ ❤</p>\n<p>만약 이 블로그가 유익하다고 느끼신다면 아래에 👏 클랩(clap)을 부탁드립니다.</p>\n<p>LinkedIn에서 연결해요.</p>\n<p>저는 플러터 앱 라이프사이클에 관한 모든 것을 설명한 이 블로그를 썼어요 (위젯 라이프사이클과는 다릅니다)</p>\n</body>\n</html>\n"},"__N_SSG":true}