{"pageProps":{"post":{"title":"Flutter에서 Provider로 상태 관리 이해하기","description":"","date":"2024-06-21 23:43","slug":"2024-06-21-UnderstandingstatemanagementwithProviderinFlutter","content":"\n\n<img src=\"/assets/img/2024-06-21-UnderstandingstatemanagementwithProviderinFlutter_0.png\" />\n\n플러터에서 \"provider\"는 애플리케이션 내에서 상태 관리와 데이터 공유에 사용되는 인기 있는 패키지입니다. Provider를 사용하면 애플리케이션의 다양한 구성 요소(위젯) 간에 데이터를 공유하고 업데이트할 수 있습니다. 이를 통해 상태 관리를 간단히 처리하고 전통적인 상태 관리 기술을 사용하지 않고 위젯 트리에서 데이터 변경을 추적하고 업데이트할 수 있습니다.\n\nProvider 개념을 이해하기 위해 몇 가지 주요 개념을 살펴보겠습니다:\n\n- Provider: Provider는 데이터 소스를 제공하고 애플리케이션 내에서 데이터에 액세스할 수 있도록 지원하는 패키지입니다. 데이터 프로바이더를 생성할 때 일반적으로 ChangeNotifier 클래스를 사용합니다. 이 클래스는 가변 상태를 나타내며 그 내부 데이터가 변경될 때 청취자들에게 알립니다.\n- Consumer: Consumer 위젯은 데이터 프로바이더의 값을 액세스하고 해당 변경 사항을 추적하는 데 사용됩니다. 데이터 프로바이더의 위젯 트리 내에 있으며 관련 데이터에 기초하여 스스로 다시 구축됩니다. 다시 말하면 데이터가 변경될 때 자동으로 업데이트됩니다.\n- Provider.of(): 이 메소드를 사용하면 위젯 트리 내에서 가장 가까운 데이터 프로바이더에 액세스할 수 있습니다. 이를 통해 관련 데이터를 검색하고 업데이트를 추적할 수 있습니다.\n- ChangeNotifier: 이 클래스는 데이터 프로바이더의 기반이 됩니다. ChangeNotifier 클래스를 확장한 클래스를 생성함으로써 가변 상태를 나타낼 수 있습니다. 데이터가 변경될 때 notifyListeners() 메소드를 호출하여 청취자에게 알릴 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이제 제공자 개념을 사용하여 데이터 공유를 구현하는 방법을 살펴보겠습니다:\n\n- 먼저 데이터 제공자 클래스를 만들고 ChangeNotifier 클래스에서 확장합니다.\n\n```dart\nimport 'package:flutter/foundation.dart';\n\nclass CounterProvider with ChangeNotifier {\n  int _count = 0;\n\n  int get count => _count;\n\n  void increment() {\n    _count++;\n    notifyListeners();\n  }\n}\n```\n\n다음으로, 응용 프로그램 위젯 트리의 최상위에 MultiProvider를 생성하고 생성한 데이터 제공자를 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nvoid main() {\n  runApp(\n    MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) => CounterProvider()),\n      ],\n      child: MyApp(),\n    ),\n  );\n}\n```\n\n이제 Consumer 위젯을 사용하여 모든 위젯에서 데이터에 액세스할 수 있습니다.\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nclass MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Consumer<CounterProvider>(\n      builder: (context, counterProvider, child) {\n        return Text(\n          'Count: ${counterProvider.count}',\n          style: TextStyle(fontSize: 24),\n        );\n      },\n    );\n  }\n}\n```\n\n위의 예에서는 CounterProvider 클래스 내의 count 변수에 액세스하여 업데이트가 발생할 때마다 위젯을 자동으로 다시 빌드합니다.\n\n\n<div class=\"content-ad\"></div>\n\nProvider 패키지를 사용하면 Flutter 애플리케이션에서 데이터 공유를 쉽게 구현할 수 있어요. 위젯 간 데이터 통신과 업데이트가 간단해지며, 애플리케이션 전체 성능이 향상될 거예요.\n\n우선, pubspec.yaml 파일에 provider 패키지를 추가했는지 확인해주세요.\n\n그런 다음, 다음 코드를 main.dart 파일로 사용할 수 있어요:\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\n// 단계 1: 데이터 제공자 클래스 생성\nclass CounterProvider with ChangeNotifier {\n  int _count = 0;\n\n  int get count => _count;\n\n  void increment() {\n    _count++;\n    notifyListeners();\n  }\n}\n\nvoid main() {\n  runApp(\n    // 단계 2: 앱을 MultiProvider로 래핑\n    MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) => CounterProvider()),\n      ],\n      child: MyApp(),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Provider Example',\n      theme: ThemeData(primarySwatch: Colors.blue),\n      home: HomePage(),\n    );\n  }\n}\n\nclass HomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    // 단계 3: Consumer 위젯을 사용하여 데이터에 액세스\n    return Consumer<CounterProvider>(\n      builder: (context, counterProvider, child) {\n        return Scaffold(\n          appBar: AppBar(\n            title: Text('Counter App'),\n          ),\n          body: Center(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                Text(\n                  'Count:',\n                  style: TextStyle(fontSize: 24),\n                ),\n                Text(\n                  '${counterProvider.count}',\n                  style: TextStyle(fontSize: 48, fontWeight: FontWeight.bold),\n                ),\n              ],\n            ),\n          ),\n          floatingActionButton: FloatingActionButton(\n            onPressed: () {\n              // 단계 4: 상태 업데이트 트리거\n              counterProvider.increment();\n            },\n            child: Icon(Icons.add),\n          ),\n        );\n      },\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 예시에서는 ChangeNotifier를 확장하는 CounterProvider 클래스를 생성합니다. 이 클래스는 카운트 변수를 관리하고 증가시키는 메서드를 제공합니다. HomePage 위젯은 Consumer 위젯을 사용하여 카운트 값을 액세스하고 화면에 표시합니다. FloatingActionButton을 누르면 프로바이더의 increment 메서드가 트리거되어 카운트를 업데이트하고 UI를 다시 빌드하도록 알립니다.\n\n이 앱을 실행하면 카운트가 표시된 화면이 표시되며 FloatingActionButton을 탭할 때마다 카운트가 증가하고 화면에 변경 내용이 반영됩니다.\n\n이것은 플러터 앱에서 상태 관리를 위해 provider 패키지를 사용하는 방법의 기본 예시입니다. 이 개념을 확장하여 더 복잡한 데이터를 관리하고 응용 프로그램 전체에서 상태 변경을 처리할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-21-UnderstandingstatemanagementwithProviderinFlutter_0.png"},"coverImage":"/assets/img/2024-06-21-UnderstandingstatemanagementwithProviderinFlutter_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>플러터에서 \"provider\"는 애플리케이션 내에서 상태 관리와 데이터 공유에 사용되는 인기 있는 패키지입니다. Provider를 사용하면 애플리케이션의 다양한 구성 요소(위젯) 간에 데이터를 공유하고 업데이트할 수 있습니다. 이를 통해 상태 관리를 간단히 처리하고 전통적인 상태 관리 기술을 사용하지 않고 위젯 트리에서 데이터 변경을 추적하고 업데이트할 수 있습니다.</p>\n<p>Provider 개념을 이해하기 위해 몇 가지 주요 개념을 살펴보겠습니다:</p>\n<ul>\n<li>Provider: Provider는 데이터 소스를 제공하고 애플리케이션 내에서 데이터에 액세스할 수 있도록 지원하는 패키지입니다. 데이터 프로바이더를 생성할 때 일반적으로 ChangeNotifier 클래스를 사용합니다. 이 클래스는 가변 상태를 나타내며 그 내부 데이터가 변경될 때 청취자들에게 알립니다.</li>\n<li>Consumer: Consumer 위젯은 데이터 프로바이더의 값을 액세스하고 해당 변경 사항을 추적하는 데 사용됩니다. 데이터 프로바이더의 위젯 트리 내에 있으며 관련 데이터에 기초하여 스스로 다시 구축됩니다. 다시 말하면 데이터가 변경될 때 자동으로 업데이트됩니다.</li>\n<li>Provider.of(): 이 메소드를 사용하면 위젯 트리 내에서 가장 가까운 데이터 프로바이더에 액세스할 수 있습니다. 이를 통해 관련 데이터를 검색하고 업데이트를 추적할 수 있습니다.</li>\n<li>ChangeNotifier: 이 클래스는 데이터 프로바이더의 기반이 됩니다. ChangeNotifier 클래스를 확장한 클래스를 생성함으로써 가변 상태를 나타낼 수 있습니다. 데이터가 변경될 때 notifyListeners() 메소드를 호출하여 청취자에게 알릴 수 있습니다.</li>\n</ul>\n<p>이제 제공자 개념을 사용하여 데이터 공유를 구현하는 방법을 살펴보겠습니다:</p>\n<ul>\n<li>먼저 데이터 제공자 클래스를 만들고 ChangeNotifier 클래스에서 확장합니다.</li>\n</ul>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/foundation.dart'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CounterProvider</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">ChangeNotifier</span> </span>{\n  <span class=\"hljs-built_in\">int</span> _count = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> count => _count;\n\n  <span class=\"hljs-keyword\">void</span> increment() {\n    _count++;\n    notifyListeners();\n  }\n}\n</code></pre>\n<p>다음으로, 응용 프로그램 위젯 트리의 최상위에 MultiProvider를 생성하고 생성한 데이터 제공자를 추가합니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:provider/provider.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> main() {\n  runApp(\n    MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) => CounterProvider()),\n      ],\n      child: MyApp(),\n    ),\n  );\n}\n</code></pre>\n<p>이제 Consumer 위젯을 사용하여 모든 위젯에서 데이터에 액세스할 수 있습니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:provider/provider.dart'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyWidget</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Consumer&#x3C;CounterProvider>(\n      builder: (context, counterProvider, child) {\n        <span class=\"hljs-keyword\">return</span> Text(\n          <span class=\"hljs-string\">'Count: <span class=\"hljs-subst\">${counterProvider.count}</span>'</span>,\n          style: TextStyle(fontSize: <span class=\"hljs-number\">24</span>),\n        );\n      },\n    );\n  }\n}\n</code></pre>\n<p>위의 예에서는 CounterProvider 클래스 내의 count 변수에 액세스하여 업데이트가 발생할 때마다 위젯을 자동으로 다시 빌드합니다.</p>\n<p>Provider 패키지를 사용하면 Flutter 애플리케이션에서 데이터 공유를 쉽게 구현할 수 있어요. 위젯 간 데이터 통신과 업데이트가 간단해지며, 애플리케이션 전체 성능이 향상될 거예요.</p>\n<p>우선, pubspec.yaml 파일에 provider 패키지를 추가했는지 확인해주세요.</p>\n<p>그런 다음, 다음 코드를 main.dart 파일로 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:provider/provider.dart'</span>;\n\n<span class=\"hljs-comment\">// 단계 1: 데이터 제공자 클래스 생성</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterProvider</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title class_\">ChangeNotifier</span> {\n  int _count = <span class=\"hljs-number\">0</span>;\n\n  int get count => _count;\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) {\n    _count++;\n    <span class=\"hljs-title function_\">notifyListeners</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">runApp</span>(\n    <span class=\"hljs-comment\">// 단계 2: 앱을 MultiProvider로 래핑</span>\n    <span class=\"hljs-title class_\">MultiProvider</span>(\n      <span class=\"hljs-attr\">providers</span>: [\n        <span class=\"hljs-title class_\">ChangeNotifierProvider</span>(<span class=\"hljs-attr\">create</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =></span> <span class=\"hljs-title class_\">CounterProvider</span>()),\n      ],\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">MyApp</span>(),\n    ),\n  );\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Provider Example'</span>,\n      <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-title class_\">ThemeData</span>(<span class=\"hljs-attr\">primarySwatch</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>),\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">HomePage</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomePage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-comment\">// 단계 3: Consumer 위젯을 사용하여 데이터에 액세스</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Consumer</span>&#x3C;<span class=\"hljs-title class_\">CounterProvider</span>>(\n      <span class=\"hljs-attr\">builder</span>: (context, counterProvider, child) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n          <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Counter App'</span>),\n          ),\n          <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n              <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n              <span class=\"hljs-attr\">children</span>: [\n                <span class=\"hljs-title class_\">Text</span>(\n                  <span class=\"hljs-string\">'Count:'</span>,\n                  <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">24</span>),\n                ),\n                <span class=\"hljs-title class_\">Text</span>(\n                  <span class=\"hljs-string\">'${counterProvider.count}'</span>,\n                  <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">48</span>, <span class=\"hljs-attr\">fontWeight</span>: <span class=\"hljs-title class_\">FontWeight</span>.<span class=\"hljs-property\">bold</span>),\n                ),\n              ],\n            ),\n          ),\n          <span class=\"hljs-attr\">floatingActionButton</span>: <span class=\"hljs-title class_\">FloatingActionButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: () {\n              <span class=\"hljs-comment\">// 단계 4: 상태 업데이트 트리거</span>\n              counterProvider.<span class=\"hljs-title function_\">increment</span>();\n            },\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">add</span>),\n          ),\n        );\n      },\n    );\n  }\n}\n</code></pre>\n<p>이 예시에서는 ChangeNotifier를 확장하는 CounterProvider 클래스를 생성합니다. 이 클래스는 카운트 변수를 관리하고 증가시키는 메서드를 제공합니다. HomePage 위젯은 Consumer 위젯을 사용하여 카운트 값을 액세스하고 화면에 표시합니다. FloatingActionButton을 누르면 프로바이더의 increment 메서드가 트리거되어 카운트를 업데이트하고 UI를 다시 빌드하도록 알립니다.</p>\n<p>이 앱을 실행하면 카운트가 표시된 화면이 표시되며 FloatingActionButton을 탭할 때마다 카운트가 증가하고 화면에 변경 내용이 반영됩니다.</p>\n<p>이것은 플러터 앱에서 상태 관리를 위해 provider 패키지를 사용하는 방법의 기본 예시입니다. 이 개념을 확장하여 더 복잡한 데이터를 관리하고 응용 프로그램 전체에서 상태 변경을 처리할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}