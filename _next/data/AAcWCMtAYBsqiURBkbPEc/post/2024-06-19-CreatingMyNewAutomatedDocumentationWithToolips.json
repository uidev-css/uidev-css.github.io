{"pageProps":{"post":{"title":"제 자동화된 문서 작성 도구로 새로운 Toolips를 만들기","description":"","date":"2024-06-19 00:27","slug":"2024-06-19-CreatingMyNewAutomatedDocumentationWithToolips","content":"\n\n## 소개\n\n올해는 기존의 모든 소프트웨어를 패키징하는 데 상당한 노력을 기울이고, 크게 보완하고 있습니다. 내년에는 가정 서버에서 대형 개인 프로젝트를 배포할 수 있기를 희망하며 이를 위해 노력하고 있습니다. 현재 두 개의 생태계에 진입하여 세 번째를 완성하기 위해 노력 중입니다. 그동안 코딩을 하면서 한 가지 미뤘던 일이 있습니다. 아주 큰 생태계를 먼저 만들 것을 기대했던 럭셔리 Toolips를 이용한 소프트웨어 문서 웹사이트입니다.\n\n이 일을 오랫동안 미루었지만, 소프트웨어 문서 웹사이트를 만드는 시간은 항상 다른 곳에 쓸 수 있지만, 문서 웹사이트를 통해 더 많은 사람이 쉽게 내 소프트웨어를 사용할 수 있는 기회가 되기도 합니다. 또한 프로젝트 주변에 더 많은 기술적 글쓰기와 예제를 만들 수 있는 기회를 제공합니다. 이 모든 것을 고려하여, 오늘은 새 프로젝트 ChifiDocs를 만드는 접근 방식에 대해 이야기하겠습니다.\n\n이 프로젝트는 표준 Toolips 방식을 따라 설정됩니다. new_app을 사용하여 앱을 생성한 다음 ToolipsSession을 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nusing Toolips; Toolips.new_app(\"ChifiDocs\")\nusing Pkg; Pkg.add(\"ToolipsSession\")\n```\n\n```js\nmodule ChifiDocs\nusing Toolips\nusing Toolips.Components\nusing ToolipsSession\n\n# extensions\nlogger = Toolips.Logger()\nsession = Session([\"/\"])\n\n....\n\nexport home, logger, session\nend # ChifiDocs <3\n```\n\n이제 우리는 Julia 측 백엔드를 만들기 시작할 차례입니다.\n\n## 백엔드\n\n\n<div class=\"content-ad\"></div>\n\n툴립을 사용하는 가장 큰 장점 중 하나는 백엔드와 프론트엔드가 동일한 위치에 있고 원활하게 연결되어 있다는 것입니다. 많은 웹 개발 경우에 프론트엔드 서비스와 백엔드 서비스 사이에 통신을 하는 반면, 툴립을 사용하면 콜백 이벤트를 등록하고 연결을 제공함으로써 프론트엔드에서 백엔드를 작업할 수 있습니다.\n\n이 문서 웹사이트에 표시하고 싶은 내용에 대한 아이디어가 있으므로, 백엔드에 몇 가지를 추가해야 합니다. 우선, 내 에코시스템을 쉽게 구성하고 모든 패키지 및 내용을 표현하는 쉬운 방법이 있었으면 합니다. 둘째, 탭 기능이 있었으면 하는데 — 비활성 탭을 어딘가에 저장할 방법이 필요하며, 아마도 서버에 저장할 것입니다 (메모리를 보존하고 상대방의 메모리를 사용할 수도 있습니다). 대부분의 경우에 후자가 더 나은 해결책이지만, 이 경우에는 페이지를 메모리에 보관하는 것이 더 합리적인 선택입니다. 왜냐하면 계속해서 다른 클라이언트에게 동일한 페이지를 제공하고 있기 때문입니다. 우리의 백엔드는 이러한 모듈과 이들의 문서를 보관할 데이터를 수용하기 위해 DocModule 및 DocSystem 구조로 시작할 것입니다.\n\n```js\nmutable struct DocModule\n    mod::Module\n    pages::Vector{Component{<:Any}\n    mdpath::String\nend\n\nmutable struct DocSystem\n    name::String\n    color::String\n    modules::Vector{DocModule}\nend\n```\n\n제가 생각한 두 구조입니다. DocModule은 모듈, 페이지 및 경로인 mdpath를 보관합니다. DocSystem은 범주별 정보를 갖는 일련의 DocModule을 감싼 것으로, 색상과 표시에 대한 이름을 포함합니다. 이 프로젝트에 필요한 마지막 요소는 이 데이터를 보관할 Toolips 서버 확장 기능입니다. Auth에서 제공되는 인증 데이터를 사용하는 등 다른 옵션이 있지만, 이 경우에는 이 모든 것을 처리할 자체 시스템을 개발하여 사용하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nabstract type AbstractDocClient end\n\nmutable struct DocClient <: AbstractDocClient\n    key::String\n    tabs::Vector{Component{<:Any}\nend\n\ngetindex(dc::Vector{<:AbstractDocClient}, ref::String) = begin\n    pos = findfirst(cl::AbstractDocClient -> cl.key == ref, dc)\n    if isnothing(pos)\n\n    end\n    dc[pos]::AbstractDocClient\nend\n\nmutable struct ClientDocLoader <: Toolips.AbstractExtension\n    docsystems::Vector{DocSystem}\n    client_keys::Dict{String, String}\n    clients::Vector{DocClient}\n    pages::Vector{AbstractComponent}\n    ClientDocLoader(docsystems::Vector{DocSystem}) = begin\n        pages::Vector{AbstractComponent} = Vector{AbstractComponent}([generate_menu(doc_systems)])\n        new(docsystems, Dict{String, String}(), Vector{DocClient}(), pages)::ClientDocLoader\n    end\nend\n```\n\n\n이제 이 백엔드에서 프론트엔드를 구축하고 올바른 탭을 클라이언트에 제공해야 합니다. 이 모듈에서 메뉴를 구축하는 `generate_menu`로 시작하겠습니다.\n\n```js\nfunction generate_menu(mods::Vector{DocSystem})\n    menuholder::Component{:div} = div(\"mainmenu\", align = \"center\", \n    children = [begin\n        mdiv = a(string(menu_mod.name) * \"eco\", text = \"$(menu_mod.name)\")\n        style!(mdiv, \"background-color\" => menu_mod.color, \n        \"color\" => \"white\", \"font-size\" => 14pt, \"padding\" => 10px)\n        mdiv::Component{:a}\n    end for menu_mod in mods])\n    menuholder::Component{:div}\nend\n```\n\n또한 `ClientDocLoader`에 대한 `Toolips.on_start` 바인딩을 추가하여 서버가 시작될 때 단순히 그것을 Connection 데이터로 푸시합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction on_start(ext::ClientDocLoader, data::Dict{Symbol, <:Any}, routes::Vector{<:AbstractRoute})\n    push!(data, :doc => ext)\nend\n```\n\n결국, 우리는 각 패키지를 나타내는 더 많은 하위 요소를 생성할 것이며, 이러한 요소를 클릭했을 때 표시됩니다. 또한 generate_tabbar 함수를 추가할 것입니다.\n\n```js\nfunction generate_tabbar(client::DocClient)\n\nend\n```\n\n이 함수는 DocClient를 가져와서 탭을 만들 것입니다. 이 함수를 작성하기 전에, 이 모든 것이 어떻게 함께 작동하는지에 대한 보다 명확한 이해를 얻어봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction home(c::Toolips.AbstractConnection)\n    # 들어오는 클라이언트를 확인합니다.\n    client_keys = c[:doc].client_keys\n    ip = get_ip(c)\n    if ~(ip in keys(client_keys))\n        \n    end\n    key = client_keys[ip]\n    client::DocClient = c[:doc].clients[key]\n    # 페이지를 구성합니다.\n    pages = c[:doc].pages\n    tabbar = generate_tabbar(client)\n    mainbody::Component{:body} = body(\"main\")\n    style!(mainbody, \"background-color\" => \"#333333\")\n    push!(mainbody, pages[\"mainmenu\"], tabbar)\n    write!(c, mainbody)\nend\n```\n\n이 코드는 꽤 간단한 핸들러입니다. 먼저, 클라이언트가 클라이언트 목록에 등록되었는지 확인합니다. 그렇지 않은 경우 이 조건부에 기본 데이터를 초기화하기 위한 코드가 들어갈 것입니다. 여기서 클라이언트를 로드하고 generate_tabbar를 호출합니다. tabbar와 menu라는 또 다른 변수를 body에 push!하고 Connection에 write!합니다.\n\n이것은 물론 UI를 테스트하고 작동시키기 위한 것입니다. 이제 tabbar를 만들어 봅시다. ClientDocLoader 내에서 menu를 생성하고 있음을 주목해 주세요:\n\n```js\nmutable struct ClientDocLoader <: Toolips.AbstractExtension\n    docsystems::Vector{DocSystem}\n    client_keys::Dict{String, String}\n    clients::Vector{DocClient}\n    pages::Vector{AbstractComponent}\n    ClientDocLoader(docsystems::Vector{DocSystem}) = begin\n        pages::Vector{AbstractComponent} = Vector{AbstractComponent}([generate_menu(doc_systems)])\n        new(docsystems, Dict{String, String}(), Vector{DocClient}(), pages)::ClientDocLoader\n    end\nend\n```\n\n<div class=\"content-ad\"></div>\n\n실제로 탭바부터 시작하는 게 좋을 것 같아요. 아직 메뉴를 정확히 어떻게 할지 확실하지 않으니까요.\n\n```js\nfunction home(c::Toolips.AbstractConnection)\n    # 수신 클라이언트 확인\n    client_keys = c[:doc].client_keys\n    ip = get_ip(c)\n    if ~(ip in keys(client_keys))\n        key::String = Toolips.gen_ref(4)\n        push!(client_keys, ip => key)\n        push!(c[:doc].clients, DocClient(key, [div(\"maintab\", text = \"hello world\")]))\n    end\n    key = client_keys[ip]\n    client::DocClient = c[:doc].clients[key]\n    # 페이지 구성\n    pages = c[:doc].pages\n    tabbar = generate_tabbar(client)\n    mainbody::Component{:body} = body(\"main\")\n    style!(mainbody, \"background-color\" => \"#333333\")\n    push!(mainbody, tabbar)\n    write!(c, mainbody)\nend\n```\n\n해보죠!\n\n```js\ninclude(\"dev.jl\")\n```\n\n<div class=\"content-ad\"></div>\n\n이제 간단한 백엔드가 탭 생성 및 메뉴 생성 시스템에 연결되어 있습니다. 다음으로 이 프로젝트의 프론트엔드 부분을 시작하려 합니다. 작은 본문 패널을 만들고 그 위에 탭을 배치할 것입니다.\n\n## 프론트엔드 시작하기\n\n어떻게 구성할지에 대한 아이디어를 꽤 잡았어요. 여기 내 코드 시작 부분입니다:\n\n```js\n# 페이지 구성\n페이지 = c[:doc].pages\n탭바 = generate_tabbar(client)\n메인바디::Component{:body} = body(\"main\")\n메인컨테이너::Component{:div} = div(\"main-container\")\n메인윈도우::Component{:div} = div(\"main_window\")\n왼쪽메뉴::Component{:div} = div(\"left_menu\")\nstyle!(메인바디, \"background-color\" => \"#333333\")\npush!(메인바디, 탭바)\nwrite!(c, 메인바디)\r\n```\n\n<div class=\"content-ad\"></div>\n\nleft_menu은 현재 페이지를 탐색하는 메뉴로 사용될 예정이며, main_container는 본문과 탭바를 보유할 것입니다. 나중에 대부분의 기능은 외부 함수로 추출하거나 상황에 따라 미리 만들 것입니다. 그러나 지금은 내가 원하는 대로 빠르게 이것을 작성할 수 있게 해주세요.\n\n```js\nfunction home(c::Toolips.AbstractConnection)\n    # 수신 클라이언트 확인\n    client_keys = c[:doc].client_keys\n    ip = get_ip(c)\n    if ~(ip in keys(client_keys))\n        key::String = Toolips.gen_ref(4)\n        push!(client_keys, ip => key)\n        push!(c[:doc].clients, DocClient(key, [div(\"maintab\", text = \"hello world\")]))\n    end\n    key = client_keys[ip]\n    client::DocClient = c[:doc].clients[key]\n    # 페이지 작성\n    pages = c[:doc].pages\n    mainbody::Component{:body} = body(\"main\", align = \"center\")\n    style!(mainbody, \"margin-left\" => 5percent, \"margin-top\" => 5percent, \"background-color\" => \"#333333\", \"display\" => \"flex\")\n    main_container::Component{:div} = div(\"main-container\")\n    style!(main_container, \"height\" => 80percent, \"width\" => 75percent, \"background-color\" => \"white\", \"padding\" => 0px)\n    main_window::Component{:div} = div(\"main_window\")\n    tabbar = generate_tabbar(client)\n    style!(tabbar, \"width\" => 50percent)\n    push!(main_container, tabbar, main_window)\n    left_menu::Component{:div} = div(\"left_menu\")\n    style!(left_menu, \"width\" => 20percent, \"height\" => 80percent, \"background-color\" => \"darkgray\")\n    push!(mainbody, left_menu, main_container)\n    write!(c, mainbody)\nend\n```\n\n물론 이 두 가지는 최종적으로 무한한 높이를 갖게 될 것입니다. 여기서 메뉴가 쉽게 맨 위에 올 수 있다고 생각했습니다.\n\n```js\n    # 페이지 작성\n    pages = c[:doc].pages\n    mainbody::Component{:body} = body(\"main\", align = \"center\")\n    style!(mainbody, \"margin-left\" => 5percent, \"margin-top\" => 5percent, \"background-color\" => \"#333333\", \"display\" => \"flex\", \n    \"transition\" => 1s)\n    main_container::Component{:div} = div(\"main-container\")\n    style!(main_container, \"height\" => 80percent, \"width\" => 75percent, \"background-color\" => \"white\", \"padding\" => 0px, \"display\" => \"flex\", \"flex-direction\" => \"column\", \n    \"border-bottom-right-radius\" => 5px, \"border-top-right-radius\" => 5px, \"border\" => \"2px solid #211f1f\", \"border-left\" => \"none\", \"border-top\" => \"none\")\n    main_window::Component{:div} = div(\"main_window\")\n    tabbar = generate_tabbar(client)\n    style!(tabbar, \"width\" => 50percent)\n    push!(main_container, tabbar, main_window)\n    left_menu::Component{:div} = div(\"left_menu\")\n    style!(left_menu, \"width\" => 20percent, \"height\" => 80percent, \"background-color\" => \"darkgray\", \"border-bottom-left-radius\" => 5px, \"border-top-left-radius\" => 5px)\n    push!(mainbody, pages[\"mainmenu\"], left_menu, main_container)\n    write!(c, mainbody)\nend\n```\n\n<div class=\"content-ad\"></div>\n\n제가 탭에 대해 많은 조정을 했어요:\n\n```js\nfunction generate_tabbar(client::DocClient)\n    tabholder::Component{:div} = div(\"tabs\", align = \"left\",\n    children = [begin\n        taba = a(\"tab$(tab.name)\", text = \"$(tab.name)\")\n        style!(taba, \"padding\" => 10px, \"font-size\" => 13pt, \"font-weight\" => \"bold\", \n        \"color\" => \"#333333\", \"background-color\" => \"lightgray\", \"cursor\" => \"pointer\", \n        \"border-bottom\" => \"1px solid #333333\", \"border-right\" => \"1px solid #333333\")\n        taba\n    end for (e, tab) in enumerate(client.tabs)])\n    childs = tabholder[:children]\n    style!(childs[1], \"background-color\" => \"white\", \"border-bottom\" => \"0px\", \n    \"border-top-left-radius\" => 10px)\n    style!(childs[length(childs)], \"border-top-right-radius\" => 10px)\n    tabholder::Component{:div}\nend\n```\n\n요것은 여전히 꽤 간단한데, 조금 더 잘 정리하고 싶어하지만 현재 상태에 매우 만족해요.\n\n## back-end II\n\n<div class=\"content-ad\"></div>\n\n우리는 독스트링과 마크다운을 위한 자동화된 문서화 시스템을 만들기 위해 노력 중이에요. 하지만 이를 위해 더 많은 백엔드를 구축할 필요가 있을 거예요. 이 일을 진행하기 위한 첫 번째 단계는 DocModule과 DocSystem 타입을 업데이트하여 필요한 모든 것을 확실히 갖추는 것이에요.\n\n중요한 것은 이 문서 빌더를 실제로 개방적으로 구현하고 싶다는 점이에요. 이 빌더가 Chifi 문서만 생성하는 것이 아니라, 모든 것이 문서 생성기에 로드되기를 원해요. 이에 대한 요구사항은 약간 복잡할 수 있어요. 나의 목표는 각 프로젝트의 데이터를 매핑하는 TOML 구성 파일이 필요하다는 것이죠.\n\n[chifi]\ncolor = \"white\"\ntxtcolor = \"#333333\"\nicon = \"\"\n\n[chifi.Chifi]\npath = \"toolips/Toolips\"\ncolor = \"\"\npages = [\"getting-started\", \"firstoverview.md\"]\n\n[parametric]\ncolor = \"#333333\"\ntxtcolor = \"white\"\nicon = \"\"\n\n[parametric.ParametricProcesses]\ncolor = \"#75B2C8\"\ntxtcolor = \"white\"\n\n[toolips]\ncolor = \"#75B2C8\"\ntxtcolor = \"white\"\nicon = \"\"\n\n[toolips.Toolips]\npath = \"toolips/Toolips\"\ncolor = \"\"\npages = [\"getting-started\", \"firstoverview.md\"]\n\n[toolips.ToolipsSession]\npath = \"toolips/ToolipsSession\"\ncolor = \"\"\npages = [\"nil\"]\n\n[gattino]\ncolor = \"#C178B5\"\ntxtcolor = \"white\"\nicon = \"\"\n\n[gattino.Gattino]\npath = \"gattino/Gattino\"\ncolor = \"\"\npages = [\"sample\", \"gattino.md\"]\n\n<div class=\"content-ad\"></div>\n\n다음으로 데이터를 프론트엔드에 채워 넣는 몇 가지 새로운 추가 사항.\n\n```js\nfunction generate_menu(mods::Vector{DocSystem})\n    menuholder::Component{:div} = div(\"mainmenu\", align = \"center\", \n    children = [begin\n        mdiv = a(string(menu_mod.name) * \"eco\", text = \"$(menu_mod.name)\")\n        style!(mdiv, \"background-color\" => menu_mod.color, \n        \"color\" => \"white\", \"font-size\" => \"20pt\", \"padding\" => \"14px\", \"font-weight\" => \"bold\")\n        mdiv::Component{:a}\n    end for menu_mod in mods])\n    style!(menuholder, \"position\" => \"absolute\", \"top\" => \"-100\", \"left\" => \"0\", \"width\" => \"100%\", \"height\" => \"0px\", \n    \"transition\" => \"800ms\")\n    menuholder::Component{:div}\nend\n\nfunction generate_menu(dm::Vector{DocModule})\n    \nend\n\nfunction switch_tabs!(c::AbstractConnection, cm::ComponentModifier, t::String)\n\nend\n\nfunction generate_tabbar(c::AbstractConnection, client::DocClient)\n    tabholder::Component{:div} = div(\"tabs\", align = \"left\",\n    children = [begin\n        labelname = join(split(tab.name, \"-\")[2:3], \" | \")\n        taba = a(\"tab$(tab.name)\", text = \"$labelname\")\n        style!(taba, \"padding\" => \"10px\", \"font-size\" => \"13pt\", \"font-weight\" => \"bold\", \n        \"color\" => \"#333333\", \"background-color\" => \"lightgray\", \"cursor\" => \"pointer\", \n        \"border-bottom\" => \"1px solid #333333\", \"border-right\" => \"1px solid #333333\")\n        on(c, taba, \"click\") do cm::ComponentModifier\n            switch_tabs!(c, cm, tab.name)\n        end\n        taba\n    end for (e, tab) in enumerate(client.tabs)])\n    childs = tabholder[:children]\n    style!(tabholder, \"width\" => \"50%\")\n    style!(childs[1], \"background-color\" => \"white\", \"border-bottom\" => \"0px\", \n    \"border-top-left-radius\" => \"10px\")\n    style!(childs[length(childs)], \"border-top-right-radius\" => \"10px\")\n    return(tabholder, client.tabs[1].name)\nend\n\nfunction build_main(c::AbstractConnection, client::DocClient)\n    tabbar, docname = generate_tabbar(c, client)\n    main_container::Component{:div} = div(\"main-container\", children = [tabbar, div(\"main_window\")])\n    style!(main_container, \"height\" => \"80%\", \"width\" => \"75%\", \"background-color\" => \"white\", \"padding\" => \"0px\", \"display\" => \"flex\", \"flex-direction\" => \"column\", \n    \"border-bottom-right-radius\" => \"5px\", \"border-top-right-radius\" => \"5px\", \"border\" => \"2px solid #211f1f\", \"border-left\" => \"none\", \"border-top\" => \"none\")\n    return(main_container::Component{:div}, docname)\nend\n\nfunction build_leftmenu(c::AbstractConnection, mod::DocModule)\n    [begin \n        pagename = page.name\n        openbutton = button(\"open-$pagename\", text = \"open\")\n        labela = a(\"label-$pagename\", text = replace(pagename, \"-\" => \" \"))\n        pagemenu = div(\"pagemenu\", text = \"\")\n    end for page in mod.pages]\n    left_menu::Component{:div} = div(\"left_menu\")\n    style!(left_menu, \"width\" => \"20%\", \"height\" => \"80%\", \"background-color\" => \"darkgray\", \"border-bottom-left-radius\" => \"5px\", \"border-top-left-radius\" => \"5px\")\n    left_menu::Component{:div}\nend\n\nfunction home(c::Toolips.AbstractConnection)\n    # 수신된 클라이언트 확인\n    client_keys::Dict{String, String} = c[:doc].client_keys\n    ip::String = get_ip(c)\n    if ~(ip in keys(client_keys))\n        key::String = Toolips.gen_ref(4)\n        push!(client_keys, ip => key)\n        push!(c[:doc].clients, DocClient(key, [div(\"chifi-welcome-Chifi\")]))\n    end\n    key = client_keys[ip]\n    client::DocClient = c[:doc].clients[key]\n    # 페이지 작성\n    pages = c[:doc].pages\n    mainbody::Component{:body} = body(\"main\", align = \"center\")\n    style!(mainbody, \"margin-left\" => \"5%\", \"margin-top\" => \"5%\", \"background-color\" => \"#333333\", \"display\" => \"flex\", \n    \"transition\" => \"1s\")\n    main_container::Component{:div}, mod::String = build_main(c, client)\n    ecopage = split(mod, \"-\")\n    @info [docmod.name for docmod in c[:doc].docsystems]\n    @info [docmod.name for docmod in c[:doc].docsystems[\"toolips\"].modules]\n    loaded_page = c[:doc].docsystems[string(ecopage[1])].modules[string(ecopage[3])]\n    left_menu = build_leftmenu(c, loaded_page)\n    push!(mainbody, pages[\"mainmenu\"], left_menu, main_container)\n    write!(c, mainbody)\nend\ndocloader = ClientDocLoader()\n\nfunction start_from_project(path::String = pwd(), mod::Module = Main; ip::Toolips.IP4 = \"127.0.0.1\":8000)\n    docloader.docsystems = read_doc_config(path * \"/config.toml\", mod)\n    start!(ChifiDocs, ip)\nend\r\n```\n\n<div class=\"content-ad\"></div>\n\n@info에 대한 몇 가지 호출도 있습니다. 이는 데이터가 올바르게 로드되었는지 확인하기 위한 점검입니다. 웹 브라우저를 통해 요청을 보냅니다.\n```js\njulia> include(\"dev.jl\")\n  `~/dev/packages/chifi/ChifiDocs`에서 프로젝트를 활성화 중\n[ Info: ChifiDocs [4e841206-9f20-48d9-9ddd-dfd252355962] 사전 컴파일 중\n  `~/dev/packages/chifi/ChifiDocs/chifi`에서 프로젝트를 활성화 중\n┌ Warning: ParametricProcesses에 경로가 없어 건너뛰었습니다\n└ @ ChifiDocs ~/dev/packages/chifi/ChifiDocs/src/DocMods.jl:62\n🌷 toolips> 로드된 라우터 유형: Vector{Toolips.Route{Toolips.AbstractConnection}\n🌷 toolips> 서버가 http://192.168.1.10:8000 에서 수신 대기 중\n      활성 매니페스트 파일: 7개 발견됨\n      활성 아티팩트 파일: 2개 발견됨\n      활성 스크래치 공간: 0개 발견됨\n     삭제된 아티팩트, 리포지토리, 패키지 또는 스크래치 공간 없음\n[ Info: 수신 대기 중: 192.168.1.10:8000, 스레드 id: 1\n   pid              process type             name active\n  –––– ––––––––––––––––––––––––– –––––––––––––––– ––––––\n  1736 ParametricProcesses.Async ChifiDocs router   true\n\n\njulia> [ Info: [\"gattino\", \"parametric\", \"toolips\", \"chifi\"]\n[ Info: [\"ToolipsSession\", \"Toolips\"]\r\n```\n\n마지막으로 언급할 가치가 있는 것은 이 프로젝트의 설정이 실제로 어떻게 로드되는지입니다. 이 프로젝트에는 두 개의 별도 환경이 있습니다. 하나는 문서화할 모듈을 포함하고 다른 하나는 ChifiDocs 빌드에 필요한 종속성을 포함합니다. 전자는 chifi 아래에 포함되어 있습니다. 또한 이 프로젝트에는 각 생태계를 문서화하기 위한 마크다운 및 에셋이 포함되어 있습니다. 자동 빌드 문서 참조와 기타 자동으로 빌드되는 기능을 원하지만 새로운 튜토리얼 문서를 작성하고 제공할 수 있는 능력도 원합니다.\n```js\nshell> tree .\n.\n├── chifi\n│   ├── components.jl\n│   ├── config.toml\n│   ├── getting_started.md\n│   ├── Manifest.toml\n│   ├── modules\n│   │   ├── chifi\n│   │   ├── gattino\n│   │   │   └── Gattino\n│   │   │       └── Gattino.md\n│   │   ├── parametric\n│   │   │   └── ParametricProcesses\n│   │   │       └── ParametricProcesses.md\n│   │   └── toolips\n│   │       ├── Toolips\n│   │       │   └── GettingStarted.md\n│   │       └── ToolipsSession\n│   │           └── ToolipsSession.md\n│   ├── Project.toml\n│   └── public\n├── dev.jl\n├── Manifest.toml\n├── Project.toml\n└── src\n    ├── ChifiDocs.jl\n    └── DocMods.jl\n\n13 directories, 14 files\n```\n\n<div class=\"content-ad\"></div>\n\n여기가 내 dev.jl 파일이에요:\n\n```julia\nusing Pkg; Pkg.activate(\".\")\nusing ChifiDocs\nPkg.activate(\"chifi\")\nusing Revise\ninclude(\"chifi/components.jl\")\ntoolips_process = ChifiDocs.start_from_project(\"chifi\", ChifiDocComponents, ip = \"192.168.1.10\":8000)\n```\n\n그리고 마지막으로 components.jl 파일이에요. 그 파일이 존재하는 이유에 대해 설명하겠습니다.:\n\n```julia\n#== components.jl ==\n`components.jl`은 이 프로젝트에 특화된 특별한 소스 파일이에요. 이 파일은 dev.jl에서 불러와서 사용되며, 마크다운 문서 페이지에 사용자 정의 구성 요소를 작성하고, 문서 페이지에서 사용할 종속성을 로드할 수 있게 해줘요.\n`components.jl` 파일에서는 오직 구성 요소만 내보내야 하며, 이름으로 보간하여 마크다운에서 $를 사용하거나, Julia에서 'interpolate!' 또는 'interpolate_code!'를 사용해야 해요.\n`$`.\n==#\nmodule ChifiDocComponents\nusing Toolips\nusing ToolipsSession\nusing Gattino\n\nmodule Chifi\n\nend\nend\n```\n\n<div class=\"content-ad\"></div>\n\n올 해 제 소프트웨어가 상당히 즐거운 수준에 이르렀어요. Toolips는 함께 작업하기 좋은 웹 개발 프레임워크입니다. Gattino는 이제 사용할 준비가 되었고 두 생태계는 새로운 생태계 추가와 함께 미래의 생태계를 보고 있어요. 그동안 저는 좋은 문서가 필요했었는데, 이제 내가 직접 만들기로 결심했어요.\n\n이 프로젝트는 어느 정도 시간이 걸리겠지만, 최대한 늦어도 6월 말에는 이 문서 브라우저를 공개할 계획이에요 — 많은 기대할 만한 릴리스들과 함께. 곧 다시 다른 생태계와 함께 일할 예정이고, 제 주요 프로젝트인 Olive에 대해 고민해보려 해요. 이미 일부 예비 작업을 시작했는데, IPyCells를 수정하고, OliveHighlighters 패키지를 만들어 하이라이터를 패키징했어요. 그러나 아직 많은 작업이 남아있지만 계속해서 진전을 이뤄가고 그 점이 고맙습니다. 제 진전을 계속 지켜보고 다양한 프로젝트에 관심을 가져주셔서 감사합니다. 올해에는 많은 것들이 더 나아져가고, 올해 말에 제가 더 많은 것들을 제공할 기회를 손에 쥐게 될 것을 기대하고 있어요. 이 프로젝트를 계속할 때 왼쪽 메뉴에 항목을 채우고 내용 영역에 마크다운을 추가할 것이에요. 읽어주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-06-19-CreatingMyNewAutomatedDocumentationWithToolips_0.png"},"coverImage":"/assets/img/2024-06-19-CreatingMyNewAutomatedDocumentationWithToolips_0.png","tag":["Tech"],"readingTime":19},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>소개</h2>\n<p>올해는 기존의 모든 소프트웨어를 패키징하는 데 상당한 노력을 기울이고, 크게 보완하고 있습니다. 내년에는 가정 서버에서 대형 개인 프로젝트를 배포할 수 있기를 희망하며 이를 위해 노력하고 있습니다. 현재 두 개의 생태계에 진입하여 세 번째를 완성하기 위해 노력 중입니다. 그동안 코딩을 하면서 한 가지 미뤘던 일이 있습니다. 아주 큰 생태계를 먼저 만들 것을 기대했던 럭셔리 Toolips를 이용한 소프트웨어 문서 웹사이트입니다.</p>\n<p>이 일을 오랫동안 미루었지만, 소프트웨어 문서 웹사이트를 만드는 시간은 항상 다른 곳에 쓸 수 있지만, 문서 웹사이트를 통해 더 많은 사람이 쉽게 내 소프트웨어를 사용할 수 있는 기회가 되기도 합니다. 또한 프로젝트 주변에 더 많은 기술적 글쓰기와 예제를 만들 수 있는 기회를 제공합니다. 이 모든 것을 고려하여, 오늘은 새 프로젝트 ChifiDocs를 만드는 접근 방식에 대해 이야기하겠습니다.</p>\n<p>이 프로젝트는 표준 Toolips 방식을 따라 설정됩니다. new_app을 사용하여 앱을 생성한 다음 ToolipsSession을 추가합니다.</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Toolips</span>; <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-title function_\">new_app</span>(<span class=\"hljs-string\">\"ChifiDocs\"</span>)\nusing <span class=\"hljs-title class_\">Pkg</span>; <span class=\"hljs-title class_\">Pkg</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"ToolipsSession\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-title class_\">ChifiDocs</span>\nusing <span class=\"hljs-title class_\">Toolips</span>\nusing <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-property\">Components</span>\nusing <span class=\"hljs-title class_\">ToolipsSession</span>\n\n# extensions\nlogger = <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-title class_\">Logger</span>()\nsession = <span class=\"hljs-title class_\">Session</span>([<span class=\"hljs-string\">\"/\"</span>])\n\n....\n\n<span class=\"hljs-keyword\">export</span> home, logger, session\nend # <span class=\"hljs-title class_\">ChifiDocs</span> &#x3C;<span class=\"hljs-number\">3</span>\n</code></pre>\n<p>이제 우리는 Julia 측 백엔드를 만들기 시작할 차례입니다.</p>\n<h2>백엔드</h2>\n<p>툴립을 사용하는 가장 큰 장점 중 하나는 백엔드와 프론트엔드가 동일한 위치에 있고 원활하게 연결되어 있다는 것입니다. 많은 웹 개발 경우에 프론트엔드 서비스와 백엔드 서비스 사이에 통신을 하는 반면, 툴립을 사용하면 콜백 이벤트를 등록하고 연결을 제공함으로써 프론트엔드에서 백엔드를 작업할 수 있습니다.</p>\n<p>이 문서 웹사이트에 표시하고 싶은 내용에 대한 아이디어가 있으므로, 백엔드에 몇 가지를 추가해야 합니다. 우선, 내 에코시스템을 쉽게 구성하고 모든 패키지 및 내용을 표현하는 쉬운 방법이 있었으면 합니다. 둘째, 탭 기능이 있었으면 하는데 — 비활성 탭을 어딘가에 저장할 방법이 필요하며, 아마도 서버에 저장할 것입니다 (메모리를 보존하고 상대방의 메모리를 사용할 수도 있습니다). 대부분의 경우에 후자가 더 나은 해결책이지만, 이 경우에는 페이지를 메모리에 보관하는 것이 더 합리적인 선택입니다. 왜냐하면 계속해서 다른 클라이언트에게 동일한 페이지를 제공하고 있기 때문입니다. 우리의 백엔드는 이러한 모듈과 이들의 문서를 보관할 데이터를 수용하기 위해 DocModule 및 DocSystem 구조로 시작할 것입니다.</p>\n<pre><code class=\"hljs language-js\">mutable struct <span class=\"hljs-title class_\">DocModule</span>\n    <span class=\"hljs-attr\">mod</span>::<span class=\"hljs-title class_\">Module</span>\n    <span class=\"hljs-attr\">pages</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">Component</span>{<span class=\"xml\">&#x3C;:Any}\n    mdpath::String\nend\n\nmutable struct DocSystem\n    name::String\n    color::String\n    modules::Vector{DocModule}\nend\n</span></code></pre>\n<p>제가 생각한 두 구조입니다. DocModule은 모듈, 페이지 및 경로인 mdpath를 보관합니다. DocSystem은 범주별 정보를 갖는 일련의 DocModule을 감싼 것으로, 색상과 표시에 대한 이름을 포함합니다. 이 프로젝트에 필요한 마지막 요소는 이 데이터를 보관할 Toolips 서버 확장 기능입니다. Auth에서 제공되는 인증 데이터를 사용하는 등 다른 옵션이 있지만, 이 경우에는 이 모든 것을 처리할 자체 시스템을 개발하여 사용하겠습니다.</p>\n<pre><code class=\"hljs language-js\">abstract type <span class=\"hljs-title class_\">AbstractDocClient</span> end\n\nmutable struct <span class=\"hljs-title class_\">DocClient</span> &#x3C;: <span class=\"hljs-title class_\">AbstractDocClient</span>\n    <span class=\"hljs-attr\">key</span>::<span class=\"hljs-title class_\">String</span>\n    <span class=\"hljs-attr\">tabs</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">Component</span>{&#x3C;:Any}\nend\n\ngetindex(dc::Vector{&#x3C;:AbstractDocClient}, ref::String) = begin\n    pos = findfirst(cl::AbstractDocClient -> cl.key == ref, dc)\n    if isnothing(pos)\n\n    end\n    dc[pos]::AbstractDocClient\nend\n\nmutable struct ClientDocLoader &#x3C;: Toolips.AbstractExtension\n    docsystems::Vector{DocSystem}\n    client_keys::Dict{String, String}\n    clients::Vector{DocClient}\n    pages::Vector{AbstractComponent}\n    ClientDocLoader(docsystems::Vector{DocSystem}) = begin\n        pages::Vector{AbstractComponent} = Vector{AbstractComponent}([generate_menu(doc_systems)])\n        new(docsystems, Dict{String, String}(), Vector{DocClient}(), pages)::ClientDocLoader\n    end\nend\n</code></pre>\n<p>이제 이 백엔드에서 프론트엔드를 구축하고 올바른 탭을 클라이언트에 제공해야 합니다. 이 모듈에서 메뉴를 구축하는 <code>generate_menu</code>로 시작하겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generate_menu</span>(<span class=\"hljs-params\">mods::Vector{DocSystem}</span>)\n    <span class=\"hljs-attr\">menuholder</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"mainmenu\"</span>, align = <span class=\"hljs-string\">\"center\"</span>, \n    children = [begin\n        mdiv = <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-title function_\">string</span>(menu_mod.<span class=\"hljs-property\">name</span>) * <span class=\"hljs-string\">\"eco\"</span>, text = <span class=\"hljs-string\">\"$(menu_mod.name)\"</span>)\n        style!(mdiv, <span class=\"hljs-string\">\"background-color\"</span> => menu_mod.<span class=\"hljs-property\">color</span>, \n        <span class=\"hljs-string\">\"color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"font-size\"</span> => 14pt, <span class=\"hljs-string\">\"padding\"</span> => 10px)\n        <span class=\"hljs-attr\">mdiv</span>::<span class=\"hljs-title class_\">Component</span>{:a}\n    end <span class=\"hljs-keyword\">for</span> menu_mod <span class=\"hljs-keyword\">in</span> mods])\n    <span class=\"hljs-attr\">menuholder</span>::<span class=\"hljs-title class_\">Component</span>{:div}\nend\n</code></pre>\n<p>또한 <code>ClientDocLoader</code>에 대한 <code>Toolips.on_start</code> 바인딩을 추가하여 서버가 시작될 때 단순히 그것을 Connection 데이터로 푸시합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">on_start</span>(<span class=\"hljs-params\">ext::ClientDocLoader, data::Dict{<span class=\"hljs-built_in\">Symbol</span>, &#x3C;:Any}, routes::Vector{&#x3C;:AbstractRoute}</span>)\n    push!(data, :<span class=\"hljs-function\"><span class=\"hljs-params\">doc</span> =></span> ext)\nend\n</code></pre>\n<p>결국, 우리는 각 패키지를 나타내는 더 많은 하위 요소를 생성할 것이며, 이러한 요소를 클릭했을 때 표시됩니다. 또한 generate_tabbar 함수를 추가할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generate_tabbar</span>(<span class=\"hljs-params\">client::DocClient</span>)\n\nend\n</code></pre>\n<p>이 함수는 DocClient를 가져와서 탭을 만들 것입니다. 이 함수를 작성하기 전에, 이 모든 것이 어떻게 함께 작동하는지에 대한 보다 명확한 이해를 얻어봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">home</span>(<span class=\"hljs-params\">c::Toolips.AbstractConnection</span>)\n    # 들어오는 클라이언트를 확인합니다.\n    client_keys = c[:doc].<span class=\"hljs-property\">client_keys</span>\n    ip = <span class=\"hljs-title function_\">get_ip</span>(c)\n    <span class=\"hljs-keyword\">if</span> ~(ip <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">keys</span>(client_keys))\n        \n    end\n    key = client_keys[ip]\n    <span class=\"hljs-attr\">client</span>::<span class=\"hljs-title class_\">DocClient</span> = c[:doc].<span class=\"hljs-property\">clients</span>[key]\n    # 페이지를 구성합니다.\n    pages = c[:doc].<span class=\"hljs-property\">pages</span>\n    tabbar = <span class=\"hljs-title function_\">generate_tabbar</span>(client)\n    <span class=\"hljs-attr\">mainbody</span>::<span class=\"hljs-title class_\">Component</span>{:body} = <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">\"main\"</span>)\n    style!(mainbody, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>)\n    push!(mainbody, pages[<span class=\"hljs-string\">\"mainmenu\"</span>], tabbar)\n    write!(c, mainbody)\nend\n</code></pre>\n<p>이 코드는 꽤 간단한 핸들러입니다. 먼저, 클라이언트가 클라이언트 목록에 등록되었는지 확인합니다. 그렇지 않은 경우 이 조건부에 기본 데이터를 초기화하기 위한 코드가 들어갈 것입니다. 여기서 클라이언트를 로드하고 generate_tabbar를 호출합니다. tabbar와 menu라는 또 다른 변수를 body에 push!하고 Connection에 write!합니다.</p>\n<p>이것은 물론 UI를 테스트하고 작동시키기 위한 것입니다. 이제 tabbar를 만들어 봅시다. ClientDocLoader 내에서 menu를 생성하고 있음을 주목해 주세요:</p>\n<pre><code class=\"hljs language-js\">mutable struct <span class=\"hljs-title class_\">ClientDocLoader</span> &#x3C;: <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-property\">AbstractExtension</span>\n    <span class=\"hljs-attr\">docsystems</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">DocSystem</span>}\n    <span class=\"hljs-attr\">client_keys</span>::<span class=\"hljs-title class_\">Dict</span>{<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>}\n    <span class=\"hljs-attr\">clients</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">DocClient</span>}\n    <span class=\"hljs-attr\">pages</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">AbstractComponent</span>}\n    <span class=\"hljs-title class_\">ClientDocLoader</span>(<span class=\"hljs-attr\">docsystems</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">DocSystem</span>}) = begin\n        <span class=\"hljs-attr\">pages</span>::<span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">AbstractComponent</span>} = <span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">AbstractComponent</span>}([<span class=\"hljs-title function_\">generate_menu</span>(doc_systems)])\n        <span class=\"hljs-title function_\">new</span>(docsystems, <span class=\"hljs-title class_\">Dict</span>{<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>}(), <span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">DocClient</span>}(), pages)::<span class=\"hljs-title class_\">ClientDocLoader</span>\n    end\nend\n</code></pre>\n<p>실제로 탭바부터 시작하는 게 좋을 것 같아요. 아직 메뉴를 정확히 어떻게 할지 확실하지 않으니까요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">home</span>(<span class=\"hljs-params\">c::Toolips.AbstractConnection</span>)\n    # 수신 클라이언트 확인\n    client_keys = c[:doc].<span class=\"hljs-property\">client_keys</span>\n    ip = <span class=\"hljs-title function_\">get_ip</span>(c)\n    <span class=\"hljs-keyword\">if</span> ~(ip <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">keys</span>(client_keys))\n        <span class=\"hljs-attr\">key</span>::<span class=\"hljs-title class_\">String</span> = <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-title function_\">gen_ref</span>(<span class=\"hljs-number\">4</span>)\n        push!(client_keys, <span class=\"hljs-function\"><span class=\"hljs-params\">ip</span> =></span> key)\n        push!(c[:doc].<span class=\"hljs-property\">clients</span>, <span class=\"hljs-title class_\">DocClient</span>(key, [<span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"maintab\"</span>, text = <span class=\"hljs-string\">\"hello world\"</span>)]))\n    end\n    key = client_keys[ip]\n    <span class=\"hljs-attr\">client</span>::<span class=\"hljs-title class_\">DocClient</span> = c[:doc].<span class=\"hljs-property\">clients</span>[key]\n    # 페이지 구성\n    pages = c[:doc].<span class=\"hljs-property\">pages</span>\n    tabbar = <span class=\"hljs-title function_\">generate_tabbar</span>(client)\n    <span class=\"hljs-attr\">mainbody</span>::<span class=\"hljs-title class_\">Component</span>{:body} = <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">\"main\"</span>)\n    style!(mainbody, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>)\n    push!(mainbody, tabbar)\n    write!(c, mainbody)\nend\n</code></pre>\n<p>해보죠!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">include</span>(<span class=\"hljs-string\">\"dev.jl\"</span>)\n</code></pre>\n<p>이제 간단한 백엔드가 탭 생성 및 메뉴 생성 시스템에 연결되어 있습니다. 다음으로 이 프로젝트의 프론트엔드 부분을 시작하려 합니다. 작은 본문 패널을 만들고 그 위에 탭을 배치할 것입니다.</p>\n<h2>프론트엔드 시작하기</h2>\n<p>어떻게 구성할지에 대한 아이디어를 꽤 잡았어요. 여기 내 코드 시작 부분입니다:</p>\n<pre><code class=\"hljs language-js\"># 페이지 구성\n페이지 = c[:doc].<span class=\"hljs-property\">pages</span>\n탭바 = <span class=\"hljs-title function_\">generate_tabbar</span>(client)\n메인바디::<span class=\"hljs-title class_\">Component</span>{:body} = <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">\"main\"</span>)\n메인컨테이너::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main-container\"</span>)\n메인윈도우::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main_window\"</span>)\n왼쪽메뉴::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"left_menu\"</span>)\nstyle!(메인바디, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>)\npush!(메인바디, 탭바)\nwrite!(c, 메인바디)\n</code></pre>\n<p>left_menu은 현재 페이지를 탐색하는 메뉴로 사용될 예정이며, main_container는 본문과 탭바를 보유할 것입니다. 나중에 대부분의 기능은 외부 함수로 추출하거나 상황에 따라 미리 만들 것입니다. 그러나 지금은 내가 원하는 대로 빠르게 이것을 작성할 수 있게 해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">home</span>(<span class=\"hljs-params\">c::Toolips.AbstractConnection</span>)\n    # 수신 클라이언트 확인\n    client_keys = c[:doc].<span class=\"hljs-property\">client_keys</span>\n    ip = <span class=\"hljs-title function_\">get_ip</span>(c)\n    <span class=\"hljs-keyword\">if</span> ~(ip <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">keys</span>(client_keys))\n        <span class=\"hljs-attr\">key</span>::<span class=\"hljs-title class_\">String</span> = <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-title function_\">gen_ref</span>(<span class=\"hljs-number\">4</span>)\n        push!(client_keys, <span class=\"hljs-function\"><span class=\"hljs-params\">ip</span> =></span> key)\n        push!(c[:doc].<span class=\"hljs-property\">clients</span>, <span class=\"hljs-title class_\">DocClient</span>(key, [<span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"maintab\"</span>, text = <span class=\"hljs-string\">\"hello world\"</span>)]))\n    end\n    key = client_keys[ip]\n    <span class=\"hljs-attr\">client</span>::<span class=\"hljs-title class_\">DocClient</span> = c[:doc].<span class=\"hljs-property\">clients</span>[key]\n    # 페이지 작성\n    pages = c[:doc].<span class=\"hljs-property\">pages</span>\n    <span class=\"hljs-attr\">mainbody</span>::<span class=\"hljs-title class_\">Component</span>{:body} = <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">\"main\"</span>, align = <span class=\"hljs-string\">\"center\"</span>)\n    style!(mainbody, <span class=\"hljs-string\">\"margin-left\"</span> => 5percent, <span class=\"hljs-string\">\"margin-top\"</span> => 5percent, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>, <span class=\"hljs-string\">\"display\"</span> => <span class=\"hljs-string\">\"flex\"</span>)\n    <span class=\"hljs-attr\">main_container</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main-container\"</span>)\n    style!(main_container, <span class=\"hljs-string\">\"height\"</span> => 80percent, <span class=\"hljs-string\">\"width\"</span> => 75percent, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"padding\"</span> => 0px)\n    <span class=\"hljs-attr\">main_window</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main_window\"</span>)\n    tabbar = <span class=\"hljs-title function_\">generate_tabbar</span>(client)\n    style!(tabbar, <span class=\"hljs-string\">\"width\"</span> => 50percent)\n    push!(main_container, tabbar, main_window)\n    <span class=\"hljs-attr\">left_menu</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"left_menu\"</span>)\n    style!(left_menu, <span class=\"hljs-string\">\"width\"</span> => 20percent, <span class=\"hljs-string\">\"height\"</span> => 80percent, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"darkgray\"</span>)\n    push!(mainbody, left_menu, main_container)\n    write!(c, mainbody)\nend\n</code></pre>\n<p>물론 이 두 가지는 최종적으로 무한한 높이를 갖게 될 것입니다. 여기서 메뉴가 쉽게 맨 위에 올 수 있다고 생각했습니다.</p>\n<pre><code class=\"hljs language-js\">    # 페이지 작성\n    pages = c[:doc].<span class=\"hljs-property\">pages</span>\n    <span class=\"hljs-attr\">mainbody</span>::<span class=\"hljs-title class_\">Component</span>{:body} = <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">\"main\"</span>, align = <span class=\"hljs-string\">\"center\"</span>)\n    style!(mainbody, <span class=\"hljs-string\">\"margin-left\"</span> => 5percent, <span class=\"hljs-string\">\"margin-top\"</span> => 5percent, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>, <span class=\"hljs-string\">\"display\"</span> => <span class=\"hljs-string\">\"flex\"</span>, \n    <span class=\"hljs-string\">\"transition\"</span> => 1s)\n    <span class=\"hljs-attr\">main_container</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main-container\"</span>)\n    style!(main_container, <span class=\"hljs-string\">\"height\"</span> => 80percent, <span class=\"hljs-string\">\"width\"</span> => 75percent, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"padding\"</span> => 0px, <span class=\"hljs-string\">\"display\"</span> => <span class=\"hljs-string\">\"flex\"</span>, <span class=\"hljs-string\">\"flex-direction\"</span> => <span class=\"hljs-string\">\"column\"</span>, \n    <span class=\"hljs-string\">\"border-bottom-right-radius\"</span> => 5px, <span class=\"hljs-string\">\"border-top-right-radius\"</span> => 5px, <span class=\"hljs-string\">\"border\"</span> => <span class=\"hljs-string\">\"2px solid #211f1f\"</span>, <span class=\"hljs-string\">\"border-left\"</span> => <span class=\"hljs-string\">\"none\"</span>, <span class=\"hljs-string\">\"border-top\"</span> => <span class=\"hljs-string\">\"none\"</span>)\n    <span class=\"hljs-attr\">main_window</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main_window\"</span>)\n    tabbar = <span class=\"hljs-title function_\">generate_tabbar</span>(client)\n    style!(tabbar, <span class=\"hljs-string\">\"width\"</span> => 50percent)\n    push!(main_container, tabbar, main_window)\n    <span class=\"hljs-attr\">left_menu</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"left_menu\"</span>)\n    style!(left_menu, <span class=\"hljs-string\">\"width\"</span> => 20percent, <span class=\"hljs-string\">\"height\"</span> => 80percent, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"darkgray\"</span>, <span class=\"hljs-string\">\"border-bottom-left-radius\"</span> => 5px, <span class=\"hljs-string\">\"border-top-left-radius\"</span> => 5px)\n    push!(mainbody, pages[<span class=\"hljs-string\">\"mainmenu\"</span>], left_menu, main_container)\n    write!(c, mainbody)\nend\n</code></pre>\n<p>제가 탭에 대해 많은 조정을 했어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generate_tabbar</span>(<span class=\"hljs-params\">client::DocClient</span>)\n    <span class=\"hljs-attr\">tabholder</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"tabs\"</span>, align = <span class=\"hljs-string\">\"left\"</span>,\n    children = [begin\n        taba = <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">\"tab$(tab.name)\"</span>, text = <span class=\"hljs-string\">\"$(tab.name)\"</span>)\n        style!(taba, <span class=\"hljs-string\">\"padding\"</span> => 10px, <span class=\"hljs-string\">\"font-size\"</span> => 13pt, <span class=\"hljs-string\">\"font-weight\"</span> => <span class=\"hljs-string\">\"bold\"</span>, \n        <span class=\"hljs-string\">\"color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"lightgray\"</span>, <span class=\"hljs-string\">\"cursor\"</span> => <span class=\"hljs-string\">\"pointer\"</span>, \n        <span class=\"hljs-string\">\"border-bottom\"</span> => <span class=\"hljs-string\">\"1px solid #333333\"</span>, <span class=\"hljs-string\">\"border-right\"</span> => <span class=\"hljs-string\">\"1px solid #333333\"</span>)\n        taba\n    end <span class=\"hljs-keyword\">for</span> (e, tab) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">enumerate</span>(client.<span class=\"hljs-property\">tabs</span>)])\n    childs = tabholder[:children]\n    style!(childs[<span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"border-bottom\"</span> => <span class=\"hljs-string\">\"0px\"</span>, \n    <span class=\"hljs-string\">\"border-top-left-radius\"</span> => 10px)\n    style!(childs[<span class=\"hljs-title function_\">length</span>(childs)], <span class=\"hljs-string\">\"border-top-right-radius\"</span> => 10px)\n    <span class=\"hljs-attr\">tabholder</span>::<span class=\"hljs-title class_\">Component</span>{:div}\nend\n</code></pre>\n<p>요것은 여전히 꽤 간단한데, 조금 더 잘 정리하고 싶어하지만 현재 상태에 매우 만족해요.</p>\n<h2>back-end II</h2>\n<p>우리는 독스트링과 마크다운을 위한 자동화된 문서화 시스템을 만들기 위해 노력 중이에요. 하지만 이를 위해 더 많은 백엔드를 구축할 필요가 있을 거예요. 이 일을 진행하기 위한 첫 번째 단계는 DocModule과 DocSystem 타입을 업데이트하여 필요한 모든 것을 확실히 갖추는 것이에요.</p>\n<p>중요한 것은 이 문서 빌더를 실제로 개방적으로 구현하고 싶다는 점이에요. 이 빌더가 Chifi 문서만 생성하는 것이 아니라, 모든 것이 문서 생성기에 로드되기를 원해요. 이에 대한 요구사항은 약간 복잡할 수 있어요. 나의 목표는 각 프로젝트의 데이터를 매핑하는 TOML 구성 파일이 필요하다는 것이죠.</p>\n<p>[chifi]\ncolor = \"white\"\ntxtcolor = \"#333333\"\nicon = \"\"</p>\n<p>[chifi.Chifi]\npath = \"toolips/Toolips\"\ncolor = \"\"\npages = [\"getting-started\", \"firstoverview.md\"]</p>\n<p>[parametric]\ncolor = \"#333333\"\ntxtcolor = \"white\"\nicon = \"\"</p>\n<p>[parametric.ParametricProcesses]\ncolor = \"#75B2C8\"\ntxtcolor = \"white\"</p>\n<p>[toolips]\ncolor = \"#75B2C8\"\ntxtcolor = \"white\"\nicon = \"\"</p>\n<p>[toolips.Toolips]\npath = \"toolips/Toolips\"\ncolor = \"\"\npages = [\"getting-started\", \"firstoverview.md\"]</p>\n<p>[toolips.ToolipsSession]\npath = \"toolips/ToolipsSession\"\ncolor = \"\"\npages = [\"nil\"]</p>\n<p>[gattino]\ncolor = \"#C178B5\"\ntxtcolor = \"white\"\nicon = \"\"</p>\n<p>[gattino.Gattino]\npath = \"gattino/Gattino\"\ncolor = \"\"\npages = [\"sample\", \"gattino.md\"]</p>\n<p>다음으로 데이터를 프론트엔드에 채워 넣는 몇 가지 새로운 추가 사항.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generate_menu</span>(<span class=\"hljs-params\">mods::Vector{DocSystem}</span>)\n    <span class=\"hljs-attr\">menuholder</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"mainmenu\"</span>, align = <span class=\"hljs-string\">\"center\"</span>, \n    children = [begin\n        mdiv = <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-title function_\">string</span>(menu_mod.<span class=\"hljs-property\">name</span>) * <span class=\"hljs-string\">\"eco\"</span>, text = <span class=\"hljs-string\">\"$(menu_mod.name)\"</span>)\n        style!(mdiv, <span class=\"hljs-string\">\"background-color\"</span> => menu_mod.<span class=\"hljs-property\">color</span>, \n        <span class=\"hljs-string\">\"color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"font-size\"</span> => <span class=\"hljs-string\">\"20pt\"</span>, <span class=\"hljs-string\">\"padding\"</span> => <span class=\"hljs-string\">\"14px\"</span>, <span class=\"hljs-string\">\"font-weight\"</span> => <span class=\"hljs-string\">\"bold\"</span>)\n        <span class=\"hljs-attr\">mdiv</span>::<span class=\"hljs-title class_\">Component</span>{:a}\n    end <span class=\"hljs-keyword\">for</span> menu_mod <span class=\"hljs-keyword\">in</span> mods])\n    style!(menuholder, <span class=\"hljs-string\">\"position\"</span> => <span class=\"hljs-string\">\"absolute\"</span>, <span class=\"hljs-string\">\"top\"</span> => <span class=\"hljs-string\">\"-100\"</span>, <span class=\"hljs-string\">\"left\"</span> => <span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"width\"</span> => <span class=\"hljs-string\">\"100%\"</span>, <span class=\"hljs-string\">\"height\"</span> => <span class=\"hljs-string\">\"0px\"</span>, \n    <span class=\"hljs-string\">\"transition\"</span> => <span class=\"hljs-string\">\"800ms\"</span>)\n    <span class=\"hljs-attr\">menuholder</span>::<span class=\"hljs-title class_\">Component</span>{:div}\nend\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generate_menu</span>(<span class=\"hljs-params\">dm::Vector{DocModule}</span>)\n    \nend\n\n<span class=\"hljs-keyword\">function</span> switch_tabs!(<span class=\"hljs-attr\">c</span>::<span class=\"hljs-title class_\">AbstractConnection</span>, <span class=\"hljs-attr\">cm</span>::<span class=\"hljs-title class_\">ComponentModifier</span>, <span class=\"hljs-attr\">t</span>::<span class=\"hljs-title class_\">String</span>)\n\nend\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generate_tabbar</span>(<span class=\"hljs-params\">c::AbstractConnection, client::DocClient</span>)\n    <span class=\"hljs-attr\">tabholder</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"tabs\"</span>, align = <span class=\"hljs-string\">\"left\"</span>,\n    children = [begin\n        labelname = <span class=\"hljs-title function_\">join</span>(<span class=\"hljs-title function_\">split</span>(tab.<span class=\"hljs-property\">name</span>, <span class=\"hljs-string\">\"-\"</span>)[<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">3</span>], <span class=\"hljs-string\">\" | \"</span>)\n        taba = <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">\"tab$(tab.name)\"</span>, text = <span class=\"hljs-string\">\"$labelname\"</span>)\n        style!(taba, <span class=\"hljs-string\">\"padding\"</span> => <span class=\"hljs-string\">\"10px\"</span>, <span class=\"hljs-string\">\"font-size\"</span> => <span class=\"hljs-string\">\"13pt\"</span>, <span class=\"hljs-string\">\"font-weight\"</span> => <span class=\"hljs-string\">\"bold\"</span>, \n        <span class=\"hljs-string\">\"color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"lightgray\"</span>, <span class=\"hljs-string\">\"cursor\"</span> => <span class=\"hljs-string\">\"pointer\"</span>, \n        <span class=\"hljs-string\">\"border-bottom\"</span> => <span class=\"hljs-string\">\"1px solid #333333\"</span>, <span class=\"hljs-string\">\"border-right\"</span> => <span class=\"hljs-string\">\"1px solid #333333\"</span>)\n        <span class=\"hljs-title function_\">on</span>(c, taba, <span class=\"hljs-string\">\"click\"</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-attr\">cm</span>::<span class=\"hljs-title class_\">ComponentModifier</span>\n            switch_tabs!(c, cm, tab.<span class=\"hljs-property\">name</span>)\n        end\n        taba\n    end <span class=\"hljs-keyword\">for</span> (e, tab) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">enumerate</span>(client.<span class=\"hljs-property\">tabs</span>)])\n    childs = tabholder[:children]\n    style!(tabholder, <span class=\"hljs-string\">\"width\"</span> => <span class=\"hljs-string\">\"50%\"</span>)\n    style!(childs[<span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"border-bottom\"</span> => <span class=\"hljs-string\">\"0px\"</span>, \n    <span class=\"hljs-string\">\"border-top-left-radius\"</span> => <span class=\"hljs-string\">\"10px\"</span>)\n    style!(childs[<span class=\"hljs-title function_\">length</span>(childs)], <span class=\"hljs-string\">\"border-top-right-radius\"</span> => <span class=\"hljs-string\">\"10px\"</span>)\n    <span class=\"hljs-keyword\">return</span>(tabholder, client.<span class=\"hljs-property\">tabs</span>[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">name</span>)\nend\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">build_main</span>(<span class=\"hljs-params\">c::AbstractConnection, client::DocClient</span>)\n    tabbar, docname = <span class=\"hljs-title function_\">generate_tabbar</span>(c, client)\n    <span class=\"hljs-attr\">main_container</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main-container\"</span>, children = [tabbar, <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"main_window\"</span>)])\n    style!(main_container, <span class=\"hljs-string\">\"height\"</span> => <span class=\"hljs-string\">\"80%\"</span>, <span class=\"hljs-string\">\"width\"</span> => <span class=\"hljs-string\">\"75%\"</span>, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"padding\"</span> => <span class=\"hljs-string\">\"0px\"</span>, <span class=\"hljs-string\">\"display\"</span> => <span class=\"hljs-string\">\"flex\"</span>, <span class=\"hljs-string\">\"flex-direction\"</span> => <span class=\"hljs-string\">\"column\"</span>, \n    <span class=\"hljs-string\">\"border-bottom-right-radius\"</span> => <span class=\"hljs-string\">\"5px\"</span>, <span class=\"hljs-string\">\"border-top-right-radius\"</span> => <span class=\"hljs-string\">\"5px\"</span>, <span class=\"hljs-string\">\"border\"</span> => <span class=\"hljs-string\">\"2px solid #211f1f\"</span>, <span class=\"hljs-string\">\"border-left\"</span> => <span class=\"hljs-string\">\"none\"</span>, <span class=\"hljs-string\">\"border-top\"</span> => <span class=\"hljs-string\">\"none\"</span>)\n    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-attr\">main_container</span>::<span class=\"hljs-title class_\">Component</span>{:div}, docname)\nend\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">build_leftmenu</span>(<span class=\"hljs-params\">c::AbstractConnection, mod::DocModule</span>)\n    [begin \n        pagename = page.<span class=\"hljs-property\">name</span>\n        openbutton = <span class=\"hljs-title function_\">button</span>(<span class=\"hljs-string\">\"open-$pagename\"</span>, text = <span class=\"hljs-string\">\"open\"</span>)\n        labela = <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-string\">\"label-$pagename\"</span>, text = <span class=\"hljs-title function_\">replace</span>(pagename, <span class=\"hljs-string\">\"-\"</span> => <span class=\"hljs-string\">\" \"</span>))\n        pagemenu = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"pagemenu\"</span>, text = <span class=\"hljs-string\">\"\"</span>)\n    end <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> mod.<span class=\"hljs-property\">pages</span>]\n    <span class=\"hljs-attr\">left_menu</span>::<span class=\"hljs-title class_\">Component</span>{:div} = <span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"left_menu\"</span>)\n    style!(left_menu, <span class=\"hljs-string\">\"width\"</span> => <span class=\"hljs-string\">\"20%\"</span>, <span class=\"hljs-string\">\"height\"</span> => <span class=\"hljs-string\">\"80%\"</span>, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"darkgray\"</span>, <span class=\"hljs-string\">\"border-bottom-left-radius\"</span> => <span class=\"hljs-string\">\"5px\"</span>, <span class=\"hljs-string\">\"border-top-left-radius\"</span> => <span class=\"hljs-string\">\"5px\"</span>)\n    <span class=\"hljs-attr\">left_menu</span>::<span class=\"hljs-title class_\">Component</span>{:div}\nend\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">home</span>(<span class=\"hljs-params\">c::Toolips.AbstractConnection</span>)\n    # 수신된 클라이언트 확인\n    <span class=\"hljs-attr\">client_keys</span>::<span class=\"hljs-title class_\">Dict</span>{<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>} = c[:doc].<span class=\"hljs-property\">client_keys</span>\n    <span class=\"hljs-attr\">ip</span>::<span class=\"hljs-title class_\">String</span> = <span class=\"hljs-title function_\">get_ip</span>(c)\n    <span class=\"hljs-keyword\">if</span> ~(ip <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">keys</span>(client_keys))\n        <span class=\"hljs-attr\">key</span>::<span class=\"hljs-title class_\">String</span> = <span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-title function_\">gen_ref</span>(<span class=\"hljs-number\">4</span>)\n        push!(client_keys, <span class=\"hljs-function\"><span class=\"hljs-params\">ip</span> =></span> key)\n        push!(c[:doc].<span class=\"hljs-property\">clients</span>, <span class=\"hljs-title class_\">DocClient</span>(key, [<span class=\"hljs-title function_\">div</span>(<span class=\"hljs-string\">\"chifi-welcome-Chifi\"</span>)]))\n    end\n    key = client_keys[ip]\n    <span class=\"hljs-attr\">client</span>::<span class=\"hljs-title class_\">DocClient</span> = c[:doc].<span class=\"hljs-property\">clients</span>[key]\n    # 페이지 작성\n    pages = c[:doc].<span class=\"hljs-property\">pages</span>\n    <span class=\"hljs-attr\">mainbody</span>::<span class=\"hljs-title class_\">Component</span>{:body} = <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">\"main\"</span>, align = <span class=\"hljs-string\">\"center\"</span>)\n    style!(mainbody, <span class=\"hljs-string\">\"margin-left\"</span> => <span class=\"hljs-string\">\"5%\"</span>, <span class=\"hljs-string\">\"margin-top\"</span> => <span class=\"hljs-string\">\"5%\"</span>, <span class=\"hljs-string\">\"background-color\"</span> => <span class=\"hljs-string\">\"#333333\"</span>, <span class=\"hljs-string\">\"display\"</span> => <span class=\"hljs-string\">\"flex\"</span>, \n    <span class=\"hljs-string\">\"transition\"</span> => <span class=\"hljs-string\">\"1s\"</span>)\n    <span class=\"hljs-attr\">main_container</span>::<span class=\"hljs-title class_\">Component</span>{:div}, <span class=\"hljs-attr\">mod</span>::<span class=\"hljs-title class_\">String</span> = <span class=\"hljs-title function_\">build_main</span>(c, client)\n    ecopage = <span class=\"hljs-title function_\">split</span>(mod, <span class=\"hljs-string\">\"-\"</span>)\n    @info [docmod.<span class=\"hljs-property\">name</span> <span class=\"hljs-keyword\">for</span> docmod <span class=\"hljs-keyword\">in</span> c[:doc].<span class=\"hljs-property\">docsystems</span>]\n    @info [docmod.<span class=\"hljs-property\">name</span> <span class=\"hljs-keyword\">for</span> docmod <span class=\"hljs-keyword\">in</span> c[:doc].<span class=\"hljs-property\">docsystems</span>[<span class=\"hljs-string\">\"toolips\"</span>].<span class=\"hljs-property\">modules</span>]\n    loaded_page = c[:doc].<span class=\"hljs-property\">docsystems</span>[<span class=\"hljs-title function_\">string</span>(ecopage[<span class=\"hljs-number\">1</span>])].<span class=\"hljs-property\">modules</span>[<span class=\"hljs-title function_\">string</span>(ecopage[<span class=\"hljs-number\">3</span>])]\n    left_menu = <span class=\"hljs-title function_\">build_leftmenu</span>(c, loaded_page)\n    push!(mainbody, pages[<span class=\"hljs-string\">\"mainmenu\"</span>], left_menu, main_container)\n    write!(c, mainbody)\nend\ndocloader = <span class=\"hljs-title class_\">ClientDocLoader</span>()\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">start_from_project</span>(<span class=\"hljs-params\">path::<span class=\"hljs-built_in\">String</span> = pwd(), mod::Module = Main; ip::Toolips.IP4 = <span class=\"hljs-string\">\"127.0.0.1\"</span>:<span class=\"hljs-number\">8000</span></span>)\n    docloader.<span class=\"hljs-property\">docsystems</span> = <span class=\"hljs-title function_\">read_doc_config</span>(path * <span class=\"hljs-string\">\"/config.toml\"</span>, mod)\n    start!(<span class=\"hljs-title class_\">ChifiDocs</span>, ip)\nend\n</code></pre>\n<p>@info에 대한 몇 가지 호출도 있습니다. 이는 데이터가 올바르게 로드되었는지 확인하기 위한 점검입니다. 웹 브라우저를 통해 요청을 보냅니다.</p>\n<pre><code class=\"hljs language-js\">julia> <span class=\"hljs-title function_\">include</span>(<span class=\"hljs-string\">\"dev.jl\"</span>)\n  <span class=\"hljs-string\">`~/dev/packages/chifi/ChifiDocs`</span>에서 프로젝트를 활성화 중\n[ <span class=\"hljs-title class_\">Info</span>: <span class=\"hljs-title class_\">ChifiDocs</span> [<span class=\"hljs-number\">4e841206</span>-9f20-48d9-9ddd-dfd252355962] 사전 컴파일 중\n  <span class=\"hljs-string\">`~/dev/packages/chifi/ChifiDocs/chifi`</span>에서 프로젝트를 활성화 중\n┌ <span class=\"hljs-title class_\">Warning</span>: <span class=\"hljs-title class_\">ParametricProcesses</span>에 경로가 없어 건너뛰었습니다\n└ @ <span class=\"hljs-title class_\">ChifiDocs</span> ~<span class=\"hljs-regexp\">/dev/</span>packages/chifi/<span class=\"hljs-title class_\">ChifiDocs</span>/src/<span class=\"hljs-title class_\">DocMods</span>.<span class=\"hljs-property\">jl</span>:<span class=\"hljs-number\">62</span>\n🌷 toolips> 로드된 라우터 유형: <span class=\"hljs-title class_\">Vector</span>{<span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-property\">Route</span>{<span class=\"hljs-title class_\">Toolips</span>.<span class=\"hljs-property\">AbstractConnection</span>}\n🌷 toolips> 서버가 <span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//192.168.1.10:8000 에서 수신 대기 중</span>\n      활성 매니페스트 파일: <span class=\"hljs-number\">7</span>개 발견됨\n      활성 아티팩트 파일: <span class=\"hljs-number\">2</span>개 발견됨\n      활성 스크래치 공간: <span class=\"hljs-number\">0</span>개 발견됨\n     삭제된 아티팩트, 리포지토리, 패키지 또는 스크래치 공간 없음\n[ <span class=\"hljs-title class_\">Info</span>: 수신 대기 중: <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.10</span>:<span class=\"hljs-number\">8000</span>, 스레드 <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>\n   pid              process type             name active\n  –––– ––––––––––––––––––––––––– –––––––––––––––– ––––––\n  <span class=\"hljs-number\">1736</span> <span class=\"hljs-title class_\">ParametricProcesses</span>.<span class=\"hljs-property\">Async</span> <span class=\"hljs-title class_\">ChifiDocs</span> router   <span class=\"hljs-literal\">true</span>\n\n\njulia> [ <span class=\"hljs-title class_\">Info</span>: [<span class=\"hljs-string\">\"gattino\"</span>, <span class=\"hljs-string\">\"parametric\"</span>, <span class=\"hljs-string\">\"toolips\"</span>, <span class=\"hljs-string\">\"chifi\"</span>]\n[ <span class=\"hljs-title class_\">Info</span>: [<span class=\"hljs-string\">\"ToolipsSession\"</span>, <span class=\"hljs-string\">\"Toolips\"</span>]\n</code></pre>\n<p>마지막으로 언급할 가치가 있는 것은 이 프로젝트의 설정이 실제로 어떻게 로드되는지입니다. 이 프로젝트에는 두 개의 별도 환경이 있습니다. 하나는 문서화할 모듈을 포함하고 다른 하나는 ChifiDocs 빌드에 필요한 종속성을 포함합니다. 전자는 chifi 아래에 포함되어 있습니다. 또한 이 프로젝트에는 각 생태계를 문서화하기 위한 마크다운 및 에셋이 포함되어 있습니다. 자동 빌드 문서 참조와 기타 자동으로 빌드되는 기능을 원하지만 새로운 튜토리얼 문서를 작성하고 제공할 수 있는 능력도 원합니다.</p>\n<pre><code class=\"hljs language-js\">shell> tree .\n.\n├── chifi\n│   ├── components.<span class=\"hljs-property\">jl</span>\n│   ├── config.<span class=\"hljs-property\">toml</span>\n│   ├── getting_started.<span class=\"hljs-property\">md</span>\n│   ├── <span class=\"hljs-title class_\">Manifest</span>.<span class=\"hljs-property\">toml</span>\n│   ├── modules\n│   │   ├── chifi\n│   │   ├── gattino\n│   │   │   └── <span class=\"hljs-title class_\">Gattino</span>\n│   │   │       └── <span class=\"hljs-title class_\">Gattino</span>.<span class=\"hljs-property\">md</span>\n│   │   ├── parametric\n│   │   │   └── <span class=\"hljs-title class_\">ParametricProcesses</span>\n│   │   │       └── <span class=\"hljs-title class_\">ParametricProcesses</span>.<span class=\"hljs-property\">md</span>\n│   │   └── toolips\n│   │       ├── <span class=\"hljs-title class_\">Toolips</span>\n│   │       │   └── <span class=\"hljs-title class_\">GettingStarted</span>.<span class=\"hljs-property\">md</span>\n│   │       └── <span class=\"hljs-title class_\">ToolipsSession</span>\n│   │           └── <span class=\"hljs-title class_\">ToolipsSession</span>.<span class=\"hljs-property\">md</span>\n│   ├── <span class=\"hljs-title class_\">Project</span>.<span class=\"hljs-property\">toml</span>\n│   └── public\n├── dev.<span class=\"hljs-property\">jl</span>\n├── <span class=\"hljs-title class_\">Manifest</span>.<span class=\"hljs-property\">toml</span>\n├── <span class=\"hljs-title class_\">Project</span>.<span class=\"hljs-property\">toml</span>\n└── src\n    ├── <span class=\"hljs-title class_\">ChifiDocs</span>.<span class=\"hljs-property\">jl</span>\n    └── <span class=\"hljs-title class_\">DocMods</span>.<span class=\"hljs-property\">jl</span>\n\n<span class=\"hljs-number\">13</span> directories, <span class=\"hljs-number\">14</span> files\n</code></pre>\n<p>여기가 내 dev.jl 파일이에요:</p>\n<pre><code class=\"hljs language-julia\"><span class=\"hljs-keyword\">using</span> Pkg; Pkg.activate(<span class=\"hljs-string\">\".\"</span>)\n<span class=\"hljs-keyword\">using</span> ChifiDocs\nPkg.activate(<span class=\"hljs-string\">\"chifi\"</span>)\n<span class=\"hljs-keyword\">using</span> Revise\ninclude(<span class=\"hljs-string\">\"chifi/components.jl\"</span>)\ntoolips_process = ChifiDocs.start_from_project(<span class=\"hljs-string\">\"chifi\"</span>, ChifiDocComponents, ip = <span class=\"hljs-string\">\"192.168.1.10\"</span>:<span class=\"hljs-number\">8000</span>)\n</code></pre>\n<p>그리고 마지막으로 components.jl 파일이에요. 그 파일이 존재하는 이유에 대해 설명하겠습니다.:</p>\n<pre><code class=\"hljs language-julia\"><span class=\"hljs-comment\">#== components.jl ==\n`components.jl`은 이 프로젝트에 특화된 특별한 소스 파일이에요. 이 파일은 dev.jl에서 불러와서 사용되며, 마크다운 문서 페이지에 사용자 정의 구성 요소를 작성하고, 문서 페이지에서 사용할 종속성을 로드할 수 있게 해줘요.\n`components.jl` 파일에서는 오직 구성 요소만 내보내야 하며, 이름으로 보간하여 마크다운에서 $를 사용하거나, Julia에서 'interpolate!' 또는 'interpolate_code!'를 사용해야 해요.\n`$`.\n==#</span>\n<span class=\"hljs-keyword\">module</span> ChifiDocComponents\n<span class=\"hljs-keyword\">using</span> Toolips\n<span class=\"hljs-keyword\">using</span> ToolipsSession\n<span class=\"hljs-keyword\">using</span> Gattino\n\n<span class=\"hljs-keyword\">module</span> Chifi\n\n<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>올 해 제 소프트웨어가 상당히 즐거운 수준에 이르렀어요. Toolips는 함께 작업하기 좋은 웹 개발 프레임워크입니다. Gattino는 이제 사용할 준비가 되었고 두 생태계는 새로운 생태계 추가와 함께 미래의 생태계를 보고 있어요. 그동안 저는 좋은 문서가 필요했었는데, 이제 내가 직접 만들기로 결심했어요.</p>\n<p>이 프로젝트는 어느 정도 시간이 걸리겠지만, 최대한 늦어도 6월 말에는 이 문서 브라우저를 공개할 계획이에요 — 많은 기대할 만한 릴리스들과 함께. 곧 다시 다른 생태계와 함께 일할 예정이고, 제 주요 프로젝트인 Olive에 대해 고민해보려 해요. 이미 일부 예비 작업을 시작했는데, IPyCells를 수정하고, OliveHighlighters 패키지를 만들어 하이라이터를 패키징했어요. 그러나 아직 많은 작업이 남아있지만 계속해서 진전을 이뤄가고 그 점이 고맙습니다. 제 진전을 계속 지켜보고 다양한 프로젝트에 관심을 가져주셔서 감사합니다. 올해에는 많은 것들이 더 나아져가고, 올해 말에 제가 더 많은 것들을 제공할 기회를 손에 쥐게 될 것을 기대하고 있어요. 이 프로젝트를 계속할 때 왼쪽 메뉴에 항목을 채우고 내용 영역에 마크다운을 추가할 것이에요. 읽어주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}