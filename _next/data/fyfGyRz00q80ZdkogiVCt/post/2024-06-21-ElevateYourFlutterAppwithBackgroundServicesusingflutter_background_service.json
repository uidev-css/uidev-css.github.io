{"pageProps":{"post":{"title":"flutter_background_service로 플러터 앱의 백그라운드 서비스 구현 방법","description":"","date":"2024-06-21 23:09","slug":"2024-06-21-ElevateYourFlutterAppwithBackgroundServicesusingflutter_background_service","content":"\n\n플러터 애플리케이션을 개발할 때는 데이터 가져오기, 업데이트 처리, 또는 알림 처리와 같이 백그라운드에서 작업을 수행해야 하는 시나리오를 자주 마주하게 됩니다. 백그라운드 서비스를 효과적으로 관리하는 강력한 솔루션으로는 flutter_background_service 플러그인이 있습니다. 이 글에서는 해당 기능을 활용하고 Android 및 iOS 플랫폼에서 백그라운드 서비스를 초기화하고 구성하는 세부 사항을 살펴보겠습니다.\n\n# 소개:\n\n플러터에는 백그라운드 서비스용 다양한 플러그인과 패키지가 있으며 각각의 장점이 있습니다. flutter_background_service는 간편성과 사용 편의성으로 눈에 띕니다. 플러그인을 초기화하여 시작해 봅시다:\n\n<div class=\"content-ad\"></div>\n\n```dart\nfinal service = FlutterBackgroundService();\n```\n\n코드 가독성을 높이기 위해 초기화 과정을 함수 내에 캡슐화하는 것이 좋습니다. initializeBackgroundService()라는 함수를 만들어보겠습니다:\n\n```dart\nvoid initializeBackgroundService() async {\n try {\n // 백그라운드 서비스 초기화\n await service.initialize(onDataReceived: onDataReceivedFromBackground);\n// iOS에 필요한 설정 수행\n configureIOSBackgroundService();\n// 백그라운드 서비스 시작\n service.start(onStart: () {\n print('백그라운드 서비스 시작됨');\n }, onBackgroundTask: (String data) {\n // 여기에 백그라운드 작업 코드를 작성하세요\n print('백그라운드 작업이 데이터와 함께 시작됨: $data');\n service.sendData('백그라운드 작업 완료됨');\n });\n } catch (e) {\n print('백그라운드 서비스 초기화 오류: $e');\n }\n}\n```\n\n# iOS 구성 :\n\n<div class=\"content-ad\"></div>\n\n백그라운드 서비스의 한 가지 주목할만한 측면은 플랫폼별 구성에 관한 것입니다. Android는 일반적으로 추가 권한이 필요하지 않지만, iOS는 특정 설정이 필요할 수 있습니다. iOS 구성을 위한 플레이스홀더 함수를 여기에 제공합니다:\n\n```js\nvoid configureIOSBackgroundService() {\n // iOS에 특정 구성이 필요한 경우 수행\n // (예: 권한 요청, 백그라운드 모드 설정 등)\n // 이는 추가 플러그인 또는 네이티브 코드 사용이 포함될 수 있습니다.\n}\n```\n\n# 네이티브 측면에서 서비스 호출하기:\n\n전경 및 배경에서 네이티브 측면의 서비스를 활용하기 위해 제공된 함수를 사용할 수 있습니다. 서비스를 호출하는 방법을 보여주는 코드 조각을 여기에 제공합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n// 화면용 서비스 호출\nservice.invokeForegroundService();\n// 배경용 서비스 호출\nservice.invokeBackgroundService();\n// 서비스 중지\nservice.stopService();\n```\n\n이 호출을 귀하의 특정 요구 사항에 맞게 조정해 주세요.\n\n# 백그라운드 작업: 날짜 및 시간 업데이트:\n\n이제 우리의 주요 작업인 백그라운드에서 매 10초마다 날짜 및 시간 업데이트에 대해 다루어 보겠습니다. 이를 위해 타이머를 사용하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// onStart 함수 내부에서\nTimer.periodic(const Duration(seconds: 10), (timer) async {\n  if (service is AndroidServiceInstance) {\n    service.setForegroundNotificationInfo(\n      title: \"백그라운드 앱...\",\n      content: \"${DateTime.now()} 업데이트\",\n    );\n  }\n  service.invoke(\n    'update',\n    {\n      \"current_date\": DateTime.now().toIso8601String(),\n    },\n  );\n});\n```\n\n이 코드 조각은 10초마다 작업을 트리거하는 타이머를 설정합니다. 이 작업은 DateTime을 업데이트하고 백그라운드 서비스에 알립니다. 필요에 따라 특정 사용 사례에 맞게 이 로직을 사용자 정의할 수 있습니다.\n\n# 백그라운드 서비스 활용:\n\n이제 백그라운드 서비스를 초기화했으니, 플러터 앱에서 이를 활용해보세요. 실제 구현 세부 정보로 플레이스홀더를 교체해야 합니다. 플러그인은 onDataReceived 리스너를 제공하여 백그라운드로부터 수신된 데이터를 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nservice.onDataReceived.listen((event) {\n  print('백그라운드 데이터 수신됨: $event');\n});\n```\n\n앱이 dispose될 때 백그라운드 서비스를 중지하는 것을 잊지 마세요:\n\n```js\n@override\nvoid dispose() {\n  service.stop();\n  super.dispose();\n}\n```\n\n# 마무리:\n\n<div class=\"content-ad\"></div>\n\nflutter_background_service을 사용하면 Flutter에서 백그라운드 작업을 처리하는 것이 매끄럽게 이루어집니다. onStart 함수를 이해하고 DartPluginRegistrant를 초기화하며 네이티브 측에서 서비스를 호출함으로써 Flutter 앱의 기능을 향상시킬 수 있습니다. 특히, 타이머 기반 작업을 탐구한 것은 백그라운드 서비스에 동적인 요소를 추가하여 앱이 백그라운드에 있을 때도 주기적인 업데이트를 가능케 합니다.\n\nflutter_background_service와 백그라운드 서비스의 힘을 받아 Flutter 앱의 성능과 사용자 경험을 향상시켜 보세요.\n\n코딩 즐기세요!","ogImage":{"url":"/assets/img/2024-06-21-ElevateYourFlutterAppwithBackgroundServicesusingflutter_background_service_0.png"},"coverImage":"/assets/img/2024-06-21-ElevateYourFlutterAppwithBackgroundServicesusingflutter_background_service_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>플러터 애플리케이션을 개발할 때는 데이터 가져오기, 업데이트 처리, 또는 알림 처리와 같이 백그라운드에서 작업을 수행해야 하는 시나리오를 자주 마주하게 됩니다. 백그라운드 서비스를 효과적으로 관리하는 강력한 솔루션으로는 flutter_background_service 플러그인이 있습니다. 이 글에서는 해당 기능을 활용하고 Android 및 iOS 플랫폼에서 백그라운드 서비스를 초기화하고 구성하는 세부 사항을 살펴보겠습니다.</p>\n<h1>소개:</h1>\n<p>플러터에는 백그라운드 서비스용 다양한 플러그인과 패키지가 있으며 각각의 장점이 있습니다. flutter_background_service는 간편성과 사용 편의성으로 눈에 띕니다. 플러그인을 초기화하여 시작해 봅시다:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">final</span> service = FlutterBackgroundService();\n</code></pre>\n<p>코드 가독성을 높이기 위해 초기화 과정을 함수 내에 캡슐화하는 것이 좋습니다. initializeBackgroundService()라는 함수를 만들어보겠습니다:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">void</span> initializeBackgroundService() <span class=\"hljs-keyword\">async</span> {\n <span class=\"hljs-keyword\">try</span> {\n <span class=\"hljs-comment\">// 백그라운드 서비스 초기화</span>\n <span class=\"hljs-keyword\">await</span> service.initialize(onDataReceived: onDataReceivedFromBackground);\n<span class=\"hljs-comment\">// iOS에 필요한 설정 수행</span>\n configureIOSBackgroundService();\n<span class=\"hljs-comment\">// 백그라운드 서비스 시작</span>\n service.start(onStart: () {\n <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'백그라운드 서비스 시작됨'</span>);\n }, onBackgroundTask: (<span class=\"hljs-built_in\">String</span> data) {\n <span class=\"hljs-comment\">// 여기에 백그라운드 작업 코드를 작성하세요</span>\n <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'백그라운드 작업이 데이터와 함께 시작됨: <span class=\"hljs-subst\">$data</span>'</span>);\n service.sendData(<span class=\"hljs-string\">'백그라운드 작업 완료됨'</span>);\n });\n } <span class=\"hljs-keyword\">catch</span> (e) {\n <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'백그라운드 서비스 초기화 오류: <span class=\"hljs-subst\">$e</span>'</span>);\n }\n}\n</code></pre>\n<h1>iOS 구성 :</h1>\n<p>백그라운드 서비스의 한 가지 주목할만한 측면은 플랫폼별 구성에 관한 것입니다. Android는 일반적으로 추가 권한이 필요하지 않지만, iOS는 특정 설정이 필요할 수 있습니다. iOS 구성을 위한 플레이스홀더 함수를 여기에 제공합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configureIOSBackgroundService</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-comment\">// iOS에 특정 구성이 필요한 경우 수행</span>\n <span class=\"hljs-comment\">// (예: 권한 요청, 백그라운드 모드 설정 등)</span>\n <span class=\"hljs-comment\">// 이는 추가 플러그인 또는 네이티브 코드 사용이 포함될 수 있습니다.</span>\n}\n</code></pre>\n<h1>네이티브 측면에서 서비스 호출하기:</h1>\n<p>전경 및 배경에서 네이티브 측면의 서비스를 활용하기 위해 제공된 함수를 사용할 수 있습니다. 서비스를 호출하는 방법을 보여주는 코드 조각을 여기에 제공합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 화면용 서비스 호출</span>\nservice.<span class=\"hljs-title function_\">invokeForegroundService</span>();\n<span class=\"hljs-comment\">// 배경용 서비스 호출</span>\nservice.<span class=\"hljs-title function_\">invokeBackgroundService</span>();\n<span class=\"hljs-comment\">// 서비스 중지</span>\nservice.<span class=\"hljs-title function_\">stopService</span>();\n</code></pre>\n<p>이 호출을 귀하의 특정 요구 사항에 맞게 조정해 주세요.</p>\n<h1>백그라운드 작업: 날짜 및 시간 업데이트:</h1>\n<p>이제 우리의 주요 작업인 백그라운드에서 매 10초마다 날짜 및 시간 업데이트에 대해 다루어 보겠습니다. 이를 위해 타이머를 사용하겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// onStart 함수 내부에서</span>\n<span class=\"hljs-title class_\">Timer</span>.<span class=\"hljs-title function_\">periodic</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">seconds</span>: <span class=\"hljs-number\">10</span>), (timer) <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-keyword\">if</span> (service is <span class=\"hljs-title class_\">AndroidServiceInstance</span>) {\n    service.<span class=\"hljs-title function_\">setForegroundNotificationInfo</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"백그라운드 앱...\"</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">\"${DateTime.now()} 업데이트\"</span>,\n    );\n  }\n  service.<span class=\"hljs-title function_\">invoke</span>(\n    <span class=\"hljs-string\">'update'</span>,\n    {\n      <span class=\"hljs-string\">\"current_date\"</span>: <span class=\"hljs-title class_\">DateTime</span>.<span class=\"hljs-title function_\">now</span>().<span class=\"hljs-title function_\">toIso8601String</span>(),\n    },\n  );\n});\n</code></pre>\n<p>이 코드 조각은 10초마다 작업을 트리거하는 타이머를 설정합니다. 이 작업은 DateTime을 업데이트하고 백그라운드 서비스에 알립니다. 필요에 따라 특정 사용 사례에 맞게 이 로직을 사용자 정의할 수 있습니다.</p>\n<h1>백그라운드 서비스 활용:</h1>\n<p>이제 백그라운드 서비스를 초기화했으니, 플러터 앱에서 이를 활용해보세요. 실제 구현 세부 정보로 플레이스홀더를 교체해야 합니다. 플러그인은 onDataReceived 리스너를 제공하여 백그라운드로부터 수신된 데이터를 처리할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">service.<span class=\"hljs-property\">onDataReceived</span>.<span class=\"hljs-title function_\">listen</span>((event) {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'백그라운드 데이터 수신됨: $event'</span>);\n});\n</code></pre>\n<p>앱이 dispose될 때 백그라운드 서비스를 중지하는 것을 잊지 마세요:</p>\n<pre><code class=\"hljs language-js\">@override\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-params\"></span>) {\n  service.<span class=\"hljs-title function_\">stop</span>();\n  <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">dispose</span>();\n}\n</code></pre>\n<h1>마무리:</h1>\n<p>flutter_background_service을 사용하면 Flutter에서 백그라운드 작업을 처리하는 것이 매끄럽게 이루어집니다. onStart 함수를 이해하고 DartPluginRegistrant를 초기화하며 네이티브 측에서 서비스를 호출함으로써 Flutter 앱의 기능을 향상시킬 수 있습니다. 특히, 타이머 기반 작업을 탐구한 것은 백그라운드 서비스에 동적인 요소를 추가하여 앱이 백그라운드에 있을 때도 주기적인 업데이트를 가능케 합니다.</p>\n<p>flutter_background_service와 백그라운드 서비스의 힘을 받아 Flutter 앱의 성능과 사용자 경험을 향상시켜 보세요.</p>\n<p>코딩 즐기세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}