{"pageProps":{"post":{"title":"Flutter에서 GoRouter의 ShellRoute로 중첩 네비게이션 구현 방법","description":"","date":"2024-06-21 20:39","slug":"2024-06-21-UsingGoRoutersShellRouteinFlutterforNestedNavigation","content":"\n\n안녕하세요 개발자 여러분!\n\n최근 go_router와 그 새로운 기능인 ShellRoute를 사용하여 영속하는 하단 내비게이션 바를 갖춘 중첩된 내비게이션 기능을 개발했는데, 예상대로 잘 작동합니다.\n\n여러분, 제가 보스같이 해내는 걸 한번 보여드릴게요. (Valorant의 Pheonix 대사입니다.)\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*qQvZYaN08kuIFrN6dQEskg.gif\" />\n\n<div class=\"content-ad\"></div>\n\n# 1. 소개:\n\n## GoRouter\n\ngo_router은 Flutter 앱 개발을 위한 패키지로, 앱 내에서 네비게이션을 처리하는 강력하고 유연한 방법을 제공합니다. 이 패키지는 라우터 시스템을 제공하여 앱 내에서 라우트를 정의하고 특정 위젯에 매핑할 수 있습니다. 그 중요한 기능 중 하나는 ShellRoute인데, 이는 앱 내에서 다양한 화면 또는 탭 간에 전환할 수 있는 지속적인 하단 네비게이션 바를 제공합니다.\n\n## ShellRoute\n\n<div class=\"content-ad\"></div>\n\ngo_router의 ShellRoute 기능을 사용하면 부모 경로를 만들어 하단 네비게이션 바를 추가할 수 있어요. 그리고 각 탭이나 스크린으로 표시되는 다양한 하위 경로를 표시할 수 있습니다. 이 기능은 go_router v7.0.0에서 소개되었어요. 이를 통해 여러 화면을 왔다갔다 할 필요 없이 앱의 다른 섹션이나 기능 사이를 쉽게 이동할 수 있습니다. ShellRoute는 또한 각 화면의 상태를 유지하면서 다른 탭이나 스크린 간에 쉽게 전환할 수 있게 해줍니다.\n\n전반적으로 go_router 패키지와 ShellRoute 기능은 Flutter 앱에서 네비게이션을 처리하는 강력하고 유연한 방법을 제공해주며, 앱의 다른 섹션이나 기능 사이를 전환하는 사용자 친화적이고 직관적인 방법을 제공합니다.\n\n## 지속적인 하단 네비게이션 바의 중요성\n\n잘 디자인된 지속적인 하단 네비게이션 바는 사용자 경험을 크게 향상시키고 앱을 더 사용자 친화적으로 만들 수 있어요. 사용자가 앱의 다양한 섹션과 기능을 쉽게 탐색할 수 있도록 도와주어 참여도와 유지율을 향상시킬 수 있습니다. 게다가 지속적인 하단 네비게이션 바는 앱에 더 깔끔하고 전문적인 느낌을 줄 수 있어서 전반적인 브랜드 이미지를 개선할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n요약하면, Flutter 앱에서 지속적인 하단 탐색 바는 쉬운 네비게이션을 제공하고 사용자 경험을 향상시키는 중요한 디자인 요소입니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:800/1*n6GetP4BlzpIwFIHJezhng.gif)\n\n# 2. 준비물:\n\n- PC에 최신 Flutter SDK가 설치되어 있는지 확인하세요\n- 다음 명령어를 실행하여 새 Flutter 프로젝트를 생성하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n플러터 create go_router_demo\n```\n\n3. 프로젝트에 go_router를 추가하려면 다음 명령을 실행하세요:\n\n```js\nflutter pub add go_router\n```\n\n# 3. 하단 네비게이션 바 스캐폴드:\n\n<div class=\"content-ad\"></div>\n\n부모 화면을 만들어서 하단 네비게이션 바를 유지할 거에요. 이 화면은 자식 위젯을 인자로 받을 거에요. 이 자식 위젯을 이용해서 앱의 자식 경로를 표시하고, 하단 네비게이션 바를 모든 자식 경로에 계속 유지할 거에요.\n\n```js\n  int currentIndex = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: widget.child,\n      bottomNavigationBar: BottomNavigationBar(\n        onTap: changeTab,\n        backgroundColor: const Color(0xffe0b9f6),\n        currentIndex: currentIndex,\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),\n          BottomNavigationBarItem(icon: Icon(Icons.chat), label: 'Chat'),\n        ],\n      ),\n    );\n  }\n```\n\nchangeTab 함수는 홈 및 채팅 탭 간에 이동하는 것을 다룰 거에요.\n\n```js\nvoid changeTab(int index) {\n    switch(index){\n      case 0:  \n        context.go('/');\n        break;\n      case 1:  \n        context.go('/chat');\n        break;\n      default:\n        context.go('/');\n        break;\n    }\n    setState(() {\n      currentIndex = index;\n    });\n  }\n```\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:492/1*OsfeWqkayJSX0KYe-74j3Q.gif)\n\n# 4. 라우터 설정하기:\n\n여기서 모든 마법이 일어납니다.\n\n이 가이드를 위해 4개의 페이지를 만들었습니다:\n\n\n<div class=\"content-ad\"></div>\n\n- 홈\n- 채팅\n- 설정\n- 서비스 약관\n\n이러한 페이지에 중첩된 내비게이션을 가지려면 각 수준의 중첩에 대해 별도의 내비게이션 키가 필요합니다. 우리의 경우, 2개의 내비게이터 키를 생성할 것입니다:\n\n```js\nfinal _rootNavigatorKey = GlobalKey<NavigatorState>();\nfinal _shellNavigatorKey = GlobalKey<NavigatorState>();\n```\n\n_rootNavigatorKey는 부모 내비게이션 스택에 사용되고, _shellNavigatorKey는 ShellRoute와 함께 중첩된 내비게이션에 사용될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n_rootNavigatorKey은 지속적인 BottomNavigationBar를 갖지 말아야 하는 모든 루트에 도움이 될 것이고, _shellNavigatorKey는 BottomNavigationBar가 있는 모든 루트에 사용될 것입니다.\n\n그럼, 이 우리의 원귀적인 목적을 위해 다음과 같은 루트들을 생성해보도록 하겠습니다:\n\n```js\nfinal router = GoRouter(\n  navigatorKey: _rootNavigatorKey,\n  routes: [\n    ShellRoute(\n      navigatorKey: _shellNavigatorKey,\n      builder: (context, state, child) =>\n          BottomNavigationBarScaffold(child: child),\n      routes: [\n        GoRoute(\n          path: '/',\n          parentNavigatorKey: _shellNavigatorKey,\n          builder: (context, state) => const HomePage(),\n        ),\n        GoRoute(\n          path: '/chat',\n          parentNavigatorKey: _shellNavigatorKey,\n          builder: (context, state) => const ChatPage(),\n        ),\n        GoRoute(\n          path: '/settings',\n          parentNavigatorKey: _shellNavigatorKey,\n          builder: (context, state) => const SettingsPage(),\n          routes: [\n            GoRoute(\n              path: 'terms-of-services',\n              parentNavigatorKey: _rootNavigatorKey,\n              builder: (context, state) => const TermsOfServicesPage(),\n            ),\n          ],\n        ),\n      ],\n    )\n  ],\n);\n```\n\n저는 다음과 같은 계층구조로 페이지들을 생성했습니다:\n\n<div class=\"content-ad\"></div>\n\n\n-> 하단 내비게이션 바 스캐폴드\n   -> 홈\n   -> 채팅\n   -> 설정\n      -> 서비스 약관\n\n\n서비스 약관을 제외한 모든 경로는 _shellNavigatorKey를 부모 네비게이터 키로 사용합니다. 이는 서비스 약관 페이지를 제외한 모든 경로가 하단 내비게이션 바 스캐폴드 내에서 탐색되도록 하고, 서비스 약관 페이지는 하단 내비게이션 바 없이 부모 네비게이션 스택에서 완전히 새로운 페이지로 열립니다.\n\n# 5. 경로 간 탐색:\n\n모두 완료되었습니다. 프로젝트에 중첩 네비게이션을 성공적으로 구현했습니다. 우후!! \n\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:480/1*-lKavvf7-diWZdV-9TCDcg.gif)\n\n이제 할 일은 go_router에서 제공하는 context.go() 메소드를 사용하여 화면 간을 이동하기만 하면 됩니다. 방금 설정한 라우터가 모든 작업을 대신 처리해 줄 거에요. 멋지죠?!\n\n참고:\n\n\n<div class=\"content-ad\"></div>\n\n# 결론:\n\n요약하면, go_router 패키지와 ShellRoute 기능은 플러터 앱에서 지속적인 하단 네비게이션 바를 구현하는 강력한 솔루션을 제공합니다. 위에 설명된 단계를 따라서 앱의 네비게이션 경험을 향상시키고 전체 사용자 인터페이스를 개선할 수 있습니다. 즐거운 코딩 하세요!\n\n참고: 이 문서에서 제공된 코드 조각들은 예시를 위한 것이며, 특정 앱 구조와 디자인에 맞게 사용자 정의가 필요할 수 있습니다.\n\n참고: 제는 정기적으로 댓글을 확인하며, 궁금한 점이 있거나 해결하기 어려운 문제에 대한 가이드를 작성해 달라면 아래 댓글을 남겨주시면 반드시 도와드리겠습니다!\n\n<div class=\"content-ad\"></div>\n\n![Image](https://miro.medium.com/v2/resize:fit:500/1*FX70ARrhtMfCV40g0ttlAQ.gif)\n\n다음 글에서 뵙겠습니다, 마아살라마!","ogImage":{"url":"/assets/img/2024-06-21-UsingGoRoutersShellRouteinFlutterforNestedNavigation_0.png"},"coverImage":"/assets/img/2024-06-21-UsingGoRoutersShellRouteinFlutterforNestedNavigation_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 개발자 여러분!</p>\n<p>최근 go_router와 그 새로운 기능인 ShellRoute를 사용하여 영속하는 하단 내비게이션 바를 갖춘 중첩된 내비게이션 기능을 개발했는데, 예상대로 잘 작동합니다.</p>\n<p>여러분, 제가 보스같이 해내는 걸 한번 보여드릴게요. (Valorant의 Pheonix 대사입니다.)</p>\n<h1>1. 소개:</h1>\n<h2>GoRouter</h2>\n<p>go_router은 Flutter 앱 개발을 위한 패키지로, 앱 내에서 네비게이션을 처리하는 강력하고 유연한 방법을 제공합니다. 이 패키지는 라우터 시스템을 제공하여 앱 내에서 라우트를 정의하고 특정 위젯에 매핑할 수 있습니다. 그 중요한 기능 중 하나는 ShellRoute인데, 이는 앱 내에서 다양한 화면 또는 탭 간에 전환할 수 있는 지속적인 하단 네비게이션 바를 제공합니다.</p>\n<h2>ShellRoute</h2>\n<p>go_router의 ShellRoute 기능을 사용하면 부모 경로를 만들어 하단 네비게이션 바를 추가할 수 있어요. 그리고 각 탭이나 스크린으로 표시되는 다양한 하위 경로를 표시할 수 있습니다. 이 기능은 go_router v7.0.0에서 소개되었어요. 이를 통해 여러 화면을 왔다갔다 할 필요 없이 앱의 다른 섹션이나 기능 사이를 쉽게 이동할 수 있습니다. ShellRoute는 또한 각 화면의 상태를 유지하면서 다른 탭이나 스크린 간에 쉽게 전환할 수 있게 해줍니다.</p>\n<p>전반적으로 go_router 패키지와 ShellRoute 기능은 Flutter 앱에서 네비게이션을 처리하는 강력하고 유연한 방법을 제공해주며, 앱의 다른 섹션이나 기능 사이를 전환하는 사용자 친화적이고 직관적인 방법을 제공합니다.</p>\n<h2>지속적인 하단 네비게이션 바의 중요성</h2>\n<p>잘 디자인된 지속적인 하단 네비게이션 바는 사용자 경험을 크게 향상시키고 앱을 더 사용자 친화적으로 만들 수 있어요. 사용자가 앱의 다양한 섹션과 기능을 쉽게 탐색할 수 있도록 도와주어 참여도와 유지율을 향상시킬 수 있습니다. 게다가 지속적인 하단 네비게이션 바는 앱에 더 깔끔하고 전문적인 느낌을 줄 수 있어서 전반적인 브랜드 이미지를 개선할 수 있습니다.</p>\n<p>요약하면, Flutter 앱에서 지속적인 하단 탐색 바는 쉬운 네비게이션을 제공하고 사용자 경험을 향상시키는 중요한 디자인 요소입니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:800/1*n6GetP4BlzpIwFIHJezhng.gif\" alt=\"이미지\"></p>\n<h1>2. 준비물:</h1>\n<ul>\n<li>PC에 최신 Flutter SDK가 설치되어 있는지 확인하세요</li>\n<li>다음 명령어를 실행하여 새 Flutter 프로젝트를 생성하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">플러터 create go_router_demo\n</code></pre>\n<ol start=\"3\">\n<li>프로젝트에 go_router를 추가하려면 다음 명령을 실행하세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\">flutter pub add go_router\n</code></pre>\n<h1>3. 하단 네비게이션 바 스캐폴드:</h1>\n<p>부모 화면을 만들어서 하단 네비게이션 바를 유지할 거에요. 이 화면은 자식 위젯을 인자로 받을 거에요. 이 자식 위젯을 이용해서 앱의 자식 경로를 표시하고, 하단 네비게이션 바를 모든 자식 경로에 계속 유지할 거에요.</p>\n<pre><code class=\"hljs language-js\">  int currentIndex = <span class=\"hljs-number\">0</span>;\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">body</span>: widget.<span class=\"hljs-property\">child</span>,\n      <span class=\"hljs-attr\">bottomNavigationBar</span>: <span class=\"hljs-title class_\">BottomNavigationBar</span>(\n        <span class=\"hljs-attr\">onTap</span>: changeTab,\n        <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xffe0b9f6</span>),\n        <span class=\"hljs-attr\">currentIndex</span>: currentIndex,\n        <span class=\"hljs-attr\">items</span>: <span class=\"hljs-keyword\">const</span> [\n          <span class=\"hljs-title class_\">BottomNavigationBarItem</span>(<span class=\"hljs-attr\">icon</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">home</span>), <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Home'</span>),\n          <span class=\"hljs-title class_\">BottomNavigationBarItem</span>(<span class=\"hljs-attr\">icon</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">chat</span>), <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Chat'</span>),\n        ],\n      ),\n    );\n  }\n</code></pre>\n<p>changeTab 함수는 홈 및 채팅 탭 간에 이동하는 것을 다룰 거에요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">changeTab</span>(<span class=\"hljs-params\">int index</span>) {\n    <span class=\"hljs-keyword\">switch</span>(index){\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:  \n        context.<span class=\"hljs-title function_\">go</span>(<span class=\"hljs-string\">'/'</span>);\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:  \n        context.<span class=\"hljs-title function_\">go</span>(<span class=\"hljs-string\">'/chat'</span>);\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-attr\">default</span>:\n        context.<span class=\"hljs-title function_\">go</span>(<span class=\"hljs-string\">'/'</span>);\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-title function_\">setState</span>(() {\n      currentIndex = index;\n    });\n  }\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:492/1*OsfeWqkayJSX0KYe-74j3Q.gif\" alt=\"image\"></p>\n<h1>4. 라우터 설정하기:</h1>\n<p>여기서 모든 마법이 일어납니다.</p>\n<p>이 가이드를 위해 4개의 페이지를 만들었습니다:</p>\n<ul>\n<li>홈</li>\n<li>채팅</li>\n<li>설정</li>\n<li>서비스 약관</li>\n</ul>\n<p>이러한 페이지에 중첩된 내비게이션을 가지려면 각 수준의 중첩에 대해 별도의 내비게이션 키가 필요합니다. 우리의 경우, 2개의 내비게이터 키를 생성할 것입니다:</p>\n<pre><code class=\"hljs language-js\">final _rootNavigatorKey = <span class=\"hljs-title class_\">GlobalKey</span>&#x3C;<span class=\"hljs-title class_\">NavigatorState</span>>();\nfinal _shellNavigatorKey = <span class=\"hljs-title class_\">GlobalKey</span>&#x3C;<span class=\"hljs-title class_\">NavigatorState</span>>();\n</code></pre>\n<p>_rootNavigatorKey는 부모 내비게이션 스택에 사용되고, _shellNavigatorKey는 ShellRoute와 함께 중첩된 내비게이션에 사용될 것입니다.</p>\n<p>_rootNavigatorKey은 지속적인 BottomNavigationBar를 갖지 말아야 하는 모든 루트에 도움이 될 것이고, _shellNavigatorKey는 BottomNavigationBar가 있는 모든 루트에 사용될 것입니다.</p>\n<p>그럼, 이 우리의 원귀적인 목적을 위해 다음과 같은 루트들을 생성해보도록 하겠습니다:</p>\n<pre><code class=\"hljs language-js\">final router = <span class=\"hljs-title class_\">GoRouter</span>(\n  <span class=\"hljs-attr\">navigatorKey</span>: _rootNavigatorKey,\n  <span class=\"hljs-attr\">routes</span>: [\n    <span class=\"hljs-title class_\">ShellRoute</span>(\n      <span class=\"hljs-attr\">navigatorKey</span>: _shellNavigatorKey,\n      <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context, state, child</span>) =></span>\n          <span class=\"hljs-title class_\">BottomNavigationBarScaffold</span>(<span class=\"hljs-attr\">child</span>: child),\n      <span class=\"hljs-attr\">routes</span>: [\n        <span class=\"hljs-title class_\">GoRoute</span>(\n          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/'</span>,\n          <span class=\"hljs-attr\">parentNavigatorKey</span>: _shellNavigatorKey,\n          <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context, state</span>) =></span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HomePage</span>(),\n        ),\n        <span class=\"hljs-title class_\">GoRoute</span>(\n          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/chat'</span>,\n          <span class=\"hljs-attr\">parentNavigatorKey</span>: _shellNavigatorKey,\n          <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context, state</span>) =></span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ChatPage</span>(),\n        ),\n        <span class=\"hljs-title class_\">GoRoute</span>(\n          <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/settings'</span>,\n          <span class=\"hljs-attr\">parentNavigatorKey</span>: _shellNavigatorKey,\n          <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context, state</span>) =></span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SettingsPage</span>(),\n          <span class=\"hljs-attr\">routes</span>: [\n            <span class=\"hljs-title class_\">GoRoute</span>(\n              <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'terms-of-services'</span>,\n              <span class=\"hljs-attr\">parentNavigatorKey</span>: _rootNavigatorKey,\n              <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context, state</span>) =></span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TermsOfServicesPage</span>(),\n            ),\n          ],\n        ),\n      ],\n    )\n  ],\n);\n</code></pre>\n<p>저는 다음과 같은 계층구조로 페이지들을 생성했습니다:</p>\n<p>-> 하단 내비게이션 바 스캐폴드\n-> 홈\n-> 채팅\n-> 설정\n-> 서비스 약관</p>\n<p>서비스 약관을 제외한 모든 경로는 _shellNavigatorKey를 부모 네비게이터 키로 사용합니다. 이는 서비스 약관 페이지를 제외한 모든 경로가 하단 내비게이션 바 스캐폴드 내에서 탐색되도록 하고, 서비스 약관 페이지는 하단 내비게이션 바 없이 부모 네비게이션 스택에서 완전히 새로운 페이지로 열립니다.</p>\n<h1>5. 경로 간 탐색:</h1>\n<p>모두 완료되었습니다. 프로젝트에 중첩 네비게이션을 성공적으로 구현했습니다. 우후!!</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:480/1*-lKavvf7-diWZdV-9TCDcg.gif\" alt=\"image\"></p>\n<p>이제 할 일은 go_router에서 제공하는 context.go() 메소드를 사용하여 화면 간을 이동하기만 하면 됩니다. 방금 설정한 라우터가 모든 작업을 대신 처리해 줄 거에요. 멋지죠?!</p>\n<p>참고:</p>\n<h1>결론:</h1>\n<p>요약하면, go_router 패키지와 ShellRoute 기능은 플러터 앱에서 지속적인 하단 네비게이션 바를 구현하는 강력한 솔루션을 제공합니다. 위에 설명된 단계를 따라서 앱의 네비게이션 경험을 향상시키고 전체 사용자 인터페이스를 개선할 수 있습니다. 즐거운 코딩 하세요!</p>\n<p>참고: 이 문서에서 제공된 코드 조각들은 예시를 위한 것이며, 특정 앱 구조와 디자인에 맞게 사용자 정의가 필요할 수 있습니다.</p>\n<p>참고: 제는 정기적으로 댓글을 확인하며, 궁금한 점이 있거나 해결하기 어려운 문제에 대한 가이드를 작성해 달라면 아래 댓글을 남겨주시면 반드시 도와드리겠습니다!</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:500/1*FX70ARrhtMfCV40g0ttlAQ.gif\" alt=\"Image\"></p>\n<p>다음 글에서 뵙겠습니다, 마아살라마!</p>\n</body>\n</html>\n"},"__N_SSG":true}