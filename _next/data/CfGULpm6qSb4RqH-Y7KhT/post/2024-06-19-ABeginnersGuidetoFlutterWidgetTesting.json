{"pageProps":{"post":{"title":"플러터 위젯 테스팅 초보자 가이드","description":"","date":"2024-06-19 08:15","slug":"2024-06-19-ABeginnersGuidetoFlutterWidgetTesting","content":"\n\n플러터를 사용해오신 분이라면, 앱이 완벽하고 원활한 사용자 경험을 제공하는 것이 얼마나 중요한지 알고 계실 것입니다. 위젯 테스팅은 이를 달성하는 데 가장 좋은 방법 중 하나입니다. 이 블로그 포스트에서는 플러터 위젯 테스팅의 기본 사항을 다루고 유용한 예제를 제공하여 여러분을 도와드리겠습니다.\n\n![이미지](/assets/img/2024-06-19-ABeginnersGuidetoFlutterWidgetTesting_0.png)\n\n# 위젯 테스팅이란?\n\n사용자 인터페이스(UI) 구성 요소가 의도한 대로 작동하는지 확인하는 테스팅 방법입니다. 이는 통합 테스팅과 단위 테스팅 사이에 위치하여 사용자 인터페이스와 상호 작용하는 방식을 확인할 수 있도록 합니다. 이를 통해 UI가 다양한 시나리오에서 올바르게 작동하고 오류를 조기에 발견하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 위젯 테스트하는 이유\n\n- 버그 조기 발견: 제품 출시 전에 문제를 식별할 수 있습니다.\n- 자신 있게 리팩터링: 코드베이스를 수정할 때 이미 존재하는 기능에 영향을 미칠 걱정 없이 변경할 수 있습니다.\n- UI 테스트 자동화: 시간이 오래 걸리는 UI 검사를 자동화하여 시간을 절약할 수 있습니다.\n\n# 플러터 프로젝트의 테스트 예제\n\n위젯 테스트에 들어가기 전에, 플러터 프로젝트가 준비되었는지 확인해봅시다.\n\n<div class=\"content-ad\"></div>\n\n의존성 확인: pubspec.yaml 파일을 열어 다음 의존성이 있는지 확인하십시오:\n\n```yaml\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n```\n\n# 첫 번째 위젯 테스트 작성\n\n위젯에 대한 기본 테스트를 작성해 봅시다. 사용자가 할 일 목록 앱(TodoApp)을 가정하고 사용자가 목록에 작업을 추가할 수 있는 앱이라고 합시다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 1: 위젯 생성하기\n\n먼저 테스트용 데모 위젯을 생성해보세요. 이 경우에는 TodoApp 위젯입니다.\n\n```js\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const TodoApp());\n}\n\nclass TodoApp extends StatelessWidget {\n  const TodoApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: TodoScreen(),\n    );\n  }\n}\n\nclass TodoScreen extends StatefulWidget {\n  const TodoScreen({super.key});\n\n  @override\n  TodoScreenState createState() => TodoScreenState();\n}\n\nclass TodoScreenState extends State<TodoScreen> {\n  final List<String> _todos = [];\n  final TextEditingController _controller = TextEditingController();\n\n  void _addTodo() {\n    setState(() {\n      _todos.add(_controller.text);\n      _controller.clear();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Todo App')),\n      body: Column(\n        children: <Widget>[\n          Padding(\n            padding: const EdgeInsets.all(8.0),\n            child: TextField(\n              controller: _controller,\n              decoration: const InputDecoration(\n                labelText: 'Enter a task',\n              ),\n            ),\n          ),\n          ElevatedButton(\n            onPressed: _addTodo,\n            child: const Text('Add Task'),\n          ),\n          Expanded(\n            child: ListView.builder(\n              itemCount: _todos.length,\n              itemBuilder: (context, index) {\n                return ListTile(\n                  title: Text(_todos[index]),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n# 단계 2: 샘플 테스트 작성하기\n\n<div class=\"content-ad\"></div>\n\n다음의 테스트 코드를 추가하여 test 디렉토리에 todo_test.dart 파일을 생성해주세요:\n\n```dart\n// 파일 구조에 맞게 import 수정해주세요.\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:widget_testing/main.dart';\n\nvoid main() {\n  testWidgets('할 일 목록 테스트', (WidgetTester tester) async {\n    // 데모 앱을 빌드하고 프레임을 트리거합니다.\n    await tester.pumpWidget(const TodoApp());\n\n    // 앱이 빈 목록으로 시작하는지 확인합니다.\n    expect(find.byType(ListTile), findsNothing);\n\n    // 텍스트 필드에 할 일을 입력합니다.\n    await tester.enterText(find.byType(TextField), '우유 사기');\n    await tester.tap(find.text('할 일 추가'));\n    await tester.pump();\n\n    // 할 일이 추가되었는지 확인합니다.\n    expect(find.text('우유 사기'), findsOneWidget);\n    expect(find.byType(ListTile), findsOneWidget);\n  });\n}\n```\n\n# 단계 3: 테스트 실행\n\n다음 명령어로 테스트를 실행해주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nflutter test\n```\n\n위 명령어를 실행하면 테스트가 성공했음을 나타내는 출력이 표시됩니다.\n\n# 테스트 코드 이해\n\n테스트 코드를 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n- 위젯 빌드: await tester.pumpWidget(TodoApp());을 사용하여 TodoApp 위젯을 빌드하고 프레임을 트리거합니다.\n- 초기 상태 확인: expect(find.byType(ListTile), findsNothing);을 사용하여 목록이 처음에 비어 있는지 확인합니다.\n- 사용자 상호작용 시뮬레이션: await tester.enterText(find.byType(TextField), `Learn Flutter`);을 사용하여 텍스트 필드에 텍스트를 입력하는 것을 시뮬레이션합니다. await tester.tap(find.text(`Add Task`));을 사용하여 `Add Task` 버튼을 탭하는 것을 시뮬레이션합니다.\n- 위젯 다시 빌드: await tester.pump();을 사용하여 업데이트된 상태로 위젯을 다시 빌드하는 또 다른 프레임을 트리거합니다.\n- 최종 상태 확인: 작업이 목록에 추가되었는지 확인합니다.\n\n# 고급 위젯 테스트\n\n# 비동기 작업 테스트\n\n위젯에 비동기 작업(예: 네트워크 요청)이 포함되어 있는 경우 pumpAndSettle을 사용하여 모든 애니메이션 및 예약된 프레임이 완료될 때까지 기다릴 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nawait tester.pumpAndSettle();\n```\n\n# 위젯 찾기\n\n다양한 방법을 사용하여 위젯을 찾을 수 있습니다:\n\n- find.byType(Type): 타입으로 위젯 찾기.\n- find.byKey(ValueKey): Key로 위젯 찾기.\n- find.text(String): 특정 텍스트를 포함한 위젯 찾기.\n\n<div class=\"content-ad\"></div>\n\n# 모의 의존성\n\n외부 종속성에 의존하는 위젯의 동작을 흉내 내기 위해 모의 객체를 사용하세요. 모의 객체를 생성하기 위해 mockito와 같은 패키지를 활용할 수 있습니다.\n\n# 결론\n\nFlutter 테스트 도구상 가장 유용한 도구 중 하나는 위젯 테스트입니다. 사용자 인터페이스(UI)가 의도한 대로 작동하는지 확인하고, 오류를 초기에 발견하며, 위젯 테스트를 작성하여 자신감을 가지고 코드를 리팩터링할 수 있습니다. 먼저 사용자 인터페이스(UI)의 필수 구성 요소에 대한 테스트를 작성한 후, 더 복잡한 상호 작용으로 넘어가세요.\n\n<div class=\"content-ad\"></div>\n\n화이팅해서 테스트를 진행해보세요🧪! 문제가 있으시면 댓글란에 자유롭게 질문해주시고, 이 게시물이 마음에 드시면 👏좋아요를 눌러주시고 더 많은 훌륭한 컨텐츠를 받아보세요!","ogImage":{"url":"/assets/img/2024-06-19-ABeginnersGuidetoFlutterWidgetTesting_0.png"},"coverImage":"/assets/img/2024-06-19-ABeginnersGuidetoFlutterWidgetTesting_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>플러터를 사용해오신 분이라면, 앱이 완벽하고 원활한 사용자 경험을 제공하는 것이 얼마나 중요한지 알고 계실 것입니다. 위젯 테스팅은 이를 달성하는 데 가장 좋은 방법 중 하나입니다. 이 블로그 포스트에서는 플러터 위젯 테스팅의 기본 사항을 다루고 유용한 예제를 제공하여 여러분을 도와드리겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-19-ABeginnersGuidetoFlutterWidgetTesting_0.png\" alt=\"이미지\"></p>\n<h1>위젯 테스팅이란?</h1>\n<p>사용자 인터페이스(UI) 구성 요소가 의도한 대로 작동하는지 확인하는 테스팅 방법입니다. 이는 통합 테스팅과 단위 테스팅 사이에 위치하여 사용자 인터페이스와 상호 작용하는 방식을 확인할 수 있도록 합니다. 이를 통해 UI가 다양한 시나리오에서 올바르게 작동하고 오류를 조기에 발견하는 데 도움이 됩니다.</p>\n<h1>위젯 테스트하는 이유</h1>\n<ul>\n<li>버그 조기 발견: 제품 출시 전에 문제를 식별할 수 있습니다.</li>\n<li>자신 있게 리팩터링: 코드베이스를 수정할 때 이미 존재하는 기능에 영향을 미칠 걱정 없이 변경할 수 있습니다.</li>\n<li>UI 테스트 자동화: 시간이 오래 걸리는 UI 검사를 자동화하여 시간을 절약할 수 있습니다.</li>\n</ul>\n<h1>플러터 프로젝트의 테스트 예제</h1>\n<p>위젯 테스트에 들어가기 전에, 플러터 프로젝트가 준비되었는지 확인해봅시다.</p>\n<p>의존성 확인: pubspec.yaml 파일을 열어 다음 의존성이 있는지 확인하십시오:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dev_dependencies:</span>\n  <span class=\"hljs-attr\">flutter_test:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n</code></pre>\n<h1>첫 번째 위젯 테스트 작성</h1>\n<p>위젯에 대한 기본 테스트를 작성해 봅시다. 사용자가 할 일 목록 앱(TodoApp)을 가정하고 사용자가 목록에 작업을 추가할 수 있는 앱이라고 합시다.</p>\n<h1>단계 1: 위젯 생성하기</h1>\n<p>먼저 테스트용 데모 위젯을 생성해보세요. 이 경우에는 TodoApp 위젯입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TodoApp</span>());\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TodoApp</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>});\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MaterialApp</span>(\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">TodoScreen</span>(),\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TodoScreen</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>});\n\n  @override\n  <span class=\"hljs-title class_\">TodoScreenState</span> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title class_\">TodoScreenState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TodoScreenState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">TodoScreen</span>> {\n  final <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">String</span>> _todos = [];\n  final <span class=\"hljs-title class_\">TextEditingController</span> _controller = <span class=\"hljs-title class_\">TextEditingController</span>();\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_addTodo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">setState</span>(() {\n      _todos.<span class=\"hljs-title function_\">add</span>(_controller.<span class=\"hljs-property\">text</span>);\n      _controller.<span class=\"hljs-title function_\">clear</span>();\n    });\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Todo App'</span>)),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Column</span>(\n        <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n          <span class=\"hljs-title class_\">Padding</span>(\n            <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-number\">8.0</span>),\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">TextField</span>(\n              <span class=\"hljs-attr\">controller</span>: _controller,\n              <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">InputDecoration</span>(\n                <span class=\"hljs-attr\">labelText</span>: <span class=\"hljs-string\">'Enter a task'</span>,\n              ),\n            ),\n          ),\n          <span class=\"hljs-title class_\">ElevatedButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: _addTodo,\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Add Task'</span>),\n          ),\n          <span class=\"hljs-title class_\">Expanded</span>(\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">ListView</span>.<span class=\"hljs-title function_\">builder</span>(\n              <span class=\"hljs-attr\">itemCount</span>: _todos.<span class=\"hljs-property\">length</span>,\n              <span class=\"hljs-attr\">itemBuilder</span>: (context, index) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ListTile</span>(\n                  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(_todos[index]),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>\n<h1>단계 2: 샘플 테스트 작성하기</h1>\n<p>다음의 테스트 코드를 추가하여 test 디렉토리에 todo_test.dart 파일을 생성해주세요:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-comment\">// 파일 구조에 맞게 import 수정해주세요.</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter_test/flutter_test.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:widget_testing/main.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> main() {\n  testWidgets(<span class=\"hljs-string\">'할 일 목록 테스트'</span>, (WidgetTester tester) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-comment\">// 데모 앱을 빌드하고 프레임을 트리거합니다.</span>\n    <span class=\"hljs-keyword\">await</span> tester.pumpWidget(<span class=\"hljs-keyword\">const</span> TodoApp());\n\n    <span class=\"hljs-comment\">// 앱이 빈 목록으로 시작하는지 확인합니다.</span>\n    expect(find.byType(ListTile), findsNothing);\n\n    <span class=\"hljs-comment\">// 텍스트 필드에 할 일을 입력합니다.</span>\n    <span class=\"hljs-keyword\">await</span> tester.enterText(find.byType(TextField), <span class=\"hljs-string\">'우유 사기'</span>);\n    <span class=\"hljs-keyword\">await</span> tester.tap(find.text(<span class=\"hljs-string\">'할 일 추가'</span>));\n    <span class=\"hljs-keyword\">await</span> tester.pump();\n\n    <span class=\"hljs-comment\">// 할 일이 추가되었는지 확인합니다.</span>\n    expect(find.text(<span class=\"hljs-string\">'우유 사기'</span>), findsOneWidget);\n    expect(find.byType(ListTile), findsOneWidget);\n  });\n}\n</code></pre>\n<h1>단계 3: 테스트 실행</h1>\n<p>다음 명령어로 테스트를 실행해주세요:</p>\n<pre><code class=\"hljs language-js\">flutter test\n</code></pre>\n<p>위 명령어를 실행하면 테스트가 성공했음을 나타내는 출력이 표시됩니다.</p>\n<h1>테스트 코드 이해</h1>\n<p>테스트 코드를 살펴보겠습니다:</p>\n<ul>\n<li>위젯 빌드: await tester.pumpWidget(TodoApp());을 사용하여 TodoApp 위젯을 빌드하고 프레임을 트리거합니다.</li>\n<li>초기 상태 확인: expect(find.byType(ListTile), findsNothing);을 사용하여 목록이 처음에 비어 있는지 확인합니다.</li>\n<li>사용자 상호작용 시뮬레이션: await tester.enterText(find.byType(TextField), <code>Learn Flutter</code>);을 사용하여 텍스트 필드에 텍스트를 입력하는 것을 시뮬레이션합니다. await tester.tap(find.text(<code>Add Task</code>));을 사용하여 <code>Add Task</code> 버튼을 탭하는 것을 시뮬레이션합니다.</li>\n<li>위젯 다시 빌드: await tester.pump();을 사용하여 업데이트된 상태로 위젯을 다시 빌드하는 또 다른 프레임을 트리거합니다.</li>\n<li>최종 상태 확인: 작업이 목록에 추가되었는지 확인합니다.</li>\n</ul>\n<h1>고급 위젯 테스트</h1>\n<h1>비동기 작업 테스트</h1>\n<p>위젯에 비동기 작업(예: 네트워크 요청)이 포함되어 있는 경우 pumpAndSettle을 사용하여 모든 애니메이션 및 예약된 프레임이 완료될 때까지 기다릴 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">await</span> tester.<span class=\"hljs-title function_\">pumpAndSettle</span>();\n</code></pre>\n<h1>위젯 찾기</h1>\n<p>다양한 방법을 사용하여 위젯을 찾을 수 있습니다:</p>\n<ul>\n<li>find.byType(Type): 타입으로 위젯 찾기.</li>\n<li>find.byKey(ValueKey): Key로 위젯 찾기.</li>\n<li>find.text(String): 특정 텍스트를 포함한 위젯 찾기.</li>\n</ul>\n<h1>모의 의존성</h1>\n<p>외부 종속성에 의존하는 위젯의 동작을 흉내 내기 위해 모의 객체를 사용하세요. 모의 객체를 생성하기 위해 mockito와 같은 패키지를 활용할 수 있습니다.</p>\n<h1>결론</h1>\n<p>Flutter 테스트 도구상 가장 유용한 도구 중 하나는 위젯 테스트입니다. 사용자 인터페이스(UI)가 의도한 대로 작동하는지 확인하고, 오류를 초기에 발견하며, 위젯 테스트를 작성하여 자신감을 가지고 코드를 리팩터링할 수 있습니다. 먼저 사용자 인터페이스(UI)의 필수 구성 요소에 대한 테스트를 작성한 후, 더 복잡한 상호 작용으로 넘어가세요.</p>\n<p>화이팅해서 테스트를 진행해보세요🧪! 문제가 있으시면 댓글란에 자유롭게 질문해주시고, 이 게시물이 마음에 드시면 👏좋아요를 눌러주시고 더 많은 훌륭한 컨텐츠를 받아보세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}