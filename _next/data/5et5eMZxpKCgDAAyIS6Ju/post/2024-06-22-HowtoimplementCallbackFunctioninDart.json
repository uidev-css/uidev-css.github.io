{"pageProps":{"post":{"title":"Dart에서 콜백 함수 구현하는 방법","description":"","date":"2024-06-22 15:39","slug":"2024-06-22-HowtoimplementCallbackFunctioninDart","content":"\n\n<img src=\"/assets/img/2024-06-22-HowtoimplementCallbackFunctioninDart_0.png\" />\n\n다트를 사용하여 Callback을 사용할 수 있습니다.\n\nCallback은 다른 함수나 메서드에 인수로 전달된 함수입니다. 이를 통해 수신 함수가 콜백 함수를 실행할 수 있습니다.\n\n콜백에 대해 설명하려면 이 예시를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n**단계 1:** success와 인수로 다른 함수를 갖는 request 함수를 생성합니다. success 함수는 인수를 전달 받지 않습니다. success 함수는 request 함수 내에서 실행됩니다.\n\n```js\nrequest(Function success){\n  success();\n}\n```\n\n**단계 2:** 호출되었을 때 \"success\"를 출력하는 또 다른 함수를 생성합니다.\n\n```js\nprintMessage(){\n  print('Success'); //Success\n}\n```\n\n<div class=\"content-ad\"></div>\n\nStep 3: 이 코드 조각에서는 우리의 코드를 실행할 Function Main을 생성할 것입니다.\n\n```js\nvoid main() {\n   \n}\n```\n\n만약 Function request를 호출한다면 함수에 인수로 전달해야 합니다. 하지만 이 함수를 이름으로 호출할 때는 괄호( )를 사용할 필요가 없습니다.\n\n```js\nvoid main() {\n  request(printMessage); \n}\n```\n\n<div class=\"content-ad\"></div>\n\n여기 완성된 코드입니다:\n\n js\nvoid main() {\n  request(printMessage); \n}\n\nrequest(Function() success){\n    success();\n}\n    \nprintMessage(){\n   print('Success'); //Success \n}\n\n\nCallback을 사용하는 다른 옵션은 익명 함수를 사용하는 것입니다.\n\n이 스니펫에서는 익명 함수를 인수로 사용하여 함수 요청에 전달합니다. 함수 요청을 호출할 때 함수의 구조를 직접 작성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid main(){\n  request((){\n    print('Success'); // Success \n }); \n}\n```\n\nCallback를 사용하는 또 다른 방법을 설명해 드리겠습니다.\n\n단계 1: 인수로 다른 함수를 가지는 request 함수를 변경할 것입니다. 이 함수는 success라는 이름의 함수를 인수로 사용하며 String 타입을 반환하고 String 타입의 인수를 받습니다.\n\n단계 2: success 함수에 인수를 추가하기 위해 request 함수에서 success 함수로 이동하여 인수를 전달할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n  request( String Function(String text) success){\n      print(success ('Hello world'));\n}\n```\n\nStep 3: \"request\" 함수를 호출할 때 함수의 구조를 인수로 전달하고 받을 인수에 동작을 할당합니다.\n\n코드를 실행하면 \"Hello World Success\"가 출력됩니다.\n\n```js\nvoid main(){\n  request((text){\n     return '$text Success'; \n }); \n} // Hello World Success\n```\n\n<div class=\"content-ad\"></div>\n\n여기 완전한 코드입니다:\n\n```js\nvoid main(){\n \n request((text){ \n    return '$text 성공';\n   }); \n  } //Hello World 성공\n     \n request(String Function(String text) success){\n    print(success('Hello World'));\n}\n```\n\n이 글이 유용했기를 바랍니다. 귀하의 프로그램 코딩에 활용하실 수 있기를 기대합니다.\n\n<img src=\"/assets/img/2024-06-22-HowtoimplementCallbackFunctioninDart_1.png\" />","ogImage":{"url":"/assets/img/2024-06-22-HowtoimplementCallbackFunctioninDart_0.png"},"coverImage":"/assets/img/2024-06-22-HowtoimplementCallbackFunctioninDart_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-22-HowtoimplementCallbackFunctioninDart_0.png\">\n<p>다트를 사용하여 Callback을 사용할 수 있습니다.</p>\n<p>Callback은 다른 함수나 메서드에 인수로 전달된 함수입니다. 이를 통해 수신 함수가 콜백 함수를 실행할 수 있습니다.</p>\n<p>콜백에 대해 설명하려면 이 예시를 사용할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<p><strong>단계 1:</strong> success와 인수로 다른 함수를 갖는 request 함수를 생성합니다. success 함수는 인수를 전달 받지 않습니다. success 함수는 request 함수 내에서 실행됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">request</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">Function</span> success</span>){\n  <span class=\"hljs-title function_\">success</span>();\n}\n</code></pre>\n<p><strong>단계 2:</strong> 호출되었을 때 \"success\"를 출력하는 또 다른 함수를 생성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">printMessage</span>(<span class=\"hljs-params\"></span>){\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Success'</span>); <span class=\"hljs-comment\">//Success</span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Step 3: 이 코드 조각에서는 우리의 코드를 실행할 Function Main을 생성할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n   \n}\n</code></pre>\n<p>만약 Function request를 호출한다면 함수에 인수로 전달해야 합니다. 하지만 이 함수를 이름으로 호출할 때는 괄호( )를 사용할 필요가 없습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">request</span>(printMessage); \n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>여기 완성된 코드입니다:</p>\n<p>js\nvoid main() {\nrequest(printMessage);\n}</p>\n<p>request(Function() success){\nsuccess();\n}</p>\n<p>printMessage(){\nprint('Success'); //Success\n}</p>\n<p>Callback을 사용하는 다른 옵션은 익명 함수를 사용하는 것입니다.</p>\n<p>이 스니펫에서는 익명 함수를 인수로 사용하여 함수 요청에 전달합니다. 함수 요청을 호출할 때 함수의 구조를 직접 작성할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>){\n  <span class=\"hljs-title function_\">request</span>((){\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Success'</span>); <span class=\"hljs-comment\">// Success </span>\n }); \n}\n</code></pre>\n<p>Callback를 사용하는 또 다른 방법을 설명해 드리겠습니다.</p>\n<p>단계 1: 인수로 다른 함수를 가지는 request 함수를 변경할 것입니다. 이 함수는 success라는 이름의 함수를 인수로 사용하며 String 타입을 반환하고 String 타입의 인수를 받습니다.</p>\n<p>단계 2: success 함수에 인수를 추가하기 위해 request 함수에서 success 함수로 이동하여 인수를 전달할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title function_\">request</span>(<span class=\"hljs-params\"> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-built_in\">String</span> text) success</span>){\n      <span class=\"hljs-title function_\">print</span>(success (<span class=\"hljs-string\">'Hello world'</span>));\n}\n</code></pre>\n<p>Step 3: \"request\" 함수를 호출할 때 함수의 구조를 인수로 전달하고 받을 인수에 동작을 할당합니다.</p>\n<p>코드를 실행하면 \"Hello World Success\"가 출력됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>){\n  <span class=\"hljs-title function_\">request</span>((text){\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'$text Success'</span>; \n }); \n} <span class=\"hljs-comment\">// Hello World Success</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>여기 완전한 코드입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>){\n \n <span class=\"hljs-title function_\">request</span>((text){ \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'$text 성공'</span>;\n   }); \n  } <span class=\"hljs-comment\">//Hello World 성공</span>\n     \n <span class=\"hljs-title function_\">request</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-built_in\">String</span> text) success</span>){\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-string\">'Hello World'</span>));\n}\n</code></pre>\n<p>이 글이 유용했기를 바랍니다. 귀하의 프로그램 코딩에 활용하실 수 있기를 기대합니다.</p>\n<img src=\"/assets/img/2024-06-22-HowtoimplementCallbackFunctioninDart_1.png\">\n</body>\n</html>\n"},"__N_SSG":true}