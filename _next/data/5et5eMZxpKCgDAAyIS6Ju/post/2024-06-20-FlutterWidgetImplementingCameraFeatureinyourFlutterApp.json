{"pageProps":{"post":{"title":"플러터 위젯 플러터 앱에 카메라 기능 구현하기","description":"","date":"2024-06-20 13:43","slug":"2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp","content":"\n안녕하세요 여러분, 어떻게 지내세요? 잠깐 사라졌다가 다시 돌아왔습니다. 지금은 플러터 애플리케이션에 카메라를 구현하는 방법에 대해 설명해 드릴게요.\n\n저는 이 기능을 앱에 추가할 필요가 별로 없었지만, 최근에 작업 중인 애플리케이션에 이 기능을 추가해야 했어요. 여러분도 구현하고 싶어 했던 부분이라면 함께 고고씽해요:\n\n단계 1: pub.dev 사이트에서 \"camera\"라는 플러터 패키지를 import해 주세요.\n\n귀하의 애플리케이션에 카메라 패키지를 종속성으로 추가해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n링크: https://pub.dev/packages/camera\n\n![이미지](/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_0.png)\n\n단계 2: 다른 OS(android 및 ios) 설정:\n\n지금, 이 패키지를 앱에 구현하는 동안, 각 OS에 대한 플러터 앱 코드베이스를 변경해야 합니다.\n\n<div class=\"content-ad\"></div>\n\niOS 구현:\n\nios/Runner/Info.plist에 두 개의 행을 추가하세요:\n\n- Privacy - Camera Usage Description 키와 사용 설명이 있는 한 줄을 추가해주세요.\n- 그리고 Privacy - Microphone Usage Description 키와 사용 설명이 있는 한 줄을 더 추가해주세요.\n\n만약 Info.plist를 텍스트로 편집하는 경우, 다음을 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n<key>NSCameraUsageDescription</key>\n<string>여기에 사용 설명 입력</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>여기에 사용 설명 입력</string>\n```\n\nAndroid 구현:\n\nandroid/app/build.gradle 파일에서 최소 Android SDK 버전을 21로 변경하세요.\n\n```js\nminSdkVersion 21\n```\n\n<div class=\"content-ad\"></div>\n\nStep 3: 퍼미션 핸들러 패키지와 패스 프로바이더 패키지 설치하기\n\n이 패키지를 설치하는 이유는 사용자에게 우리 애플리케이션에서 장치의 카메라를 사용할 수 있도록 허용하도록 허락을 받으려고 하는 것입니다. 허가가 허용되지 않으면 장치에서 카메라를 사용할 수 없을 것 같습니다. 사진을 찍은 후에는 이미지가 장치에 어디에 저장되었는지 액세스할 수 있어야 하므로 path_provider를 사용합니다.\n\n퍼미션 핸들러 링크: https://pub.dev/packages/permission_handler\n\n![image](/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_1.png)\n\n<div class=\"content-ad\"></div>\n\n경로 제공 링크: [여기](https://pub.dev/packages/path_provider)\n\n![이미지](/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_2.png)\n\n단계 4: 카메라 초기화 및 권한 요청\n\n다음으로 할 일은 앱에서 카메라를 초기화하고 그 과정에서 기기에 있는 카메라 목록을 가져올 수 있습니다. 아래 코드는 권한이 부여되었고 카메라가 초기화된 주요 파일인 main.dart 파일이 어떻게 보이는지 예시입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nlate List<CameraDescription> _cameras;\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  _cameras = await availableCameras();\n\n  runApp(const MyApp());\n  // runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    requestStoragePermission();\n  }\n\n  void requestStoragePermission() async {\n    // Check if the platform is not web, as web has no permissions\n    if (!kIsWeb) {\n      // Request storage permission\n      var status = await Permission.storage.status;\n      if (!status.isGranted) {\n        await Permission.storage.request();\n      }\n\n      // Request camera permission\n      var cameraStatus = await Permission.camera.status;\n      if (!cameraStatus.isGranted) {\n        await Permission.camera.request();\n      }\n    }\n  }\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      debugShowCheckedModeBanner: false,\n      routerConfig: router,\n    );\n  }\n}\n```\n\n제 5 단계 : 카메라 기능 구현\n\n카메라 컨트롤러 초기화\n\n\\_CameraAppState 클래스에서 initState 메서드에서 카메라 컨트롤러를 초기화합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nlate CameraController controller;\n```\n\n여기서, 카메라를 초기화하고 해상도 프리셋을 ResolutionPreset.max로 설정했습니다.\n\n카메라 초기화 처리\n\n카메라를 초기화하고 이 과정 중에 발생할 수 있는 모든 오류를 처리하기 위해 controller.initialize()를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncontroller.initialize().then((_) {\n  if (!mounted) {\n    return;\n  }\n  setState(() {});\n}).catchError((Object e) {\n  if (e is CameraException) {\n    switch (e.code) {\n      case 'CameraAccessDenied':\n        // 여기에서 액세스 오류를 처리합니다.\n        break;\n      default:\n        // 다른 오류를 처리합니다.\n        break;\n    }\n  }\n});\n```\n\nUI 구축하기\n\nUI는 카메라 피드를 표시하는 CameraPreview 위젯과 이미지를 캡처하는 FloatingActionButton으로 구성됩니다. 그래서 FloatingActionButton을 클릭하면 카메라에 의해 표시된 이미지를 캡처할 수 있습니다.\n\n```js\nreturn SafeArea(\n  child: Scaffold(\n    appBar: AppBar(\n      // 앱 바 설정\n    ),\n    body: Stack(\n      children: <Widget>[\n        CameraPreview(controller),\n        Align(\n          alignment: Alignment.bottomCenter,\n          child: Padding(\n            padding: const EdgeInsets.only(bottom: 16.0),\n            child: FloatingActionButton(\n              onPressed: () {\n                _takePicture(); // 사진 촬영 메서드 호출\n              },\n              child: Icon(Icons.camera),\n              backgroundColor: Colors.white,\n              foregroundColor: AppColors.deepBlue,\n            ),\n          ),\n        ),\n      ],\n    ),\n  ),\n);\n```\n\n<div class=\"content-ad\"></div>\n\n이미지 캡처 및 보기\n\n여기에 플로팅 액션 버튼에 연결한 함수를 구현했습니다. 이 함수는 이미지를 캡처하는 유일한 목적으로 사용됩니다:\n\n```js\nvoid _takePicture() async {\n  try {\n    final XFile picture = await controller.takePicture();\n    setState(() {\n      imageFile = picture;\n    });\n    // 이미지를 캡처한 후 이미지 뷰 페이지로 이동\n    Navigator.push(\n      context,\n      MaterialPageRoute(\n        builder: (context) => ImageViewPage(imagePath: imageFile!.path),\n      ),\n    );\n  } catch (e) {\n    print(\"사진 찍기 오류 발생: $e\");\n  }\n}\n```\n\n캡처한 이미지 파일 경로를 가져와 다음 페이지에서 캡처한 이미지를 볼 수 있도록 탐색을 포함했습니다.\n\n<div class=\"content-ad\"></div>\n\n이미지 보기\n\n이제 사진을 찍은 후에는 찍은 이미지를 보고 싶을 것입니다, 맞죠? 찍은 이미지를 볼 수 있는 페이지로 이동하는 것을 허용하는 페이지가 여기 있습니다:\n\n```js\nclass ImageViewPage extends StatefulWidget {\n  final String imagePath;\n  const ImageViewPage({super.key, required this.imagePath});\n\n  @override\n  State<ImageViewPage> createState() => _ImageViewPageState();\n}\n\nclass _ImageViewPageState extends State<ImageViewPage> {\n  bool isLoading = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Captured Image'),\n      ),\n      body: Center(\n        child: Image.file(File(widget.imagePath)),\n      ),\n    );\n  }\n}\n```\n\n마무리\n\n<div class=\"content-ad\"></div>\n\n이 가이드에서는 카메라 패키지를 사용하여 Flutter 응용 프로그램에서 간단한 카메라 기능을 구현했습니다. 카메라를 초기화하고 초기화 오류를 처리하며, 캡처 및 이미지 보기를 위한 사용자 친화적인 UI를 제공했습니다. 이는 Flutter 앱에서 이미지 필터, 비디오 녹화 등 더 고급 카메라 기능을 구축하기 위한 기본 단계입니다. 코딩을 즐기세요!\n\n아래는 사진을 찍고 그 작업을 실행하는 페이지의 전체 코드 구현입니다:\n\n```js\nclass CameraApp extends StatefulWidget {\n  final List<CameraDescription> cameras;\n  const CameraApp({super.key, required this.cameras});\n\n  @override\n  State<CameraApp> createState() => _CameraAppState();\n}\n\nclass _CameraAppState extends State<CameraApp> {\n  late CameraController controller;\n  late XFile? imageFile;  // 캡처된 이미지 파일을 저장하는 변수\n\n  @override\n  void initState() {\n    super.initState();\n    controller = CameraController(widget.cameras[1], ResolutionPreset.max);\n    controller.initialize().then((_) {\n      if (!mounted) {\n        return;\n      }\n      setState(() {});\n    }).catchError((Object e) {\n      if (e is CameraException) {\n        switch (e.code) {\n          case 'CameraAccessDenied':\n            // 여기서 액세스 오류 처리\n            break;\n          default:\n            // 다른 오류 처리\n            break;\n        }\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (!controller.value.isInitialized) {\n      return Container();\n    }\n    return SafeArea(\n      child: Scaffold(\n        appBar: AppBar(\n          backgroundColor: AppColors.deepBlue,\n          leading: BackButton(\n            color: Colors.white,\n            onPressed: () {\n              Navigator.pop(context);\n            },\n          ),\n          centerTitle: true,\n          title: Text(\n            '사진 찍기',\n            style: TextStyle(color: Colors.white),\n          ),\n        ),\n        body: Stack(\n          children: <Widget>[\n            CameraPreview(controller),\n            Align(\n              alignment: Alignment.bottomCenter,\n              child: Padding(\n                padding: const EdgeInsets.only(bottom: 16.0),\n                child: FloatingActionButton(\n                  onPressed: () {\n                    _takePicture();  // 사진 찍는 메서드 호출\n                  },\n                  child: Icon(Icons.camera),\n                  backgroundColor: Colors.white,\n                  foregroundColor: AppColors.deepBlue,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  // 사진 찍는 메서드\n  void _takePicture() async {\n    try {\n      final XFile picture = await controller.takePicture();\n      setState(() {\n        imageFile = picture;\n      });\n      // 이미지 캡처 후 이미지 뷰 페이지로 이동\n      Navigator.push(\n        context,\n        MaterialPageRoute(\n          builder: (context) => ImageViewPage(imagePath: imageFile!.path),\n        ),\n      );\n    } catch (e) {\n      print(\"사진 찍기 오류: $e\");\n    }\n  }\n}\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:592/1*oqIKI2wzNfzOj1IJ-EDmoQ.gif\" />\n\n<div class=\"content-ad\"></div>\n\n텍스트를 위해 감사합니다 👏 재미있게 읽으셨다면 한 번 클릭해 주시고, 계속해서 많은 글 읽어주세요. 함께 해서 즐거웠습니다 😊✌️\n","ogImage":{"url":"/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_0.png"},"coverImage":"/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 여러분, 어떻게 지내세요? 잠깐 사라졌다가 다시 돌아왔습니다. 지금은 플러터 애플리케이션에 카메라를 구현하는 방법에 대해 설명해 드릴게요.</p>\n<p>저는 이 기능을 앱에 추가할 필요가 별로 없었지만, 최근에 작업 중인 애플리케이션에 이 기능을 추가해야 했어요. 여러분도 구현하고 싶어 했던 부분이라면 함께 고고씽해요:</p>\n<p>단계 1: pub.dev 사이트에서 \"camera\"라는 플러터 패키지를 import해 주세요.</p>\n<p>귀하의 애플리케이션에 카메라 패키지를 종속성으로 추가해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>링크: <a href=\"https://pub.dev/packages/camera\" rel=\"nofollow\" target=\"_blank\">https://pub.dev/packages/camera</a></p>\n<p><img src=\"/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_0.png\" alt=\"이미지\"></p>\n<p>단계 2: 다른 OS(android 및 ios) 설정:</p>\n<p>지금, 이 패키지를 앱에 구현하는 동안, 각 OS에 대한 플러터 앱 코드베이스를 변경해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>iOS 구현:</p>\n<p>ios/Runner/Info.plist에 두 개의 행을 추가하세요:</p>\n<ul>\n<li>Privacy - Camera Usage Description 키와 사용 설명이 있는 한 줄을 추가해주세요.</li>\n<li>그리고 Privacy - Microphone Usage Description 키와 사용 설명이 있는 한 줄을 더 추가해주세요.</li>\n</ul>\n<p>만약 Info.plist를 텍스트로 편집하는 경우, 다음을 추가하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;key><span class=\"hljs-title class_\">NSCameraUsageDescription</span>&#x3C;/key>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">string</span>></span>여기에 사용 설명 입력<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">string</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">key</span>></span>NSMicrophoneUsageDescription<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">key</span>></span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">string</span>></span>여기에 사용 설명 입력<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">string</span>></span></span>\n</code></pre>\n<p>Android 구현:</p>\n<p>android/app/build.gradle 파일에서 최소 Android SDK 버전을 21로 변경하세요.</p>\n<pre><code class=\"hljs language-js\">minSdkVersion <span class=\"hljs-number\">21</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Step 3: 퍼미션 핸들러 패키지와 패스 프로바이더 패키지 설치하기</p>\n<p>이 패키지를 설치하는 이유는 사용자에게 우리 애플리케이션에서 장치의 카메라를 사용할 수 있도록 허용하도록 허락을 받으려고 하는 것입니다. 허가가 허용되지 않으면 장치에서 카메라를 사용할 수 없을 것 같습니다. 사진을 찍은 후에는 이미지가 장치에 어디에 저장되었는지 액세스할 수 있어야 하므로 path_provider를 사용합니다.</p>\n<p>퍼미션 핸들러 링크: <a href=\"https://pub.dev/packages/permission_handler\" rel=\"nofollow\" target=\"_blank\">https://pub.dev/packages/permission_handler</a></p>\n<p><img src=\"/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_1.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>경로 제공 링크: <a href=\"https://pub.dev/packages/path_provider\" rel=\"nofollow\" target=\"_blank\">여기</a></p>\n<p><img src=\"/assets/img/2024-06-20-FlutterWidgetImplementingCameraFeatureinyourFlutterApp_2.png\" alt=\"이미지\"></p>\n<p>단계 4: 카메라 초기화 및 권한 요청</p>\n<p>다음으로 할 일은 앱에서 카메라를 초기화하고 그 과정에서 기기에 있는 카메라 목록을 가져올 수 있습니다. 아래 코드는 권한이 부여되었고 카메라가 초기화된 주요 파일인 main.dart 파일이 어떻게 보이는지 예시입니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">late <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">CameraDescription</span>> _cameras;\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\n\n  _cameras = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">availableCameras</span>();\n\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>());\n  <span class=\"hljs-comment\">// runApp(const MyApp());</span>\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>});\n\n  @override\n  <span class=\"hljs-title class_\">State</span>&#x3C;<span class=\"hljs-title class_\">MyApp</span>> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_MyAppState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyApp</span>> {\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n    <span class=\"hljs-title function_\">requestStoragePermission</span>();\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">requestStoragePermission</span>() <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-comment\">// Check if the platform is not web, as web has no permissions</span>\n    <span class=\"hljs-keyword\">if</span> (!kIsWeb) {\n      <span class=\"hljs-comment\">// Request storage permission</span>\n      <span class=\"hljs-keyword\">var</span> status = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Permission</span>.<span class=\"hljs-property\">storage</span>.<span class=\"hljs-property\">status</span>;\n      <span class=\"hljs-keyword\">if</span> (!status.<span class=\"hljs-property\">isGranted</span>) {\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Permission</span>.<span class=\"hljs-property\">storage</span>.<span class=\"hljs-title function_\">request</span>();\n      }\n\n      <span class=\"hljs-comment\">// Request camera permission</span>\n      <span class=\"hljs-keyword\">var</span> cameraStatus = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Permission</span>.<span class=\"hljs-property\">camera</span>.<span class=\"hljs-property\">status</span>;\n      <span class=\"hljs-keyword\">if</span> (!cameraStatus.<span class=\"hljs-property\">isGranted</span>) {\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Permission</span>.<span class=\"hljs-property\">camera</span>.<span class=\"hljs-title function_\">request</span>();\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">// This widget is the root of your application.</span>\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>.<span class=\"hljs-title function_\">router</span>(\n      <span class=\"hljs-attr\">debugShowCheckedModeBanner</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">routerConfig</span>: router,\n    );\n  }\n}\n</code></pre>\n<p>제 5 단계 : 카메라 기능 구현</p>\n<p>카메라 컨트롤러 초기화</p>\n<p>_CameraAppState 클래스에서 initState 메서드에서 카메라 컨트롤러를 초기화합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">late <span class=\"hljs-title class_\">CameraController</span> controller;\n</code></pre>\n<p>여기서, 카메라를 초기화하고 해상도 프리셋을 ResolutionPreset.max로 설정했습니다.</p>\n<p>카메라 초기화 처리</p>\n<p>카메라를 초기화하고 이 과정 중에 발생할 수 있는 모든 오류를 처리하기 위해 controller.initialize()를 사용합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">controller.<span class=\"hljs-title function_\">initialize</span>().<span class=\"hljs-title function_\">then</span>((_) {\n  <span class=\"hljs-keyword\">if</span> (!mounted) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-title function_\">setState</span>(() {});\n}).<span class=\"hljs-title function_\">catchError</span>((<span class=\"hljs-title class_\">Object</span> e) {\n  <span class=\"hljs-keyword\">if</span> (e is <span class=\"hljs-title class_\">CameraException</span>) {\n    <span class=\"hljs-keyword\">switch</span> (e.<span class=\"hljs-property\">code</span>) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'CameraAccessDenied'</span>:\n        <span class=\"hljs-comment\">// 여기에서 액세스 오류를 처리합니다.</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-attr\">default</span>:\n        <span class=\"hljs-comment\">// 다른 오류를 처리합니다.</span>\n        <span class=\"hljs-keyword\">break</span>;\n    }\n  }\n});\n</code></pre>\n<p>UI 구축하기</p>\n<p>UI는 카메라 피드를 표시하는 CameraPreview 위젯과 이미지를 캡처하는 FloatingActionButton으로 구성됩니다. 그래서 FloatingActionButton을 클릭하면 카메라에 의해 표시된 이미지를 캡처할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">SafeArea</span>(\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n      <span class=\"hljs-comment\">// 앱 바 설정</span>\n    ),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Stack</span>(\n      <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n        <span class=\"hljs-title class_\">CameraPreview</span>(controller),\n        <span class=\"hljs-title class_\">Align</span>(\n          <span class=\"hljs-attr\">alignment</span>: <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">bottomCenter</span>,\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Padding</span>(\n            <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">only</span>(<span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-number\">16.0</span>),\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">FloatingActionButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: () {\n                <span class=\"hljs-title function_\">_takePicture</span>(); <span class=\"hljs-comment\">// 사진 촬영 메서드 호출</span>\n              },\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">camera</span>),\n              <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>,\n              <span class=\"hljs-attr\">foregroundColor</span>: <span class=\"hljs-title class_\">AppColors</span>.<span class=\"hljs-property\">deepBlue</span>,\n            ),\n          ),\n        ),\n      ],\n    ),\n  ),\n);\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이미지 캡처 및 보기</p>\n<p>여기에 플로팅 액션 버튼에 연결한 함수를 구현했습니다. 이 함수는 이미지를 캡처하는 유일한 목적으로 사용됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_takePicture</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-keyword\">try</span> {\n    final <span class=\"hljs-title class_\">XFile</span> picture = <span class=\"hljs-keyword\">await</span> controller.<span class=\"hljs-title function_\">takePicture</span>();\n    <span class=\"hljs-title function_\">setState</span>(() {\n      imageFile = picture;\n    });\n    <span class=\"hljs-comment\">// 이미지를 캡처한 후 이미지 뷰 페이지로 이동</span>\n    <span class=\"hljs-title class_\">Navigator</span>.<span class=\"hljs-title function_\">push</span>(\n      context,\n      <span class=\"hljs-title class_\">MaterialPageRoute</span>(\n        <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =></span> <span class=\"hljs-title class_\">ImageViewPage</span>(<span class=\"hljs-attr\">imagePath</span>: imageFile!.<span class=\"hljs-property\">path</span>),\n      ),\n    );\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"사진 찍기 오류 발생: $e\"</span>);\n  }\n}\n</code></pre>\n<p>캡처한 이미지 파일 경로를 가져와 다음 페이지에서 캡처한 이미지를 볼 수 있도록 탐색을 포함했습니다.</p>\n<div class=\"content-ad\"></div>\n<p>이미지 보기</p>\n<p>이제 사진을 찍은 후에는 찍은 이미지를 보고 싶을 것입니다, 맞죠? 찍은 이미지를 볼 수 있는 페이지로 이동하는 것을 허용하는 페이지가 여기 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ImageViewPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  final <span class=\"hljs-title class_\">String</span> imagePath;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ImageViewPage</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>, required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">imagePath</span>});\n\n  @override\n  <span class=\"hljs-title class_\">State</span>&#x3C;<span class=\"hljs-title class_\">ImageViewPage</span>> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_ImageViewPageState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_ImageViewPageState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">ImageViewPage</span>> {\n  bool isLoading = <span class=\"hljs-literal\">false</span>;\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Captured Image'</span>),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Image</span>.<span class=\"hljs-title function_\">file</span>(<span class=\"hljs-title class_\">File</span>(widget.<span class=\"hljs-property\">imagePath</span>)),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>마무리</p>\n<div class=\"content-ad\"></div>\n<p>이 가이드에서는 카메라 패키지를 사용하여 Flutter 응용 프로그램에서 간단한 카메라 기능을 구현했습니다. 카메라를 초기화하고 초기화 오류를 처리하며, 캡처 및 이미지 보기를 위한 사용자 친화적인 UI를 제공했습니다. 이는 Flutter 앱에서 이미지 필터, 비디오 녹화 등 더 고급 카메라 기능을 구축하기 위한 기본 단계입니다. 코딩을 즐기세요!</p>\n<p>아래는 사진을 찍고 그 작업을 실행하는 페이지의 전체 코드 구현입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CameraApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  final <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">CameraDescription</span>> cameras;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CameraApp</span>({<span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-property\">key</span>, required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cameras</span>});\n\n  @override\n  <span class=\"hljs-title class_\">State</span>&#x3C;<span class=\"hljs-title class_\">CameraApp</span>> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_CameraAppState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_CameraAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">CameraApp</span>> {\n  late <span class=\"hljs-title class_\">CameraController</span> controller;\n  late <span class=\"hljs-title class_\">XFile</span>? imageFile;  <span class=\"hljs-comment\">// 캡처된 이미지 파일을 저장하는 변수</span>\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n    controller = <span class=\"hljs-title class_\">CameraController</span>(widget.<span class=\"hljs-property\">cameras</span>[<span class=\"hljs-number\">1</span>], <span class=\"hljs-title class_\">ResolutionPreset</span>.<span class=\"hljs-property\">max</span>);\n    controller.<span class=\"hljs-title function_\">initialize</span>().<span class=\"hljs-title function_\">then</span>((_) {\n      <span class=\"hljs-keyword\">if</span> (!mounted) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-title function_\">setState</span>(() {});\n    }).<span class=\"hljs-title function_\">catchError</span>((<span class=\"hljs-title class_\">Object</span> e) {\n      <span class=\"hljs-keyword\">if</span> (e is <span class=\"hljs-title class_\">CameraException</span>) {\n        <span class=\"hljs-keyword\">switch</span> (e.<span class=\"hljs-property\">code</span>) {\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'CameraAccessDenied'</span>:\n            <span class=\"hljs-comment\">// 여기서 액세스 오류 처리</span>\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-attr\">default</span>:\n            <span class=\"hljs-comment\">// 다른 오류 처리</span>\n            <span class=\"hljs-keyword\">break</span>;\n        }\n      }\n    });\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-params\"></span>) {\n    controller.<span class=\"hljs-title function_\">dispose</span>();\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">dispose</span>();\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">if</span> (!controller.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">isInitialized</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Container</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">SafeArea</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n        <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n          <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-title class_\">AppColors</span>.<span class=\"hljs-property\">deepBlue</span>,\n          <span class=\"hljs-attr\">leading</span>: <span class=\"hljs-title class_\">BackButton</span>(\n            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>,\n            <span class=\"hljs-attr\">onPressed</span>: () {\n              <span class=\"hljs-title class_\">Navigator</span>.<span class=\"hljs-title function_\">pop</span>(context);\n            },\n          ),\n          <span class=\"hljs-attr\">centerTitle</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(\n            <span class=\"hljs-string\">'사진 찍기'</span>,\n            <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>),\n          ),\n        ),\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Stack</span>(\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-title class_\">CameraPreview</span>(controller),\n            <span class=\"hljs-title class_\">Align</span>(\n              <span class=\"hljs-attr\">alignment</span>: <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">bottomCenter</span>,\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Padding</span>(\n                <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">only</span>(<span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-number\">16.0</span>),\n                <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">FloatingActionButton</span>(\n                  <span class=\"hljs-attr\">onPressed</span>: () {\n                    <span class=\"hljs-title function_\">_takePicture</span>();  <span class=\"hljs-comment\">// 사진 찍는 메서드 호출</span>\n                  },\n                  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">camera</span>),\n                  <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>,\n                  <span class=\"hljs-attr\">foregroundColor</span>: <span class=\"hljs-title class_\">AppColors</span>.<span class=\"hljs-property\">deepBlue</span>,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  <span class=\"hljs-comment\">// 사진 찍는 메서드</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_takePicture</span>() <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">try</span> {\n      final <span class=\"hljs-title class_\">XFile</span> picture = <span class=\"hljs-keyword\">await</span> controller.<span class=\"hljs-title function_\">takePicture</span>();\n      <span class=\"hljs-title function_\">setState</span>(() {\n        imageFile = picture;\n      });\n      <span class=\"hljs-comment\">// 이미지 캡처 후 이미지 뷰 페이지로 이동</span>\n      <span class=\"hljs-title class_\">Navigator</span>.<span class=\"hljs-title function_\">push</span>(\n        context,\n        <span class=\"hljs-title class_\">MaterialPageRoute</span>(\n          <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =></span> <span class=\"hljs-title class_\">ImageViewPage</span>(<span class=\"hljs-attr\">imagePath</span>: imageFile!.<span class=\"hljs-property\">path</span>),\n        ),\n      );\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"사진 찍기 오류: $e\"</span>);\n    }\n  }\n}\n</code></pre>\n<img src=\"https://miro.medium.com/v2/resize:fit:592/1*oqIKI2wzNfzOj1IJ-EDmoQ.gif\">\n<div class=\"content-ad\"></div>\n<p>텍스트를 위해 감사합니다 👏 재미있게 읽으셨다면 한 번 클릭해 주시고, 계속해서 많은 글 읽어주세요. 함께 해서 즐거웠습니다 😊✌️</p>\n</body>\n</html>\n"},"__N_SSG":true}