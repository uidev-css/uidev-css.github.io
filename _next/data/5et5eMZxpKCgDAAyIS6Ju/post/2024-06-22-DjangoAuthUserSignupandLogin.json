{"pageProps":{"post":{"title":"Django에서 Auth User 회원가입 및 로그인 기능 구현하는 방법","description":"","date":"2024-06-22 15:59","slug":"2024-06-22-DjangoAuthUserSignupandLogin","content":"\n\n아래는 Django Best Practices에 대한 이전 블로그를 확인해보세요: Tips for Writing Better Code.\n\n# 소개\n\n사용자 인증과 권한 부여는 웹 애플리케이션에서 중요한 구성 요소입니다. 인기 있는 Python 웹 프레임워크인 Django는 사용자 로그인 및 가입 기능을 구현하기 위한 강력한 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n이 블로그 포스트에서는 Django 및 HTML 폼을 사용하여 사용자 로그인 및 가입 시스템을 만드는 방법을 살펴보겠습니다. 이 기능을 Django 프로젝트에 성공적으로 구현하는 데 도움이 되는 필수 단계를 다루고 유용한 리소스를 제공할 것입니다.\n\n## 그러니까, 간단한 애플리케이션을 만들어 봅시다 👍\n\n# 준비물\n\n이 자습서에 들어가기 전에 다음의 준비물이 갖춰져 있는지 확인하십시오:\n\n<div class=\"content-ad\"></div>\n\n- Python 및 Django Framework의 기본적인 이해\r\n- 시스템에 설치된 Python (버전 3.6 이상) 및 pip\r\n- Django 프레임워크와 그 개념에 익숙함\r\n\r\n[참고: Virtual Environment를 활용하세요. 👍]\r\n\r\n# 단계\r\n\r\n# 1. Django 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n우리 간단한 애플리케이션을 만들기 위해서는 새 Django 프로젝트를 설정해야 합니다. 설치 프로세스 및 프로젝트 초기화에 대해 다룰 것입니다.\n\n시작하려면 다음 단계를 따라 Django 프레임워크를 설정하세요:\n\npip를 사용하여 Django 프레임워크를 설치합니다:\n\n```js\npip install django\n```\n\n<div class=\"content-ad\"></div>\n\n새로운 Django 프로젝트를 만들어보세요:\n\n```js\ndjango-admin startproject myproject\n```\n\n프로젝트 내에 새로운 Django 앱을 만들어보세요:\n\n```js\ncd myproject\npython manage.py startapp myapp\n```\n\n<div class=\"content-ad\"></div>\n\n# 2. Django 설정 구성하기\n\n당신의 Django 프로젝트의 settings.py 파일을 열고 다음 코드를 작성해주세요:\n\n```js\nINSTALLED_APPS = [\n    # ...\n    # ..\n    # .\n    # 👇 1. 이 줄을 추가해주세요\n    'myapp',\n]\n\nTEMPLATES = [\n    {\n        # 👇 2. 이 줄을 추가해주세요 \n        'DIRS': ['templates'],\n        \n    },\n]\r\n```\n\n# 3. URL 추가하기\n\n<div class=\"content-ad\"></div>\n\n이제 myapp URL에 접근하려면 myproject/urls.py 파일에 다음 줄을 추가해야 합니다.\n\nmyproject 폴더 안의 urls.py 파일을 열고 다음 코드를 작성하세요:\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path, include # 👈 1. 이 줄 추가\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # 👇 2. 이 곳에 앱 URL 추가\n    path('', include('myapp.urls'))\n]\n```\n\n뷰의 URL 구성:\n\n<div class=\"content-ad\"></div>\n\nmyapp 폴더 안에 urls.py 파일을 생성하고 아래 코드를 작성하세요:\n\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='home'),\n    path('login/', views.user_login, name='login'),\n    path('signup/', views.user_signup, name='signup'),\n    path('logout/', views.user_logout, name='logout'),\n]\n```\n\n- urlpatterns: 어플리케이션의 URL 패턴을 보유하는 리스트입니다. 각 URL 패턴은 리스트의 요소로 정의됩니다.\n- path('', views.index, name='home'): 이 줄은 어플리케이션의 홈페이지에 대한 URL 패턴을 정의합니다. 빈 문자열 ``은 루트 URL을 나타냅니다. views.index는 뷰 모듈의 index 함수가 홈페이지를 렌더링하는 데 사용됨을 나타냅니다. name='home'은 이 URL 패턴에 이름을 할당하는 선택적 매개변수로, 다른 코드의 다른 부분에서 이 URL 패턴을 참조하는 데 사용할 수 있습니다.\n- path('login/', views.user_login, name='login'): 이 줄은 로그인 페이지에 대한 URL 패턴을 정의합니다. `login/` 문자열은 URL 경로 /login/을 나타냅니다. views.user_login은 뷰 모듈의 user_login 함수가 로그인 페이지를 렌더링하는 데 사용됨을 나타냅니다. name='login'은 이 URL 패턴에 이름을 할당합니다.\n- path('signup/', views.user_signup, name='signup'): 이 줄은 가입 페이지에 대한 URL 패턴을 정의합니다. `signup/` 문자열은 URL 경로 /signup/을 나타냅니다. views.user_signup은 뷰 모듈의 user_signup 함수가 가입 페이지를 렌더링하는 데 사용됨을 나타냅니다. name='signup'은 이 URL 패턴에 이름을 할당합니다.\n- path('logout/', views.user_logout, name='logout'): 이 줄은 로그아웃 페이지에 대한 URL 패턴을 정의합니다. `logout/` 문자열은 URL 경로 /logout/을 나타냅니다. views.user_logout은 뷰 모듈의 user_logout 함수가 로그아웃 페이지를 렌더링하는 데 사용됨을 나타냅니다. name='logout'은 이 URL 패턴에 이름을 할당합니다.\n\n이러한 URL 패턴은 사용자가 입력한 URL과 해당 페이지를 렌더링하는 데 사용되어야 하는 뷰 사이의 매핑을 결정합니다. 이 경우, 뷰 모듈에는 index, user_login, user_signup, user_logout 등의 함수가 포함되어 있으며, 각 페이지의 렌더링을 처리합니다.\n\n<div class=\"content-ad\"></div>\n\n# 5. 뷰 함수 추가\n\nmyapp 폴더 내의 views.py 파일을 열고 아래 코드를 작성하여 템플릿을 표시하고 리다이렉션합니다:\n\n```python\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import authenticate, login, logout\nfrom .forms import SignupForm, LoginForm\n\n# 여기서 뷰 함수를 생성합니다.\n# 홈 페이지\ndef index(request):\n    return render(request, 'index.html')\n\n# 회원 가입 페이지\ndef user_signup(request):\n    if request.method == 'POST':\n        form = SignupForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('login')\n    else:\n        form = SignupForm()\n    return render(request, 'signup.html', {'form': form})\n\n# 로그인 페이지\ndef user_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user:\n                login(request, user)\n                return redirect('home')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n# 로그아웃 페이지\ndef user_logout(request):\n    logout(request)\n    return redirect('login')\n```\n\n제공된 코드 조각은 사용자 인증과 계정 관리를 위한 다양한 뷰를 포함한 Django의 views.py 파일을 나타냅니다. 각 함수의 내용은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- index(request): 이 뷰는 애플리케이션의 홈 페이지를 나타냅니다. `index.html` 템플릿을 렌더링하고 응답으로 반환합니다.\n- user_signup(request): 이 뷰는 회원 가입 페이지를 처리합니다. 요청 메서드가 POST인 경우를 확인하여, 이는 폼 제출을 나타냅니다. 그렇다면 UserCreationForm을 사용하여 제출된 폼 데이터를 유효성 검사합니다. 폼이 유효한 경우, 사용자를 저장하고 로그인 페이지로 리디렉션합니다. 요청 메서드가 GET인 경우, UserCreationForm의 새 인스턴스를 만들어 `signup.html` 템플릿을 렌더링하고 폼을 context로 전달합니다.\n- user_login(request): 이 뷰는 로그인 페이지를 처리합니다. 요청 메서드가 POST인 경우를 확인하여, 이는 폼 제출을 나타냅니다. LoginForm을 사용하여 제출된 폼 데이터를 유효성 검사합니다. 폼이 유효한 경우, 정제된 데이터에서 사용자 이름과 비밀번호를 검색합니다. 그런 다음 authenticate()를 사용하여 사용자를 인증하고 login()을 사용하여 사용자를 로그인 처리합니다. 사용자가 성공적으로 인증되면 홈 페이지로 리디렉션됩니다. 요청 메서드가 GET인 경우, LoginForm의 새 인스턴스를 만들어 `login.html` 템플릿을 렌더링하고 폼을 context로 전달합니다.\n- user_logout(request): 이 뷰는 로그아웃 기능을 처리합니다. Django에서 제공하는 logout() 함수를 호출하여 사용자를 로그아웃하고 로그인 페이지로 리디렉션합니다. \n\n코드에는 다양한 Django 모듈 및 폼을 위한 import 문 (render, redirect, authenticate, login, logout, UserCreationForm 및 LoginForm)도 포함되어 있습니다. 이러한 import는 뷰의 올바른 작동을 위해 필요합니다.\n\n총론적으로, 이 코드는 Django를 사용하여 사용자 회원 가입, 로그인 및 로그아웃 기능의 기본적인 구현을 보여줍니다. 연결된 폼과 함께 이러한 뷰를 Django 프로젝트에 통합하여 사용자 인증 및 계정 관리를 활성화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nmyapp 폴더 안에 forms.py라는 새 파일을 만들고 아래 코드를 작성해주세요:\n\nfrom django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass SignupForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ['username', 'password1', 'password2']\n\nclass LoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\n제공된 코드 스니펫은 Django forms 모듈을 나타내며 SignupForm과 LoginForm 두 가지 폼을 정의합니다. 이러한 폼은 Django 애플리케이션에서 사용자 가입 및 로그인 기능에 사용됩니다.\n\nSignupForm:\n```\n\n<div class=\"content-ad\"></div>\n\n- UserCreationForm은 사용자 등록을 위해 특별히 디자인된 내장 Django 폼인 UserCreationForm에서 상속됩니다.\n- UserCreationForm은 username, password1, 그리고 password2(비밀번호 확인) 필드를 제공합니다.\n- Meta 클래스는 사용할 모델을 지정하는데, 기본 Django User 모델로 django.contrib.auth.models에서 가져옵니다.\n- fields 속성은 폼에 포함되어야 하는 필드를 나열하며, 즉 `username`, `password1`, `password2`를 나열합니다.\n\nLoginForm:\n\n- 사용자 로그인을 위해 사용되는 표준 Django 폼입니다.\n- 특정 Django 폼 클래스를 상속하지 않습니다.\n- forms.CharField() 메서드를 사용하여 'username'과 'password' 두 개의 필드를 정의합니다.\n- 'password' 필드는 widget=forms.PasswordInput 인수에 의해 비밀번호 입력 필드로 렌더링됩니다.\n\n이러한 폼은 Django 뷰 내에서 사용자 등록 및 인증 프로세스를 처리하기 위해 사용될 수 있습니다. 적절한 필드와 유효성 검사가 포함된 HTML 폼을 생성하는 편리한 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 7. 템플릿\n\n마이프로젝트에 새로운 폴더 템플릿을 만들고, index.html이라는 새 파일을 생성하고 아래 코드를 작성해 주세요:\n\n```js\n{ if request.user.is_authenticated }\n  <p>{ request.user.username }</p>\n  <a href=\"{ url 'logout' }\">로그아웃</a>\n{ else }\n  <a href=\"{ url 'login' }\">로그인</a>\n  <a href=\"{ url 'signup' }\">가입하기</a>\n{ endif }\n\n<h1>환영합니다!</h1>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n# 로그인\n\n<form method=\"POST\">\n    { csrf_token }\n    { form.as_p }\n    <button type=\"submit\">로그인</button>\n    <a href=\"{ url 'signup' }\">계정이 없으신가요? 가입하기</a>\n</form>\n```\n\n새로운 signup.html 파일을 생성하고 아래 코드를 작성하세요:\n\n```js\n# 가입하기\n\n<form method=\"POST\">\n    { csrf_token }\n    { form.as_p }\n    <button type=\"submit\">가입하기</button>\n    <a href=\"{ url 'login' }\">이미 계정이 있으신가요?</a>\n</form>\n```\n\n# 8. 테스팅 및 실행\n\n\n<div class=\"content-ad\"></div>\n\n이제 Django Framework을 사용하여 애플리케이션의 기본 구조를 설정했으니, 앱을 테스트하고 실행하는 시간입니다. 다음 단계를 따라주세요:\n\n단계 1: 명령줄 인터페이스 열기\n\n명령줄 인터페이스를 열고 Django 프로젝트의 루트 디렉토리로 이동하세요.\n\n계속 진행하려면 myproject 폴더 내에서 터미널을 열고 다음 명령을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\npython manage.py makemigrations\npython manage.py migrate\n```\n\nStep 2: 서버 시작하기:\n\n서버를 시작하려면 다음 명령을 명령줄 인터페이스에서 실행하세요:\n\n```js\npython manage.py runserver\n```\n\n<div class=\"content-ad\"></div>\n\n이 명령을 사용하면 Django 개발 서버가 시작됩니다.\n\n단계 3: 테스트\n\n서버를 실행한 후 http://127.0.0.1:8000/ 에서 프로젝트 인터페이스에 액세스합니다.\n\n어느 브라우저를 열어서 http://127.0.0.1:8000/ URL 로 이동하면 웹 사이트의 홈페이지가 다음과 같이 보입니다:\n\n<div class=\"content-ad\"></div>\n\n\n![확인 페이지](/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_1.png)\n\n로그인 페이지:\n\n![로그인 페이지](/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_2.png)\n\n가입 페이지:\n\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_3.png)\n\n전체 라이브 데모를 확인해보세요:\n\n# 결론\n\n이 블로그 포스트에서는 Django와 HTML 폼을 사용하여 사용자 로그인 및 가입 기능을 구현하는 방법을 살펴보았습니다. Django 프로젝트 설정부터 템플릿 디자인 및 뷰와 폼 구현까지 필요한 단계를 다루었습니다. 제공된 자원과 참고 자료를 따라하면 Django 애플리케이션에서 사용자 인증 프로세스를 더욱 맞춤화하고 향상시킬 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n웹 애플리케이션의 사용자 인증은 매우 중요한 요소입니다. 사용자 데이터를 보호하기 위해 보안을 우선시하고 최상의 방법을 따르는 것이 중요합니다. Django와 Bootstrap을 사용하면 견고한 보안 조치를 유지하면서도 매끄러운 사용자 경험을 만들 수 있습니다.\n\n코딩 즐기세요!\n\n개발 지식을 공유하는 제 열정을 지원하고자 Buy Me a Coffee로 기부를 부탁드립니다. 여러분의 기부로 저는 가치 있는 콘텐츠와 자료를 만들 수 있습니다. 지원해 주셔서 감사합니다!\n\n이 블로그에서 제시된 정보에 대한 질문이나 의견이 있으면 언제든지 연락해 주세요. 다시 한번 읽어 주셔서 감사합니다!\n\n<div class=\"content-ad\"></div>\n\n# 자료\n\n- Django 프레임워크 문서\n- Django AuthenticationForm\n- Django UserCreationForm","ogImage":{"url":"/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_0.png"},"coverImage":"/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>아래는 Django Best Practices에 대한 이전 블로그를 확인해보세요: Tips for Writing Better Code.</p>\n<h1>소개</h1>\n<p>사용자 인증과 권한 부여는 웹 애플리케이션에서 중요한 구성 요소입니다. 인기 있는 Python 웹 프레임워크인 Django는 사용자 로그인 및 가입 기능을 구현하기 위한 강력한 기능을 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<p>이 블로그 포스트에서는 Django 및 HTML 폼을 사용하여 사용자 로그인 및 가입 시스템을 만드는 방법을 살펴보겠습니다. 이 기능을 Django 프로젝트에 성공적으로 구현하는 데 도움이 되는 필수 단계를 다루고 유용한 리소스를 제공할 것입니다.</p>\n<h2>그러니까, 간단한 애플리케이션을 만들어 봅시다 👍</h2>\n<h1>준비물</h1>\n<p>이 자습서에 들어가기 전에 다음의 준비물이 갖춰져 있는지 확인하십시오:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Python 및 Django Framework의 기본적인 이해</li>\n<li>시스템에 설치된 Python (버전 3.6 이상) 및 pip</li>\n<li>Django 프레임워크와 그 개념에 익숙함</li>\n</ul>\n<p>[참고: Virtual Environment를 활용하세요. 👍]</p>\n<h1>단계</h1>\n<h1>1. Django 프로젝트 설정하기</h1>\n<div class=\"content-ad\"></div>\n<p>우리 간단한 애플리케이션을 만들기 위해서는 새 Django 프로젝트를 설정해야 합니다. 설치 프로세스 및 프로젝트 초기화에 대해 다룰 것입니다.</p>\n<p>시작하려면 다음 단계를 따라 Django 프레임워크를 설정하세요:</p>\n<p>pip를 사용하여 Django 프레임워크를 설치합니다:</p>\n<pre><code class=\"hljs language-js\">pip install django\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>새로운 Django 프로젝트를 만들어보세요:</p>\n<pre><code class=\"hljs language-js\">django-admin startproject myproject\n</code></pre>\n<p>프로젝트 내에 새로운 Django 앱을 만들어보세요:</p>\n<pre><code class=\"hljs language-js\">cd myproject\npython manage.<span class=\"hljs-property\">py</span> startapp myapp\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>2. Django 설정 구성하기</h1>\n<p>당신의 Django 프로젝트의 settings.py 파일을 열고 다음 코드를 작성해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">INSTALLED_APPS</span> = [\n    # ...\n    # ..\n    # .\n    # 👇 <span class=\"hljs-number\">1.</span> 이 줄을 추가해주세요\n    <span class=\"hljs-string\">'myapp'</span>,\n]\n\n<span class=\"hljs-variable constant_\">TEMPLATES</span> = [\n    {\n        # 👇 <span class=\"hljs-number\">2.</span> 이 줄을 추가해주세요 \n        <span class=\"hljs-string\">'DIRS'</span>: [<span class=\"hljs-string\">'templates'</span>],\n        \n    },\n]\n</code></pre>\n<h1>3. URL 추가하기</h1>\n<div class=\"content-ad\"></div>\n<p>이제 myapp URL에 접근하려면 myproject/urls.py 파일에 다음 줄을 추가해야 합니다.</p>\n<p>myproject 폴더 안의 urls.py 파일을 열고 다음 코드를 작성하세요:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin\n<span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path, include <span class=\"hljs-comment\"># 👈 1. 이 줄 추가</span>\n\nurlpatterns = [\n    path(<span class=\"hljs-string\">'admin/'</span>, admin.site.urls),\n    <span class=\"hljs-comment\"># 👇 2. 이 곳에 앱 URL 추가</span>\n    path(<span class=\"hljs-string\">''</span>, include(<span class=\"hljs-string\">'myapp.urls'</span>))\n]\n</code></pre>\n<p>뷰의 URL 구성:</p>\n<div class=\"content-ad\"></div>\n<p>myapp 폴더 안에 urls.py 파일을 생성하고 아래 코드를 작성하세요:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path\n<span class=\"hljs-keyword\">from</span> . <span class=\"hljs-keyword\">import</span> views\n\nurlpatterns = [\n    path(<span class=\"hljs-string\">''</span>, views.index, name=<span class=\"hljs-string\">'home'</span>),\n    path(<span class=\"hljs-string\">'login/'</span>, views.user_login, name=<span class=\"hljs-string\">'login'</span>),\n    path(<span class=\"hljs-string\">'signup/'</span>, views.user_signup, name=<span class=\"hljs-string\">'signup'</span>),\n    path(<span class=\"hljs-string\">'logout/'</span>, views.user_logout, name=<span class=\"hljs-string\">'logout'</span>),\n]\n</code></pre>\n<ul>\n<li>urlpatterns: 어플리케이션의 URL 패턴을 보유하는 리스트입니다. 각 URL 패턴은 리스트의 요소로 정의됩니다.</li>\n<li>path('', views.index, name='home'): 이 줄은 어플리케이션의 홈페이지에 대한 URL 패턴을 정의합니다. 빈 문자열 ``은 루트 URL을 나타냅니다. views.index는 뷰 모듈의 index 함수가 홈페이지를 렌더링하는 데 사용됨을 나타냅니다. name='home'은 이 URL 패턴에 이름을 할당하는 선택적 매개변수로, 다른 코드의 다른 부분에서 이 URL 패턴을 참조하는 데 사용할 수 있습니다.</li>\n<li>path('login/', views.user_login, name='login'): 이 줄은 로그인 페이지에 대한 URL 패턴을 정의합니다. <code>login/</code> 문자열은 URL 경로 /login/을 나타냅니다. views.user_login은 뷰 모듈의 user_login 함수가 로그인 페이지를 렌더링하는 데 사용됨을 나타냅니다. name='login'은 이 URL 패턴에 이름을 할당합니다.</li>\n<li>path('signup/', views.user_signup, name='signup'): 이 줄은 가입 페이지에 대한 URL 패턴을 정의합니다. <code>signup/</code> 문자열은 URL 경로 /signup/을 나타냅니다. views.user_signup은 뷰 모듈의 user_signup 함수가 가입 페이지를 렌더링하는 데 사용됨을 나타냅니다. name='signup'은 이 URL 패턴에 이름을 할당합니다.</li>\n<li>path('logout/', views.user_logout, name='logout'): 이 줄은 로그아웃 페이지에 대한 URL 패턴을 정의합니다. <code>logout/</code> 문자열은 URL 경로 /logout/을 나타냅니다. views.user_logout은 뷰 모듈의 user_logout 함수가 로그아웃 페이지를 렌더링하는 데 사용됨을 나타냅니다. name='logout'은 이 URL 패턴에 이름을 할당합니다.</li>\n</ul>\n<p>이러한 URL 패턴은 사용자가 입력한 URL과 해당 페이지를 렌더링하는 데 사용되어야 하는 뷰 사이의 매핑을 결정합니다. 이 경우, 뷰 모듈에는 index, user_login, user_signup, user_logout 등의 함수가 포함되어 있으며, 각 페이지의 렌더링을 처리합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>5. 뷰 함수 추가</h1>\n<p>myapp 폴더 내의 views.py 파일을 열고 아래 코드를 작성하여 템플릿을 표시하고 리다이렉션합니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, redirect\n<span class=\"hljs-keyword\">from</span> django.contrib.auth <span class=\"hljs-keyword\">import</span> authenticate, login, logout\n<span class=\"hljs-keyword\">from</span> .forms <span class=\"hljs-keyword\">import</span> SignupForm, LoginForm\n\n<span class=\"hljs-comment\"># 여기서 뷰 함수를 생성합니다.</span>\n<span class=\"hljs-comment\"># 홈 페이지</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">'index.html'</span>)\n\n<span class=\"hljs-comment\"># 회원 가입 페이지</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_signup</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">'POST'</span>:\n        form = SignupForm(request.POST)\n        <span class=\"hljs-keyword\">if</span> form.is_valid():\n            form.save()\n            <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">'login'</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        form = SignupForm()\n    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">'signup.html'</span>, {<span class=\"hljs-string\">'form'</span>: form})\n\n<span class=\"hljs-comment\"># 로그인 페이지</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_login</span>(<span class=\"hljs-params\">request</span>):\n    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">'POST'</span>:\n        form = LoginForm(request.POST)\n        <span class=\"hljs-keyword\">if</span> form.is_valid():\n            username = form.cleaned_data[<span class=\"hljs-string\">'username'</span>]\n            password = form.cleaned_data[<span class=\"hljs-string\">'password'</span>]\n            user = authenticate(request, username=username, password=password)\n            <span class=\"hljs-keyword\">if</span> user:\n                login(request, user)\n                <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">'home'</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        form = LoginForm()\n    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">'login.html'</span>, {<span class=\"hljs-string\">'form'</span>: form})\n\n<span class=\"hljs-comment\"># 로그아웃 페이지</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_logout</span>(<span class=\"hljs-params\">request</span>):\n    logout(request)\n    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">'login'</span>)\n</code></pre>\n<p>제공된 코드 조각은 사용자 인증과 계정 관리를 위한 다양한 뷰를 포함한 Django의 views.py 파일을 나타냅니다. 각 함수의 내용은 다음과 같습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>index(request): 이 뷰는 애플리케이션의 홈 페이지를 나타냅니다. <code>index.html</code> 템플릿을 렌더링하고 응답으로 반환합니다.</li>\n<li>user_signup(request): 이 뷰는 회원 가입 페이지를 처리합니다. 요청 메서드가 POST인 경우를 확인하여, 이는 폼 제출을 나타냅니다. 그렇다면 UserCreationForm을 사용하여 제출된 폼 데이터를 유효성 검사합니다. 폼이 유효한 경우, 사용자를 저장하고 로그인 페이지로 리디렉션합니다. 요청 메서드가 GET인 경우, UserCreationForm의 새 인스턴스를 만들어 <code>signup.html</code> 템플릿을 렌더링하고 폼을 context로 전달합니다.</li>\n<li>user_login(request): 이 뷰는 로그인 페이지를 처리합니다. 요청 메서드가 POST인 경우를 확인하여, 이는 폼 제출을 나타냅니다. LoginForm을 사용하여 제출된 폼 데이터를 유효성 검사합니다. 폼이 유효한 경우, 정제된 데이터에서 사용자 이름과 비밀번호를 검색합니다. 그런 다음 authenticate()를 사용하여 사용자를 인증하고 login()을 사용하여 사용자를 로그인 처리합니다. 사용자가 성공적으로 인증되면 홈 페이지로 리디렉션됩니다. 요청 메서드가 GET인 경우, LoginForm의 새 인스턴스를 만들어 <code>login.html</code> 템플릿을 렌더링하고 폼을 context로 전달합니다.</li>\n<li>user_logout(request): 이 뷰는 로그아웃 기능을 처리합니다. Django에서 제공하는 logout() 함수를 호출하여 사용자를 로그아웃하고 로그인 페이지로 리디렉션합니다.</li>\n</ul>\n<p>코드에는 다양한 Django 모듈 및 폼을 위한 import 문 (render, redirect, authenticate, login, logout, UserCreationForm 및 LoginForm)도 포함되어 있습니다. 이러한 import는 뷰의 올바른 작동을 위해 필요합니다.</p>\n<p>총론적으로, 이 코드는 Django를 사용하여 사용자 회원 가입, 로그인 및 로그아웃 기능의 기본적인 구현을 보여줍니다. 연결된 폼과 함께 이러한 뷰를 Django 프로젝트에 통합하여 사용자 인증 및 계정 관리를 활성화할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">myapp 폴더 안에 forms.<span class=\"hljs-property\">py</span>라는 새 파일을 만들고 아래 코드를 작성해주세요:\n\n<span class=\"hljs-keyword\">from</span> django <span class=\"hljs-keyword\">import</span> forms\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">contrib</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">forms</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UserCreationForm</span>\n<span class=\"hljs-keyword\">from</span> django.<span class=\"hljs-property\">contrib</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">models</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">User</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignupForm</span>(<span class=\"hljs-title class_\">UserCreationForm</span>):\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:\n        model = <span class=\"hljs-title class_\">User</span>\n        fields = [<span class=\"hljs-string\">'username'</span>, <span class=\"hljs-string\">'password1'</span>, <span class=\"hljs-string\">'password2'</span>]\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginForm</span>(forms.<span class=\"hljs-property\">Form</span>):\n    username = forms.<span class=\"hljs-title class_\">CharField</span>()\n    password = forms.<span class=\"hljs-title class_\">CharField</span>(widget=forms.<span class=\"hljs-property\">PasswordInput</span>)\n\n제공된 코드 스니펫은 <span class=\"hljs-title class_\">Django</span> forms 모듈을 나타내며 <span class=\"hljs-title class_\">SignupForm</span>과 <span class=\"hljs-title class_\">LoginForm</span> 두 가지 폼을 정의합니다. 이러한 폼은 <span class=\"hljs-title class_\">Django</span> 애플리케이션에서 사용자 가입 및 로그인 기능에 사용됩니다.\n\n<span class=\"hljs-title class_\">SignupForm</span>:\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>UserCreationForm은 사용자 등록을 위해 특별히 디자인된 내장 Django 폼인 UserCreationForm에서 상속됩니다.</li>\n<li>UserCreationForm은 username, password1, 그리고 password2(비밀번호 확인) 필드를 제공합니다.</li>\n<li>Meta 클래스는 사용할 모델을 지정하는데, 기본 Django User 모델로 django.contrib.auth.models에서 가져옵니다.</li>\n<li>fields 속성은 폼에 포함되어야 하는 필드를 나열하며, 즉 <code>username</code>, <code>password1</code>, <code>password2</code>를 나열합니다.</li>\n</ul>\n<p>LoginForm:</p>\n<ul>\n<li>사용자 로그인을 위해 사용되는 표준 Django 폼입니다.</li>\n<li>특정 Django 폼 클래스를 상속하지 않습니다.</li>\n<li>forms.CharField() 메서드를 사용하여 'username'과 'password' 두 개의 필드를 정의합니다.</li>\n<li>'password' 필드는 widget=forms.PasswordInput 인수에 의해 비밀번호 입력 필드로 렌더링됩니다.</li>\n</ul>\n<p>이러한 폼은 Django 뷰 내에서 사용자 등록 및 인증 프로세스를 처리하기 위해 사용될 수 있습니다. 적절한 필드와 유효성 검사가 포함된 HTML 폼을 생성하는 편리한 방법을 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>7. 템플릿</h1>\n<p>마이프로젝트에 새로운 폴더 템플릿을 만들고, index.html이라는 새 파일을 생성하고 아래 코드를 작성해 주세요:</p>\n<pre><code class=\"hljs language-js\">{ <span class=\"hljs-keyword\">if</span> request.<span class=\"hljs-property\">user</span>.<span class=\"hljs-property\">is_authenticated</span> }\n  &#x3C;p>{ request.<span class=\"hljs-property\">user</span>.<span class=\"hljs-property\">username</span> }&#x3C;/p>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ url 'logout' }\"</span>></span>로그아웃<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n{ <span class=\"hljs-keyword\">else</span> }\n  &#x3C;a href=<span class=\"hljs-string\">\"{ url 'login' }\"</span>>로그인&#x3C;/a>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ url 'signup' }\"</span>></span>가입하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n{ endif }\n\n&#x3C;h1>환영합니다!&#x3C;/h1>\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># 로그인\n\n&#x3C;form method=<span class=\"hljs-string\">\"POST\"</span>>\n    { csrf_token }\n    { form.<span class=\"hljs-property\">as_p</span> }\n    &#x3C;button type=<span class=\"hljs-string\">\"submit\"</span>>로그인&#x3C;/button>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ url 'signup' }\"</span>></span>계정이 없으신가요? 가입하기<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n&#x3C;/form>\n</code></pre>\n<p>새로운 signup.html 파일을 생성하고 아래 코드를 작성하세요:</p>\n<pre><code class=\"hljs language-js\"># 가입하기\n\n&#x3C;form method=<span class=\"hljs-string\">\"POST\"</span>>\n    { csrf_token }\n    { form.<span class=\"hljs-property\">as_p</span> }\n    &#x3C;button type=<span class=\"hljs-string\">\"submit\"</span>>가입하기&#x3C;/button>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{ url 'login' }\"</span>></span>이미 계정이 있으신가요?<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n&#x3C;/form>\n</code></pre>\n<h1>8. 테스팅 및 실행</h1>\n<div class=\"content-ad\"></div>\n<p>이제 Django Framework을 사용하여 애플리케이션의 기본 구조를 설정했으니, 앱을 테스트하고 실행하는 시간입니다. 다음 단계를 따라주세요:</p>\n<p>단계 1: 명령줄 인터페이스 열기</p>\n<p>명령줄 인터페이스를 열고 Django 프로젝트의 루트 디렉토리로 이동하세요.</p>\n<p>계속 진행하려면 myproject 폴더 내에서 터미널을 열고 다음 명령을 실행하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> makemigrations\npython manage.<span class=\"hljs-property\">py</span> migrate\n</code></pre>\n<p>Step 2: 서버 시작하기:</p>\n<p>서버를 시작하려면 다음 명령을 명령줄 인터페이스에서 실행하세요:</p>\n<pre><code class=\"hljs language-js\">python manage.<span class=\"hljs-property\">py</span> runserver\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 명령을 사용하면 Django 개발 서버가 시작됩니다.</p>\n<p>단계 3: 테스트</p>\n<p>서버를 실행한 후 <a href=\"http://127.0.0.1:8000/\" rel=\"nofollow\" target=\"_blank\">http://127.0.0.1:8000/</a> 에서 프로젝트 인터페이스에 액세스합니다.</p>\n<p>어느 브라우저를 열어서 <a href=\"http://127.0.0.1:8000/\" rel=\"nofollow\" target=\"_blank\">http://127.0.0.1:8000/</a> URL 로 이동하면 웹 사이트의 홈페이지가 다음과 같이 보입니다:</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_1.png\" alt=\"확인 페이지\"></p>\n<p>로그인 페이지:</p>\n<p><img src=\"/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_2.png\" alt=\"로그인 페이지\"></p>\n<p>가입 페이지:</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-DjangoAuthUserSignupandLogin_3.png\" alt=\"이미지\"></p>\n<p>전체 라이브 데모를 확인해보세요:</p>\n<h1>결론</h1>\n<p>이 블로그 포스트에서는 Django와 HTML 폼을 사용하여 사용자 로그인 및 가입 기능을 구현하는 방법을 살펴보았습니다. Django 프로젝트 설정부터 템플릿 디자인 및 뷰와 폼 구현까지 필요한 단계를 다루었습니다. 제공된 자원과 참고 자료를 따라하면 Django 애플리케이션에서 사용자 인증 프로세스를 더욱 맞춤화하고 향상시킬 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>웹 애플리케이션의 사용자 인증은 매우 중요한 요소입니다. 사용자 데이터를 보호하기 위해 보안을 우선시하고 최상의 방법을 따르는 것이 중요합니다. Django와 Bootstrap을 사용하면 견고한 보안 조치를 유지하면서도 매끄러운 사용자 경험을 만들 수 있습니다.</p>\n<p>코딩 즐기세요!</p>\n<p>개발 지식을 공유하는 제 열정을 지원하고자 Buy Me a Coffee로 기부를 부탁드립니다. 여러분의 기부로 저는 가치 있는 콘텐츠와 자료를 만들 수 있습니다. 지원해 주셔서 감사합니다!</p>\n<p>이 블로그에서 제시된 정보에 대한 질문이나 의견이 있으면 언제든지 연락해 주세요. 다시 한번 읽어 주셔서 감사합니다!</p>\n<div class=\"content-ad\"></div>\n<h1>자료</h1>\n<ul>\n<li>Django 프레임워크 문서</li>\n<li>Django AuthenticationForm</li>\n<li>Django UserCreationForm</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}