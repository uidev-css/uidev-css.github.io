{"pageProps":{"post":{"title":"효과적인 Dart 2024년 최신 다트 관용구 작성하기","description":"","date":"2024-06-21 20:32","slug":"2024-06-21-EffectiveDartWritingIdiomaticDartCode","content":"\n# 깨끗하고 효율적이며 관용적인 다트 코드 작성하는 방법\n\n유지보수가 간편하고 성능이 우수한 애플리케이션을 만들기 위해 깨끗하고 효율적이며 관용적인 다트 코드를 작성하는 것은 중요합니다. 다트는 플러터 애플리케이션 등을 만드는 데 사용되는 다재다능한 언어로, 올바르게 활용하면 코드 품질을 크게 향상시킬 수 있습니다. 이 안내서는 가장 좋은 관행, 고급 언어 기능 및 피해야 할 일반적인 함정을 다루어 관용적인 다트 코드를 작성하는 데 도움이 됩니다.\n\n![이미지](/assets/img/2024-06-21-EffectiveDartWritingIdiomaticDartCode_0.png)\n\n# 1. 널 안전성 활용하기\n\n<div class=\"content-ad\"></div>\n\n# 널 안전성이란 무엇인가요?\n\n널 안전성이란 Dart의 특성으로, 모든 유형을 기본적으로 null이 아닌 값으로 만들어 널 오류를 피하도록 도와줍니다. 변수를 명시적으로 nullable하게 표시해야 합니다. ? 구문을 사용합니다.\n\n# 예시\n\n```js\nString? name;\nname = 'Dart';\n```\n\n<div class=\"content-ad\"></div>\n\n# 2. Final 및 Const 사용 선호\n\n# Final 및 Const를 사용해야 하는 경우\n\n- Final: 한 번 초기화된 후에 변경되지 않는 변수에 대해 final을 사용합니다.\n- Const: 컴파일 시간 상수에 대해 const를 사용합니다.\n\n# 예제\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nval greeting: String = \"Hello\"\nconst val pi: Double = 3.14159\n```\n\n# 3. Collection if 및 Spread 연산자 사용하기\n\n# 리스트 생성 향상\n\nDart의 collection if와 spread 연산자(`...`와 `...?`)를 사용하면 더 유연하고 가독성이 좋은 리스트 생성이 가능합니다.\n\n<div class=\"content-ad\"></div>\n\n# 예제\n\n```js\nvar isLoggedIn = true;\nvar items = [\"홈\", isLoggedIn ? \"프로필\" : \"\", \"설정\"];\n\nvar extraItems = [\"도움말\", \"로그아웃\"];\nvar allItems = [\"홈\", ...extraItems, \"설정\"];\n```\n\n# 4. 확장에 대해 긍정적으로 생각하세요\n\n# 기능 확장\n\n<div class=\"content-ad\"></div>\n\nDart의 확장은 소스 코드를 수정하지 않고 기존 라이브러리와 클래스에 기능을 추가할 수 있도록 해줍니다.\n\n# 예시\n\n```js\nextension StringExtension on String {\n  String get reversed {\n    return split('').reversed.join('');\n  }\n}\n\nvoid main() {\n  print('hello'.reversed); // prints 'olleh'\n}\n```\n\n# 5. 믹스인의 힘을 활용하세요\n\n<div class=\"content-ad\"></div>\n\n# 코드 재사용\n\n믹스인은 클래스의 코드를 여러 클래스 계층 구조에서 재사용하는 방법으로, 여러 원본에서 메서드와 속성을 섞어 사용할 수 있도록합니다.\n\n# 예시\n\n```js\nmixin Fly {\n  void fly() => print('날기');\n}\n\nmixin Swim {\n  void swim() => print('수영');\n}\n\nclass Duck with Fly, Swim {}\n\nvoid main() {\n  var duck = Duck();\n  duck.fly();\n  duck.swim();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 6. 함수 유형에 대한 Typedef 활용\n\n# 함수 시그니처 간단히하기\n\nTypedef를 사용하면 함수 시그니처를 간단히할 수 있고 코드 가독성을 향상시킬 수 있습니다.\n\n# 예제\n\n<div class=\"content-ad\"></div>\n\n```js\ntypedef IntBinaryOperation = int Function(int, int);\n\nint add(int a, int b) => a + b;\nint subtract(int a, int b) => a - b;\n\nvoid main() {\n  IntBinaryOperation operation;\n\n  operation = add;\n  print(operation(3, 4)); // 7 출력\n\n  operation = subtract;\n  print(operation(3, 4)); // -1 출력\n}\n```\n\n# 7. 효과적인 Dart 가이드라인을 따르세요\n\n# 코드 일관성\n\nGoogle의 효과적인 Dart 가이드라인은 일관성 있는 Dart 코드를 작성하기 위한 포괄적인 권장 사항을 제공합니다. 이 가이드라인은 네이밍 규칙부터 문서화와 디자인 원칙까지 모든 것을 다룹니다.\n\n<div class=\"content-ad\"></div>\n\n# 예시\n\n- 네이밍: 변수, 매개변수 및 함수 이름에는 카멜케이스를 사용하십시오. 클래스 이름에는 UpperCamelCase를 사용하십시오.\n- 문서화: 공개 API에 대한 명확하고 간결한 문서를 제공하기 위해 ///를 사용하십시오.\n\n```js\n/// 이 함수는 두 숫자를 더합니다.\nint add(int a, int b) => a + b;\n```\n\n# 8. 오류를 공손하게 처리하기\n\n<div class=\"content-ad\"></div>\n\n# 예외 처리 사용하기\n\nDart는 예외를 사용하여 견고한 오류 처리 메커니즘을 제공합니다. 항상 예외를 잡고 정상적으로 처리하세요.\n\n# 예시\n\n```js\ntry {\n  var result = riskyOperation();\n  print(result);\n} catch (e) {\n  print('오류가 발생했습니다: $e');\n}\n\nint riskyOperation() {\n  throw Exception('문제가 발생했습니다');\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 9. async 및 await을 사용하여 성능 최적화\n\n# 비동기 프로그래밍\n\nDart의 async 및 await 키워드는 비동기 프로그래밍을 간단하고 코드를 더 읽기 쉽고 유지보수하기 쉽게 만듭니다.\n\n# 예시\n\n<div class=\"content-ad\"></div>\n\n```js\nFuture<void> fetchData() async {\n  var data = await fetchDataFromServer();\n  print(data);\n}\n\nFuture<String> fetchDataFromServer() async {\n  // 네트워크 지연을 시뮬레이션합니다.\n  await Future.delayed(Duration(seconds: 2));\n  return '데이터 가져오기 완료';\n}\n```\n\n# 10. 흔한 함정 피하기\n\n# 흔한 문제점\n\n- 사용되지 않는 Imports: 코드를 깨끗하게 유지하기 위해 사용되지 않는 imports를 제거합니다.\n- Dynamic 남용: 타입 체크를 우회하고 런타임 오류를 유발할 수 있기 때문에, 꼭 필요한 경우를 제외하고 dynamic 사용을 피하세요.\n\n<div class=\"content-ad\"></div>\n\n# 예시\n\n```js\n// 이렇게 피하세요\ndynamic foo = 'bar';\n\n// 이렇게 선호하세요\nString foo = 'bar';\n```\n\n# 결론\n\n다트 언어의 강력한 기능을 활용하고 최상의 관행을 준수하며 흔히 하는 실수를 피함으로써 관용적인 다트 코드를 작성할 수 있습니다. 널 안전성, final 및 const, 확장(extensions), mixin, 그리고 기타 고급 언어 기능을 활용하여 깔끔하고 효율적이며 유지보수가 용이한 다트 코드를 작성할 수 있습니다. 이러한 지침을 따르고 지속적으로 코딩 관행을 개선하여 더 효과적인 다트 개발자가 되세요. 즐거운 코딩하세요!\n","ogImage":{"url":"/assets/img/2024-06-21-EffectiveDartWritingIdiomaticDartCode_0.png"},"coverImage":"/assets/img/2024-06-21-EffectiveDartWritingIdiomaticDartCode_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>깨끗하고 효율적이며 관용적인 다트 코드 작성하는 방법</h1>\n<p>유지보수가 간편하고 성능이 우수한 애플리케이션을 만들기 위해 깨끗하고 효율적이며 관용적인 다트 코드를 작성하는 것은 중요합니다. 다트는 플러터 애플리케이션 등을 만드는 데 사용되는 다재다능한 언어로, 올바르게 활용하면 코드 품질을 크게 향상시킬 수 있습니다. 이 안내서는 가장 좋은 관행, 고급 언어 기능 및 피해야 할 일반적인 함정을 다루어 관용적인 다트 코드를 작성하는 데 도움이 됩니다.</p>\n<p><img src=\"/assets/img/2024-06-21-EffectiveDartWritingIdiomaticDartCode_0.png\" alt=\"이미지\"></p>\n<h1>1. 널 안전성 활용하기</h1>\n<div class=\"content-ad\"></div>\n<h1>널 안전성이란 무엇인가요?</h1>\n<p>널 안전성이란 Dart의 특성으로, 모든 유형을 기본적으로 null이 아닌 값으로 만들어 널 오류를 피하도록 도와줍니다. 변수를 명시적으로 nullable하게 표시해야 합니다. ? 구문을 사용합니다.</p>\n<h1>예시</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">String</span>? name;\nname = <span class=\"hljs-string\">'Dart'</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>2. Final 및 Const 사용 선호</h1>\n<h1>Final 및 Const를 사용해야 하는 경우</h1>\n<ul>\n<li>Final: 한 번 초기화된 후에 변경되지 않는 변수에 대해 final을 사용합니다.</li>\n<li>Const: 컴파일 시간 상수에 대해 const를 사용합니다.</li>\n</ul>\n<h1>예제</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> greeting: String = <span class=\"hljs-string\">\"Hello\"</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">val</span> pi: <span class=\"hljs-built_in\">Double</span> = <span class=\"hljs-number\">3.14159</span>\n</code></pre>\n<h1>3. Collection if 및 Spread 연산자 사용하기</h1>\n<h1>리스트 생성 향상</h1>\n<p>Dart의 collection if와 spread 연산자(<code>...</code>와 <code>...?</code>)를 사용하면 더 유연하고 가독성이 좋은 리스트 생성이 가능합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>예제</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> isLoggedIn = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">var</span> items = [<span class=\"hljs-string\">\"홈\"</span>, isLoggedIn ? <span class=\"hljs-string\">\"프로필\"</span> : <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"설정\"</span>];\n\n<span class=\"hljs-keyword\">var</span> extraItems = [<span class=\"hljs-string\">\"도움말\"</span>, <span class=\"hljs-string\">\"로그아웃\"</span>];\n<span class=\"hljs-keyword\">var</span> allItems = [<span class=\"hljs-string\">\"홈\"</span>, ...extraItems, <span class=\"hljs-string\">\"설정\"</span>];\n</code></pre>\n<h1>4. 확장에 대해 긍정적으로 생각하세요</h1>\n<h1>기능 확장</h1>\n<div class=\"content-ad\"></div>\n<p>Dart의 확장은 소스 코드를 수정하지 않고 기존 라이브러리와 클래스에 기능을 추가할 수 있도록 해줍니다.</p>\n<h1>예시</h1>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">StringExtension</span> on <span class=\"hljs-title class_\">String</span> {\n  <span class=\"hljs-title class_\">String</span> get reversed {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">''</span>).<span class=\"hljs-property\">reversed</span>.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">''</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'hello'</span>.<span class=\"hljs-property\">reversed</span>); <span class=\"hljs-comment\">// prints 'olleh'</span>\n}\n</code></pre>\n<h1>5. 믹스인의 힘을 활용하세요</h1>\n<div class=\"content-ad\"></div>\n<h1>코드 재사용</h1>\n<p>믹스인은 클래스의 코드를 여러 클래스 계층 구조에서 재사용하는 방법으로, 여러 원본에서 메서드와 속성을 섞어 사용할 수 있도록합니다.</p>\n<h1>예시</h1>\n<pre><code class=\"hljs language-js\">mixin <span class=\"hljs-title class_\">Fly</span> {\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fly</span>() => <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'날기'</span>);\n}\n\nmixin <span class=\"hljs-title class_\">Swim</span> {\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span>() => <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'수영'</span>);\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Duck</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title class_\">Fly</span>, <span class=\"hljs-title class_\">Swim</span> {}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> duck = <span class=\"hljs-title class_\">Duck</span>();\n  duck.<span class=\"hljs-title function_\">fly</span>();\n  duck.<span class=\"hljs-title function_\">swim</span>();\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>6. 함수 유형에 대한 Typedef 활용</h1>\n<h1>함수 시그니처 간단히하기</h1>\n<p>Typedef를 사용하면 함수 시그니처를 간단히할 수 있고 코드 가독성을 향상시킬 수 있습니다.</p>\n<h1>예제</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">typedef <span class=\"hljs-title class_\">IntBinaryOperation</span> = int <span class=\"hljs-title class_\">Function</span>(int, int);\n\nint <span class=\"hljs-title function_\">add</span>(int a, int b) => a + b;\nint <span class=\"hljs-title function_\">subtract</span>(int a, int b) => a - b;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title class_\">IntBinaryOperation</span> operation;\n\n  operation = add;\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">operation</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// 7 출력</span>\n\n  operation = subtract;\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">operation</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">// -1 출력</span>\n}\n</code></pre>\n<h1>7. 효과적인 Dart 가이드라인을 따르세요</h1>\n<h1>코드 일관성</h1>\n<p>Google의 효과적인 Dart 가이드라인은 일관성 있는 Dart 코드를 작성하기 위한 포괄적인 권장 사항을 제공합니다. 이 가이드라인은 네이밍 규칙부터 문서화와 디자인 원칙까지 모든 것을 다룹니다.</p>\n<div class=\"content-ad\"></div>\n<h1>예시</h1>\n<ul>\n<li>네이밍: 변수, 매개변수 및 함수 이름에는 카멜케이스를 사용하십시오. 클래스 이름에는 UpperCamelCase를 사용하십시오.</li>\n<li>문서화: 공개 API에 대한 명확하고 간결한 문서를 제공하기 위해 ///를 사용하십시오.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/// 이 함수는 두 숫자를 더합니다.</span>\nint <span class=\"hljs-title function_\">add</span>(int a, int b) => a + b;\n</code></pre>\n<h1>8. 오류를 공손하게 처리하기</h1>\n<div class=\"content-ad\"></div>\n<h1>예외 처리 사용하기</h1>\n<p>Dart는 예외를 사용하여 견고한 오류 처리 메커니즘을 제공합니다. 항상 예외를 잡고 정상적으로 처리하세요.</p>\n<h1>예시</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-title function_\">riskyOperation</span>();\n  <span class=\"hljs-title function_\">print</span>(result);\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'오류가 발생했습니다: $e'</span>);\n}\n\nint <span class=\"hljs-title function_\">riskyOperation</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Exception</span>(<span class=\"hljs-string\">'문제가 발생했습니다'</span>);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>9. async 및 await을 사용하여 성능 최적화</h1>\n<h1>비동기 프로그래밍</h1>\n<p>Dart의 async 및 await 키워드는 비동기 프로그래밍을 간단하고 코드를 더 읽기 쉽고 유지보수하기 쉽게 만듭니다.</p>\n<h1>예시</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">fetchData</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetchDataFromServer</span>();\n  <span class=\"hljs-title function_\">print</span>(data);\n}\n\n<span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">String</span>> <span class=\"hljs-title function_\">fetchDataFromServer</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-comment\">// 네트워크 지연을 시뮬레이션합니다.</span>\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Future</span>.<span class=\"hljs-title function_\">delayed</span>(<span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">seconds</span>: <span class=\"hljs-number\">2</span>));\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'데이터 가져오기 완료'</span>;\n}\n</code></pre>\n<h1>10. 흔한 함정 피하기</h1>\n<h1>흔한 문제점</h1>\n<ul>\n<li>사용되지 않는 Imports: 코드를 깨끗하게 유지하기 위해 사용되지 않는 imports를 제거합니다.</li>\n<li>Dynamic 남용: 타입 체크를 우회하고 런타임 오류를 유발할 수 있기 때문에, 꼭 필요한 경우를 제외하고 dynamic 사용을 피하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>예시</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이렇게 피하세요</span>\ndynamic foo = <span class=\"hljs-string\">'bar'</span>;\n\n<span class=\"hljs-comment\">// 이렇게 선호하세요</span>\n<span class=\"hljs-title class_\">String</span> foo = <span class=\"hljs-string\">'bar'</span>;\n</code></pre>\n<h1>결론</h1>\n<p>다트 언어의 강력한 기능을 활용하고 최상의 관행을 준수하며 흔히 하는 실수를 피함으로써 관용적인 다트 코드를 작성할 수 있습니다. 널 안전성, final 및 const, 확장(extensions), mixin, 그리고 기타 고급 언어 기능을 활용하여 깔끔하고 효율적이며 유지보수가 용이한 다트 코드를 작성할 수 있습니다. 이러한 지침을 따르고 지속적으로 코딩 관행을 개선하여 더 효과적인 다트 개발자가 되세요. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}