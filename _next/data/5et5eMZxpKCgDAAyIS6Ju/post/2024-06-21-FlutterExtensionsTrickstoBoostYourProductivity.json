{"pageProps":{"post":{"title":"Flutter 확장 프로그램 생산성을 높이는 7가지 꿀팁 ","description":"","date":"2024-06-21 21:39","slug":"2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity","content":"\n![이미지](/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png)\n\n플러터 코드가 정체되어 있는 기분이 들죠? 반복적인 보일러플레이트를 작성하거나 기존 클래스에 슈퍼파워를 추가하고 싶은가요? 그렇다면, 플러터 개발자 여러분, 확실하게 할 일을 해야 합니다! 약간의 마법 같은 힘을 담아줄 확장 함수로 여러분의 작업 흐름에 활력을 불어넣어 보세요! 이 안내서에서는 이러한 다재다능한 코드 챔피언들의 비밀을 밝혀내어 기존 유형을 확장하고 코드를 간소화하며 플러터 게임의 수준을 높이도록 도와줄 것입니다. 이 강력한 확장 기능을 통해 반복적인 수고를 벗어던지고 더 깔끔하고 표현력이 풍부한 코드의 세계를 받아들이세요!\n\n# A. BuildContext에 대한 Extension\n\n먼저, 확장 기능을 만들고 이 확장 기능이 BuildContext를 확장한다는 것을 확실히하고 메서드를 확장 기능에 넣으세요:\n\n<div class=\"content-ad\"></div>\n\n# 테이블 태그를 Markdown 형식으로 변경\n\n```js\nextension ContextExt on BuildContext {\n\n    // 여기에 EXT 함수를 넣으세요\n\n}\n```\n\n1. 테마에 쉽게 접근하기\n\n```js\n  Color get primaryColor => Theme.of(this).primaryColor;\n  Color get canvasColor => Theme.of(this).canvasColor;\n  Color get cardColor => Theme.of(this).cardColor;\n  Color get focusColor => Theme.of(this).focusColor;\n  Color get dialogBackgroundColor => Theme.of(this).dialogBackgroundColor;\n  Color get disabledColor => Theme.of(this).disabledColor;\n  Color get dividerColor => Theme.of(this).dividerColor;\n  Color get highlightColor => Theme.of(this).highlightColor;\n  Color get hintColor => Theme.of(this).hintColor;\n  Color get hoverColor => Theme.of(this).hoverColor;\n  Color get indicatorColor => Theme.of(this).indicatorColor;\n  Color get primaryDark => Theme.of(this).primaryColorDark;\n  Color get primaryLight => Theme.of(this).primaryColorLight;\n  Color get shadowColor => Theme.of(this).shadowColor;\n```\n\n2. MediaQuery에 쉽게 접근하기\n\n<div class=\"content-ad\"></div>\n\n```js\n  double get width => MediaQuery.of(this).size.width;\n  double get height => MediaQuery.of(this).size.height;\n  double get aspectRatio => MediaQuery.of(this).size.aspectRatio;\n  double get longestSide => MediaQuery.of(this).size.longestSide;\n  double get shortestSide => MediaQuery.of(this).size.shortestSide;\n  Orientation get orientation => MediaQuery.of(this).orientation;\n  EdgeInsets get padding => MediaQuery.of(this).padding;\n```\n\n3. SnackBar 표시하기\n\n```js\n  void showSnackBar(String message) {\n    if (!mounted) return;\n    final snackBar = SnackBar(\n      content: Text(message),\n      duration: const Duration(seconds: 3),\n    );\n    ScaffoldMessenger.of(this).showSnackBar(snackBar);\n  }\n```\n\n4. AlertDialog 표시하기\n\n<div class=\"content-ad\"></div>\n\n```js\n  void displayAlertDialog({\n    required String title,\n    required String content,\n    VoidCallback? onPositivePressed,\n    String positiveButtonText = 'OK',\n    VoidCallback? onNegativePressed,\n    String negativeButtonText = 'Cancel',\n  }) {\n    if (!mounted) return;\n    showDialog(\n      context: this,\n      builder: (BuildContext context) {\n        return AlertDialog(\n          title: Text(title),\n          content: Text(content),\n          actions: <Widget>[\n            TextButton(\n              onPressed: onNegativePressed ??\n                  () {\n                    Navigator.of(this).pop();\n                  },\n              child: Text(negativeButtonText),\n            ),\n            TextButton(\n              onPressed: onPositivePressed ??\n                  () {\n                    Navigator.of(this).pop();\n                  },\n              child: Text(positiveButtonText),\n            ),\n          ],\n        );\n      },\n    );\n  }\n```\n\n5. 방향 기반으로 위젯 작성하기\n\n```js\n  T orientationAction<T>({\n    required T Function() onPortrait,\n    required T Function() onLandscape,\n  }) {\n    if (MediaQuery.of(this).orientation == Orientation.landscape) {\n      return onLandscape();\n    }\n    return onPortrait();\n  }\n```\n\n<br>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*aFEZr6_WdUFq3-DRjnYm9g.gif\" />\n\n<div class=\"content-ad\"></div>\n\n# 위젯 확장\n\n위젯을 확장하려면 먼저 확장 프로젝트를 만들고 위젯에 적용하세요.\n\n```js\nextension WidgetExt on Widget {\n\n    // 여기에 확장 함수를 넣으세요\n\n}\n```\n\n- 위젯 확장하기\n\n<div class=\"content-ad\"></div>\n\n```js\n확장된확장({int flex = 1}) => Expanded(\n        flex: flex,\n        child: this,\n      );\n```\n\n2. 투명도 설정\n\n```js\n투명도설정(double val) => Opacity(\n        opacity: val,\n        child: this,\n      );\n```\n\n3. Padding 추가하기\n\n<div class=\"content-ad\"></div>\n\n```js\nPadding withPadding(EdgeInsets padding) => Padding(\n        padding: padding,\n        child: this,\n      );\n```\n\n4. Wrap with SizedBox\n\n```js\nSizedBox box({double? width, double? height}) =>\n      SizedBox(width: width, height: height, child: this);\n```\n\n5. Centerize It!\n\n<div class=\"content-ad\"></div>\n\n```js\n  Center center() => Center(\n    child: this,\n  );\n```\n\n6. 클릭 가능하게 만들기\n\n```js\nWidget onClick(Function() onClick) => InkWell(\n        onTap: onClick,\n        child: this,\n      );\n```\n\n7. 회전하기!\n\n<div class=\"content-ad\"></div>\n\n```js\nRotatedBox rotate(int quarterTurns) => RotatedBox(\n  quarterTurns: quarterTurns,\n  child: this,\n);\n```\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*4Wh8PWVfCj2Jf3wlfSELYA.gif)\n\n# C. Extension on String\n\n먼저 확장 기능을 만들고 문자열을 확장하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nextension StringExt on String {\n\n  // 여기에 EXT 함수 추가하세요\n\n}\n```\n\n- 텍스트 위젯으로 변환\n\n```js\nText get text => Text(this);\n```\n\n2. 매치해 보세요!\n\n<div class=\"content-ad\"></div>\n\n```js\n// 8자리 문자, 소문자, 대문자, 숫자를 포함해야 함\nbool isValidPassword() {\n  return RegExp(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}$').hasMatch(this);\n}\n\nbool isValidEmail() {\n  return RegExp(r'^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$').hasMatch(this);\n}\n\nbool isURL() {\n  // 간단한 URL 패턴에 대한 정규 표현식\n  RegExp urlRegExp = RegExp(\n    r'^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$',\n    caseSensitive: false,\n    multiLine: false,\n  );\n\n  return urlRegExp.hasMatch(this);\n}\n```\n\n3. 기타 내용\n\n```js\nString append(String other) => '$this$other';\n\nString get capitalizeFirstLetter =>\n    this.isNotEmpty ? this[0].toUpperCase() + this.substring(1) : this;\n\nString get removeWhitespace => this.replaceAll(RegExp(r'\\s+'), '');\n\n// 형식: yyyy-MM-dd HH:mm:ss\nDateTime toDateTime() {\n  return DateTime.parse(this);\n}\n```\n\n# D. Num 확장\n\n<div class=\"content-ad\"></div>\n\n먼저 Extension을 만들고 num을 확장하세요.\n\n```js\nextension NumExt on num {\n\n    // 여기에 EXT 함수를 넣어주세요\n\n}\n```\n\n- 수직 및 수평 간격을 간단하게 만듭니다.\n\n```js\nSizedBox get heightBox => SizedBox(\n        height: toDouble(),\n      );\n\nSizedBox get widthBox => SizedBox(\n        width: toDouble(),\n      );\n```\n\n<div class=\"content-ad\"></div>\n\n2. 패딩으로 변환\n\n```js\nEdgeInsets get allPadding => EdgeInsets.all(toDouble());\n\nEdgeInsets get verticalPadding => EdgeInsets.symmetric(vertical: toDouble());\n\nEdgeInsets get horizontalPadding => EdgeInsets.symmetric(horizontal: toDouble());\n\nEdgeInsets get leftPadding => EdgeInsets.only(left: toDouble());\n\nEdgeInsets get rightPadding => EdgeInsets.only(right: toDouble());\n\nEdgeInsets get topPadding => EdgeInsets.only(top: toDouble());\n\nEdgeInsets get bottomPadding => EdgeInsets.only(bottom: toDouble());\n```\n\n3. 기간으로 변환\n\n```js\nDuration get microseconds => Duration(microseconds: toInt());\n\nDuration get milliseconds => Duration(milliseconds: toInt());\n\nDuration get seconds => Duration(seconds: toInt());\n\nDuration get minutes => Duration(minutes: toInt());\n\nDuration get hours => Duration(hours: toInt());\n\nDuration get days => Duration(days: toInt());\n```\n\n<div class=\"content-ad\"></div>\n\n# 기타\n\n- DateTime 확장\n\n```js\nextension DateTimeExt on DateTime {\n  bool isToday() {\n    final now = DateTime.now();\n    return day == now.day && month == now.month && year == now.year;\n  }\n\n  bool isYesterday() {\n    final now = DateTime.now();\n    final yesterday = DateTime(now.year, now.month, now.day - 1);\n    return day == yesterday.day &&\n        month == yesterday.month &&\n        year == yesterday.year;\n  }\n\n  // yyyy-mm-dd\n  String get stringFormat => toIso8601String().substring(0, 10);\n}\n```\n\n2. 파일 확장\n\n<div class=\"content-ad\"></div>\n\n```js\nextension FileExt on File {\n  Future<Uint8List?> toUint8List() async {\n    try {\n      List<int> bytes = await readAsBytes();\n      Uint8List uint8List = Uint8List.fromList(bytes);\n      return uint8List;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  bool isImageFile() {\n    final String extension = path.split('.').last.toLowerCase();\n    return ['jpg', 'jpeg', 'png', 'gif', 'bmp'].contains(extension);\n  }\n\n  bool isVideoFile() {\n    final String extension = path.split('.').last.toLowerCase();\n    return ['mp4', 'avi', 'mkv', 'mov', 'wmv', 'flv', 'webm'].contains(extension);\n  }\n\n  bool isAudioFile() {\n    final String extension = path.split('.').last.toLowerCase();\n    return ['mp3', 'wav', 'ogg', 'aac', 'flac', 'm4a', 'wma'].contains(extension);\n  }\n}\n```\n\n3. Scope Function Extension\n\n```js\nextension ScopeFunctionExt<T> on T {\n\n  // Do Something on The Object and returns Something\n  R map<R>(R Function(T) block) {\n    return block(this);\n  }\n\n  // Do Something on The Object and returns The Object\n  T apply(Function(T) block) {\n    block(this);\n    return this;\n  }\n}\n```\n\n플러터에서 확장 메서드에 대한 코드 팁을 보여드렸습니다. 생산성을 높이는 데 도움이 되는 내용일지 모릅니다. 만약 이 기사가 유익했다면 👏 박수를 보내주시고, 휴대폰 개발에 관한 다양한 기사를 확인하시려면 팔로우해주세요. 감사합니다. 계속해서 생산적이세요 🔥\n\n<div class=\"content-ad\"></div>\n\n아래는 제 GitHub에서 제 쿨한 프로젝트들을 확인해보세요:\n\n# 나와 소통하기:\n\n- Medium\n- GitHub\n- LinkedIn\n\n<div class=\"content-ad\"></div>\n\n# Stackademic\n\n끝까지 읽어 주셔서 감사합니다. 떠나기 전에:\n\n- 작가를 칭찬하고 팔로우해 주시면 감사하겠습니다! 👏\n- Twitter(X), LinkedIn, YouTube에서 팔로우해 주세요.\n- 세계적으로 프로그래밍 교육을 무료로 더 democra타이징하는 Stackademic.com 방문하기.\n","ogImage":{"url":"/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png"},"coverImage":"/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png\" alt=\"이미지\"></p>\n<p>플러터 코드가 정체되어 있는 기분이 들죠? 반복적인 보일러플레이트를 작성하거나 기존 클래스에 슈퍼파워를 추가하고 싶은가요? 그렇다면, 플러터 개발자 여러분, 확실하게 할 일을 해야 합니다! 약간의 마법 같은 힘을 담아줄 확장 함수로 여러분의 작업 흐름에 활력을 불어넣어 보세요! 이 안내서에서는 이러한 다재다능한 코드 챔피언들의 비밀을 밝혀내어 기존 유형을 확장하고 코드를 간소화하며 플러터 게임의 수준을 높이도록 도와줄 것입니다. 이 강력한 확장 기능을 통해 반복적인 수고를 벗어던지고 더 깔끔하고 표현력이 풍부한 코드의 세계를 받아들이세요!</p>\n<h1>A. BuildContext에 대한 Extension</h1>\n<p>먼저, 확장 기능을 만들고 이 확장 기능이 BuildContext를 확장한다는 것을 확실히하고 메서드를 확장 기능에 넣으세요:</p>\n<div class=\"content-ad\"></div>\n<h1>테이블 태그를 Markdown 형식으로 변경</h1>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">ContextExt</span> on <span class=\"hljs-title class_\">BuildContext</span> {\n\n    <span class=\"hljs-comment\">// 여기에 EXT 함수를 넣으세요</span>\n\n}\n</code></pre>\n<ol>\n<li>테마에 쉽게 접근하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title class_\">Color</span> get primaryColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">primaryColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get canvasColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">canvasColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get cardColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">cardColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get focusColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">focusColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get dialogBackgroundColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">dialogBackgroundColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get disabledColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">disabledColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get dividerColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">dividerColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get highlightColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">highlightColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get hintColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">hintColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get hoverColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">hoverColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get indicatorColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">indicatorColor</span>;\n  <span class=\"hljs-title class_\">Color</span> get primaryDark => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">primaryColorDark</span>;\n  <span class=\"hljs-title class_\">Color</span> get primaryLight => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">primaryColorLight</span>;\n  <span class=\"hljs-title class_\">Color</span> get shadowColor => <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">shadowColor</span>;\n</code></pre>\n<ol start=\"2\">\n<li>MediaQuery에 쉽게 접근하기</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">  double get width => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">size</span>.<span class=\"hljs-property\">width</span>;\n  double get height => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">size</span>.<span class=\"hljs-property\">height</span>;\n  double get aspectRatio => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">size</span>.<span class=\"hljs-property\">aspectRatio</span>;\n  double get longestSide => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">size</span>.<span class=\"hljs-property\">longestSide</span>;\n  double get shortestSide => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">size</span>.<span class=\"hljs-property\">shortestSide</span>;\n  <span class=\"hljs-title class_\">Orientation</span> get orientation => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">orientation</span>;\n  <span class=\"hljs-title class_\">EdgeInsets</span> get padding => <span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">padding</span>;\n</code></pre>\n<ol start=\"3\">\n<li>SnackBar 표시하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">showSnackBar</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> message</span>) {\n    <span class=\"hljs-keyword\">if</span> (!mounted) <span class=\"hljs-keyword\">return</span>;\n    final snackBar = <span class=\"hljs-title class_\">SnackBar</span>(\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-title class_\">Text</span>(message),\n      <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">seconds</span>: <span class=\"hljs-number\">3</span>),\n    );\n    <span class=\"hljs-title class_\">ScaffoldMessenger</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">showSnackBar</span>(snackBar);\n  }\n</code></pre>\n<ol start=\"4\">\n<li>AlertDialog 표시하기</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayAlertDialog</span>(<span class=\"hljs-params\">{\n    required <span class=\"hljs-built_in\">String</span> title,\n    required <span class=\"hljs-built_in\">String</span> content,\n    VoidCallback? onPositivePressed,\n    <span class=\"hljs-built_in\">String</span> positiveButtonText = <span class=\"hljs-string\">'OK'</span>,\n    VoidCallback? onNegativePressed,\n    <span class=\"hljs-built_in\">String</span> negativeButtonText = <span class=\"hljs-string\">'Cancel'</span>,\n  }</span>) {\n    <span class=\"hljs-keyword\">if</span> (!mounted) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">showDialog</span>(\n      <span class=\"hljs-attr\">context</span>: <span class=\"hljs-variable language_\">this</span>,\n      <span class=\"hljs-attr\">builder</span>: (<span class=\"hljs-title class_\">BuildContext</span> context) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">AlertDialog</span>(\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(title),\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-title class_\">Text</span>(content),\n          <span class=\"hljs-attr\">actions</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-title class_\">TextButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: onNegativePressed ??\n                  () {\n                    <span class=\"hljs-title class_\">Navigator</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">pop</span>();\n                  },\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(negativeButtonText),\n            ),\n            <span class=\"hljs-title class_\">TextButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: onPositivePressed ??\n                  () {\n                    <span class=\"hljs-title class_\">Navigator</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">pop</span>();\n                  },\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(positiveButtonText),\n            ),\n          ],\n        );\n      },\n    );\n  }\n</code></pre>\n<ol start=\"5\">\n<li>방향 기반으로 위젯 작성하기</li>\n</ol>\n<pre><code class=\"hljs language-js\">  T orientationAction&#x3C;T>({\n    required T <span class=\"hljs-title class_\">Function</span>() onPortrait,\n    required T <span class=\"hljs-title class_\">Function</span>() onLandscape,\n  }) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">MediaQuery</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-property\">orientation</span> == <span class=\"hljs-title class_\">Orientation</span>.<span class=\"hljs-property\">landscape</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">onLandscape</span>();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">onPortrait</span>();\n  }\n</code></pre>\n<br>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*aFEZr6_WdUFq3-DRjnYm9g.gif\">\n<div class=\"content-ad\"></div>\n<h1>위젯 확장</h1>\n<p>위젯을 확장하려면 먼저 확장 프로젝트를 만들고 위젯에 적용하세요.</p>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">WidgetExt</span> on <span class=\"hljs-title class_\">Widget</span> {\n\n    <span class=\"hljs-comment\">// 여기에 확장 함수를 넣으세요</span>\n\n}\n</code></pre>\n<ul>\n<li>위젯 확장하기</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">확장된확장({int flex = <span class=\"hljs-number\">1</span>}) => <span class=\"hljs-title class_\">Expanded</span>(\n        <span class=\"hljs-attr\">flex</span>: flex,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>,\n      );\n</code></pre>\n<ol start=\"2\">\n<li>투명도 설정</li>\n</ol>\n<pre><code class=\"hljs language-js\">투명도설정(double val) => <span class=\"hljs-title class_\">Opacity</span>(\n        <span class=\"hljs-attr\">opacity</span>: val,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>,\n      );\n</code></pre>\n<ol start=\"3\">\n<li>Padding 추가하기</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Padding</span> <span class=\"hljs-title function_\">withPadding</span>(<span class=\"hljs-title class_\">EdgeInsets</span> padding) => <span class=\"hljs-title class_\">Padding</span>(\n        <span class=\"hljs-attr\">padding</span>: padding,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>,\n      );\n</code></pre>\n<ol start=\"4\">\n<li>Wrap with SizedBox</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">SizedBox</span> <span class=\"hljs-title function_\">box</span>({double? width, double? height}) =>\n      <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">width</span>: width, <span class=\"hljs-attr\">height</span>: height, <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>);\n</code></pre>\n<ol start=\"5\">\n<li>Centerize It!</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title class_\">Center</span> <span class=\"hljs-title function_\">center</span>() => <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>,\n  );\n</code></pre>\n<ol start=\"6\">\n<li>클릭 가능하게 만들기</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-title class_\">Function</span>() onClick) => <span class=\"hljs-title class_\">InkWell</span>(\n        <span class=\"hljs-attr\">onTap</span>: onClick,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>,\n      );\n</code></pre>\n<ol start=\"7\">\n<li>회전하기!</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">RotatedBox</span> <span class=\"hljs-title function_\">rotate</span>(int quarterTurns) => <span class=\"hljs-title class_\">RotatedBox</span>(\n  <span class=\"hljs-attr\">quarterTurns</span>: quarterTurns,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-variable language_\">this</span>,\n);\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*4Wh8PWVfCj2Jf3wlfSELYA.gif\" alt=\"image\"></p>\n<h1>C. Extension on String</h1>\n<p>먼저 확장 기능을 만들고 문자열을 확장하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">StringExt</span> on <span class=\"hljs-title class_\">String</span> {\n\n  <span class=\"hljs-comment\">// 여기에 EXT 함수 추가하세요</span>\n\n}\n</code></pre>\n<ul>\n<li>텍스트 위젯으로 변환</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Text</span> get text => <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-variable language_\">this</span>);\n</code></pre>\n<ol start=\"2\">\n<li>매치해 보세요!</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 8자리 문자, 소문자, 대문자, 숫자를 포함해야 함</span>\nbool <span class=\"hljs-title function_\">isValidPassword</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">RegExp</span>(r<span class=\"hljs-string\">'^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}$'</span>).<span class=\"hljs-title function_\">hasMatch</span>(<span class=\"hljs-variable language_\">this</span>);\n}\n\nbool <span class=\"hljs-title function_\">isValidEmail</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">RegExp</span>(r<span class=\"hljs-string\">'^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$'</span>).<span class=\"hljs-title function_\">hasMatch</span>(<span class=\"hljs-variable language_\">this</span>);\n}\n\nbool <span class=\"hljs-title function_\">isURL</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 간단한 URL 패턴에 대한 정규 표현식</span>\n  <span class=\"hljs-title class_\">RegExp</span> urlRegExp = <span class=\"hljs-title class_\">RegExp</span>(\n    r<span class=\"hljs-string\">'^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$'</span>,\n    <span class=\"hljs-attr\">caseSensitive</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">multiLine</span>: <span class=\"hljs-literal\">false</span>,\n  );\n\n  <span class=\"hljs-keyword\">return</span> urlRegExp.<span class=\"hljs-title function_\">hasMatch</span>(<span class=\"hljs-variable language_\">this</span>);\n}\n</code></pre>\n<ol start=\"3\">\n<li>기타 내용</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">append</span>(<span class=\"hljs-title class_\">String</span> other) => <span class=\"hljs-string\">'$this$other'</span>;\n\n<span class=\"hljs-title class_\">String</span> get capitalizeFirstLetter =>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isNotEmpty</span> ? <span class=\"hljs-variable language_\">this</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">toUpperCase</span>() + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>) : <span class=\"hljs-variable language_\">this</span>;\n\n<span class=\"hljs-title class_\">String</span> get removeWhitespace => <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">replaceAll</span>(<span class=\"hljs-title class_\">RegExp</span>(r<span class=\"hljs-string\">'\\s+'</span>), <span class=\"hljs-string\">''</span>);\n\n<span class=\"hljs-comment\">// 형식: yyyy-MM-dd HH:mm:ss</span>\n<span class=\"hljs-title class_\">DateTime</span> <span class=\"hljs-title function_\">toDateTime</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DateTime</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-variable language_\">this</span>);\n}\n</code></pre>\n<h1>D. Num 확장</h1>\n<div class=\"content-ad\"></div>\n<p>먼저 Extension을 만들고 num을 확장하세요.</p>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">NumExt</span> on num {\n\n    <span class=\"hljs-comment\">// 여기에 EXT 함수를 넣어주세요</span>\n\n}\n</code></pre>\n<ul>\n<li>수직 및 수평 간격을 간단하게 만듭니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">SizedBox</span> get heightBox => <span class=\"hljs-title class_\">SizedBox</span>(\n        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-title function_\">toDouble</span>(),\n      );\n\n<span class=\"hljs-title class_\">SizedBox</span> get widthBox => <span class=\"hljs-title class_\">SizedBox</span>(\n        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-title function_\">toDouble</span>(),\n      );\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>패딩으로 변환</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">EdgeInsets</span> get allPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-title function_\">toDouble</span>());\n\n<span class=\"hljs-title class_\">EdgeInsets</span> get verticalPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">symmetric</span>(<span class=\"hljs-attr\">vertical</span>: <span class=\"hljs-title function_\">toDouble</span>());\n\n<span class=\"hljs-title class_\">EdgeInsets</span> get horizontalPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">symmetric</span>(<span class=\"hljs-attr\">horizontal</span>: <span class=\"hljs-title function_\">toDouble</span>());\n\n<span class=\"hljs-title class_\">EdgeInsets</span> get leftPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">only</span>(<span class=\"hljs-attr\">left</span>: <span class=\"hljs-title function_\">toDouble</span>());\n\n<span class=\"hljs-title class_\">EdgeInsets</span> get rightPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">only</span>(<span class=\"hljs-attr\">right</span>: <span class=\"hljs-title function_\">toDouble</span>());\n\n<span class=\"hljs-title class_\">EdgeInsets</span> get topPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">only</span>(<span class=\"hljs-attr\">top</span>: <span class=\"hljs-title function_\">toDouble</span>());\n\n<span class=\"hljs-title class_\">EdgeInsets</span> get bottomPadding => <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">only</span>(<span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-title function_\">toDouble</span>());\n</code></pre>\n<ol start=\"3\">\n<li>기간으로 변환</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Duration</span> get microseconds => <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">microseconds</span>: <span class=\"hljs-title function_\">toInt</span>());\n\n<span class=\"hljs-title class_\">Duration</span> get milliseconds => <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">milliseconds</span>: <span class=\"hljs-title function_\">toInt</span>());\n\n<span class=\"hljs-title class_\">Duration</span> get seconds => <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">seconds</span>: <span class=\"hljs-title function_\">toInt</span>());\n\n<span class=\"hljs-title class_\">Duration</span> get minutes => <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">minutes</span>: <span class=\"hljs-title function_\">toInt</span>());\n\n<span class=\"hljs-title class_\">Duration</span> get hours => <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">hours</span>: <span class=\"hljs-title function_\">toInt</span>());\n\n<span class=\"hljs-title class_\">Duration</span> get days => <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">days</span>: <span class=\"hljs-title function_\">toInt</span>());\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>기타</h1>\n<ul>\n<li>DateTime 확장</li>\n</ul>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">DateTimeExt</span> on <span class=\"hljs-title class_\">DateTime</span> {\n  bool <span class=\"hljs-title function_\">isToday</span>(<span class=\"hljs-params\"></span>) {\n    final now = <span class=\"hljs-title class_\">DateTime</span>.<span class=\"hljs-title function_\">now</span>();\n    <span class=\"hljs-keyword\">return</span> day == now.<span class=\"hljs-property\">day</span> &#x26;&#x26; month == now.<span class=\"hljs-property\">month</span> &#x26;&#x26; year == now.<span class=\"hljs-property\">year</span>;\n  }\n\n  bool <span class=\"hljs-title function_\">isYesterday</span>(<span class=\"hljs-params\"></span>) {\n    final now = <span class=\"hljs-title class_\">DateTime</span>.<span class=\"hljs-title function_\">now</span>();\n    final yesterday = <span class=\"hljs-title class_\">DateTime</span>(now.<span class=\"hljs-property\">year</span>, now.<span class=\"hljs-property\">month</span>, now.<span class=\"hljs-property\">day</span> - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span> day == yesterday.<span class=\"hljs-property\">day</span> &#x26;&#x26;\n        month == yesterday.<span class=\"hljs-property\">month</span> &#x26;&#x26;\n        year == yesterday.<span class=\"hljs-property\">year</span>;\n  }\n\n  <span class=\"hljs-comment\">// yyyy-mm-dd</span>\n  <span class=\"hljs-title class_\">String</span> get stringFormat => <span class=\"hljs-title function_\">toIso8601String</span>().<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n}\n</code></pre>\n<ol start=\"2\">\n<li>파일 확장</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">FileExt</span> on <span class=\"hljs-title class_\">File</span> {\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Uint8List</span>?> <span class=\"hljs-title function_\">toUint8List</span>() <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-title class_\">List</span>&#x3C;int> bytes = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">readAsBytes</span>();\n      <span class=\"hljs-title class_\">Uint8List</span> uint8List = <span class=\"hljs-title class_\">Uint8List</span>.<span class=\"hljs-title function_\">fromList</span>(bytes);\n      <span class=\"hljs-keyword\">return</span> uint8List;\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n  }\n\n  bool <span class=\"hljs-title function_\">isImageFile</span>(<span class=\"hljs-params\"></span>) {\n    final <span class=\"hljs-title class_\">String</span> extension = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'.'</span>).<span class=\"hljs-property\">last</span>.<span class=\"hljs-title function_\">toLowerCase</span>();\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'jpg'</span>, <span class=\"hljs-string\">'jpeg'</span>, <span class=\"hljs-string\">'png'</span>, <span class=\"hljs-string\">'gif'</span>, <span class=\"hljs-string\">'bmp'</span>].<span class=\"hljs-title function_\">contains</span>(extension);\n  }\n\n  bool <span class=\"hljs-title function_\">isVideoFile</span>(<span class=\"hljs-params\"></span>) {\n    final <span class=\"hljs-title class_\">String</span> extension = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'.'</span>).<span class=\"hljs-property\">last</span>.<span class=\"hljs-title function_\">toLowerCase</span>();\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'mp4'</span>, <span class=\"hljs-string\">'avi'</span>, <span class=\"hljs-string\">'mkv'</span>, <span class=\"hljs-string\">'mov'</span>, <span class=\"hljs-string\">'wmv'</span>, <span class=\"hljs-string\">'flv'</span>, <span class=\"hljs-string\">'webm'</span>].<span class=\"hljs-title function_\">contains</span>(extension);\n  }\n\n  bool <span class=\"hljs-title function_\">isAudioFile</span>(<span class=\"hljs-params\"></span>) {\n    final <span class=\"hljs-title class_\">String</span> extension = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'.'</span>).<span class=\"hljs-property\">last</span>.<span class=\"hljs-title function_\">toLowerCase</span>();\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'mp3'</span>, <span class=\"hljs-string\">'wav'</span>, <span class=\"hljs-string\">'ogg'</span>, <span class=\"hljs-string\">'aac'</span>, <span class=\"hljs-string\">'flac'</span>, <span class=\"hljs-string\">'m4a'</span>, <span class=\"hljs-string\">'wma'</span>].<span class=\"hljs-title function_\">contains</span>(extension);\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Scope Function Extension</li>\n</ol>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">ScopeFunctionExt</span>&#x3C;T> on T {\n\n  <span class=\"hljs-comment\">// Do Something on The Object and returns Something</span>\n  R map&#x3C;R>(R <span class=\"hljs-title class_\">Function</span>(T) block) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">block</span>(<span class=\"hljs-variable language_\">this</span>);\n  }\n\n  <span class=\"hljs-comment\">// Do Something on The Object and returns The Object</span>\n  T <span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">Function</span>(T) block</span>) {\n    <span class=\"hljs-title function_\">block</span>(<span class=\"hljs-variable language_\">this</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n}\n</code></pre>\n<p>플러터에서 확장 메서드에 대한 코드 팁을 보여드렸습니다. 생산성을 높이는 데 도움이 되는 내용일지 모릅니다. 만약 이 기사가 유익했다면 👏 박수를 보내주시고, 휴대폰 개발에 관한 다양한 기사를 확인하시려면 팔로우해주세요. 감사합니다. 계속해서 생산적이세요 🔥</p>\n<div class=\"content-ad\"></div>\n<p>아래는 제 GitHub에서 제 쿨한 프로젝트들을 확인해보세요:</p>\n<h1>나와 소통하기:</h1>\n<ul>\n<li>Medium</li>\n<li>GitHub</li>\n<li>LinkedIn</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>Stackademic</h1>\n<p>끝까지 읽어 주셔서 감사합니다. 떠나기 전에:</p>\n<ul>\n<li>작가를 칭찬하고 팔로우해 주시면 감사하겠습니다! 👏</li>\n<li>Twitter(X), LinkedIn, YouTube에서 팔로우해 주세요.</li>\n<li>세계적으로 프로그래밍 교육을 무료로 더 democra타이징하는 Stackademic.com 방문하기.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}