{"pageProps":{"posts":[{"title":"Flutter의 Expanded vs Flexible 위젯 사용법 - 차이를 알아보자","description":"","date":"2024-06-21 21:58","slug":"2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage","content":"\n\n플러터 레이아웃 내에서 공간을 효율적으로 관리하는 것은 시각적으로 매력적이고 반응이 뛰어난 사용자 인터페이스를 만드는 데 필수적인 요소입니다. 우리 플러터 개발자로서는 종종 사용 가능한 공간을 다양한 위젯과 구성 요소 사이에 분배하는 도전에 직면하곤 합니다. 이럴 때 공간 할당을 어떻게 제어하는지 이해하는 것이 원하는 디자인과 사용자 경험을 달성하는 데 중요합니다.\n\n플러터 세계에서 두 가지 강력한 위젯이 우리를 돕습니다: 확장 위젯(Expanded widget)과 유연한 위젯(Flexible widget). 이러한 도구들은 사용 가능한 공간의 분배를 정밀하게 제어할 수 있는 수단을 제공하여 UI 구성 요소가 의도한 대로 표시되도록 보장합니다.\n\n이 글에서는 확장 위젯과 유연한 위젯의 세세한 차이를 파헤치고, 각각을 언제 사용해야 하는지를 도와드릴 것입니다. 이 탐구를 마치면, 이 위젯들을 효과적으로 활용하여 동적이고 반응성 있는 플러터 레이아웃을 만드는 방법에 대해 명확하게 이해하게 될 것입니다.\n\n# 확장 위젯 이해하기\n\n<div class=\"content-ad\"></div>\n\nExpanded 위젯은 Flutter에서 행과 열 내에서 공간을 관리하는 데 중요한 요소입니다. 주요 역할은 자식 위젯이 행 또는 열의 주축을 따라 가능한 한 많은 공간을 차지할 수 있도록 하는 것입니다. 다시 말하면, Expanded 위젯은 자식이 부모 위젯 내의 남은 공간을 채우도록 확장하는 역할을 합니다.\n\nColumns와 Rows에서 Expanded가 작동하는 방식\n\nColumn이나 Row 내에서 사용될 때, Expanded 위젯은 레이아웃 과정 중에 작용합니다. 주축을 따라 사용 가능한 공간을 검사하고 해당 공간을 자식 위젯에게 flex 팩터를 기준으로 할당합니다. Flex 팩터는 다른 flex 팩터를 갖는 다른 자식들에 비해 자식 위젯이 차지해야 할 공간을 결정합니다.\n\n간단히 설명하면 다음과 같습니다:\n- Column이나 Row의 주축을 따라 사용 가능한 전체 공간이 결정됩니다.\n- 각각의 Expanded 위젯을 갖는 자식은 flex 팩터에 따라 이 공간의 일부를 할당받습니다.\n- 남은 공간이 있다면, Expanded 위젯 없는 자식들 사이에 분배됩니다.\n\n<div class=\"content-ad\"></div>\n\n확장 위젯을 사용한 예시\n\n이 예시에서는 세 개의 자식을 가진 열이 있습니다. 중간 자식은 확장 위젯을 사용하여 가능한 수직 공간을 모두 채우도록 보장하고, 다른 자식들은 원래 높이를 유지합니다.\n\n확장 위젯 사용 시기\n\n확장 위젯은 다음 시나리오에서 특히 유용합니다:\n1. 동등한 분배: 특정 자식에게 행이나 열 내에서 가능한 공간을 동등하게 분배하고 싶을 때.\n2. 반응형 레이아웃: 반응형 레이아웃을 구축할 때, 확장을 사용하면 위젯이 화면 크기에 따라 적절하게 확장 또는 축소될 수 있습니다.\n3. 유동적 UI: 콘텐츠나 가능한 공간에 따라 크기를 동적으로 조정해야 하는 특정 위젯을 사용하여 유동적인 사용자 인터페이스를 만드는 경우.\n\n<div class=\"content-ad\"></div>\n\n확장 위젯이 작동하는 방식과 적절한 사용 사례를 이해하면 Flutter 레이아웃을 유연하게 만들고 시각적으로 매력적으로 만들 수 있습니다.\n\n# 유연한 위젯 이해\n\nFlexible 위젯은 확장 위젯과 유사한 목적을 가진 Flutter 레이아웃에서 또 다른 가치 있는 도구입니다. 그러나 보다 유연성과 공간 분배를 제어하는 능력을 제공합니다. 주요 목적은 행과 열 내에서 사용 가능한 공간을 자식 위젯에 할당하는 방식을 제어하는 것입니다.\n\n유연 위젯이 Flex 팩터와 함께 작동하는 방법\n\n<div class=\"content-ad\"></div>\n\n유연한 위젯은 각 자식에게 유연한 요인을 할당함으로써 작동합니다. 이 유연한 요인은 다른 유연한 요인을 갖는 다른 자식과 비교하여 각 자식이 차지해야 할 공간을 결정합니다. 더 높은 유연한 요인은 해당 자식이 사용 가능한 공간의 더 많은 부분을 받게 됨을 의미합니다.\n\n다음은 유연 위젯이 유연한 요인과 함께 작동하는 방식입니다:\n- 행 또는 열의 주요 축을 따라 사용 가능한 총 공간이 계산됩니다.\n- 유연한 위젯을 갖는 각 자식에게 유연한 요인에 기반한 공간이 할당됩니다.\n- 남은 공간이 있는 경우 각 자식에 대해 해당하는 유연한 요인에 비례하여 나누어져 나머지 공간이 배분됩니다.\n\n유연 위젯을 사용하는 예시\n\n이 예시에서는 서로 다른 유연한 요인을 가진 세 개의 자식을 포함한 행이 있습니다. 유연한 위젯으로 래핑된 각 자식은 다른 자식보다 더 많은 공간을 차지하는 3의 유연한 요인을 가진 자식이 있으며, 따라서 공간이 비례적으로 분배됩니다.\n\n<div class=\"content-ad\"></div>\n\n유연한 위젯을 사용하는 시점\n\n특정 상황에서 Expanded 위젯 대신 유연한 위젯을 선호하는 경우가 있습니다:\n1. 세밀한 제어: 서로 다른 플렉스 팩터를 가진 자식 요소들 사이에서 공간 분배에 더 정확한 제어가 필요한 경우. 유연한 위젯을 사용하면 공간 배분의 정확한 비율을 지정할 수 있습니다.\n2. 동적 레이아웃: 다양한 조건이나 사용자 상호작용에 따라 공간 분배가 조정되는 동적 레이아웃을 만들고 싶을 때.\n3. 혼합 레이아웃: 균일하게 확장되어야 하는 위젯과 비례적으로 확장되어야 하는 다른 위젯이 혼합된 경우, 유연한 위젯은 유연한 선택지입니다.\n\n요약하면, 유연한 위젯은 각 자식 요소마다 개별적인 플렉스 팩터를 설정하여 공간 분배를 보다 세밀하게 제어할 수 있게 해줍니다. 플러터 레이아웃에 정확하고 유연한 제어가 필요한 경우 특히 유용하며, 특정 상황에서 Expanded 위젯에 대한 강력한 대안이 됩니다.\n\n# 주요 차이점\n\n<div class=\"content-ad\"></div>\n\n남은 공간 다루기:\n\n확장 위젯:\n- 확장 위젯은 가진 모든 자식들 사이에 남은 공간을 균등하게 분배합니다.\n- 각 자식이 남은 공간의 동일한 비율을 받도록 보장하며, 그들의 유연성 요소에 관계없이 동등한 비율을 부여합니다.\n\n유연 위젯:\n- 유연 위젯은 자식들의 유연성 요소에 따라 남은 공간을 분배합니다.\n- 더 높은 유연성 요소를 가진 자식은 사용 가능한 공간의 더 많은 부분을 받고, 유연성 요소가 낮은 자식은 더 적은 공간을 받습니다.\n\n사용 사례:\n\n<div class=\"content-ad\"></div>\n\n확장 가능한 위젯:\n- 자식들 사이에 남은 공간을 고르게 분배하고 싶을 때 사용합니다.\n- 반응형 레이아웃을 만들 때 요소를 균일하게 조정해야 하는 상황에 적합합니다.\n\n유연한 위젯:\n- 서로 다른 유연성 요소를 갖는 자식들 사이에서 공간을 정밀하게 제어해야 할 때 사용합니다.\n- 다양한 조건에 적응하거나 균일하고 비례적인 분배를 필요로 하는 혼합 레이아웃에 이상적입니다.\n\n성능 고려사항:\n\n성능 면에서, 확장 가능한(Expanded)과 유연한(Flexible) 위젯은 효율적이며 앱의 성능에 큰 영향을 미치지 않습니다. 그러나 이러한 위젯을 분별적으로 사용하는 것이 중요합니다. 이러한 위젯을 과도하게 사용하면 복잡한 레이아웃이 되어 관리하고 디버깅하기 어려울 수 있습니다. 코드 작성 시 항상 간결함과 유지보수성을 지향해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n요약하자면, Expanded와 Flexible의 주요 차이점은 남은 공간 처리 방식과 제공하는 제어 수준에 있습니다. 두 가지 중 어떤 것을 선택할지는 구체적인 레이아웃 요구 사항에 따라 달라지며, 동등 분배(Expanded) 또는 정확한 비례 제어(Flexible)가 필요한지에 따라 다릅니다. 이러한 차이를 이해하면 Flutter 레이아웃을 설계하고 성능을 최적화하는데 도움이 됩니다.\n\n# Expanded를 사용해야 하는 경우\n\nExpanded 위젯은 Flutter 레이아웃에서 균일한 공간 분배가 필요한 다양한 시나리오에 특히 적합한 유용한 도구입니다. 다음은 Expanded 사용이 권장되는 몇 가지 구체적인 사용 사례와 실제 예시입니다:\n\n1. Row 내의 동일한 크기의 버튼들\n\n<div class=\"content-ad\"></div>\n\n예시: 화면 하단에 내비게이션 버튼 행이 있는 앱을 고려해보세요. 각 버튼에 Expanded 위젯을 사용하면 사용 가능한 수평 공간의 동일한 부분을 차지하여 시각적으로 일관된 사용자 친화적 레이아웃이 생성됩니다.\n\n2. 유연한 폼 필드\n\n예시: 등록 폼에서 Expanded 위젯을 사용하여 입력 필드가 화면 크기나 방향에 관계없이 사용 가능한 너비를 균일하게 채우도록 할 수 있습니다. 이렇게 하면 깔끔하고 일관된 폼 레이아웃이 만들어집니다.\n\n이러한 시나리오에서 Expanded 위젯을 사용하면 자식 요소 간 공간을 동일하게 분배하여 시각적으로 매력적이고 반응형인 플러터 레이아웃을 달성하는 간단하고 효과적인 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# Flexible 사용 시기\n\nFlexible 위젯은 서로 다른 flex 팩터를 가진 자식 요소들 사이의 공간 할당을 정밀하게 제어해야 할 때 다재다능한 선택지입니다. 다음은 Flexible 사용 시 Expanded와 비교했을 때 더 나은 선택인 경우를 구체적으로 설명한 예시입니다:\n\n1. 행 내 비율적 크기 조정\n\n예시: 음악 플레이어 앱을 고려해보겠습니다. 여러 재생 제어 요소를 행에 표시합니다. 재생 버튼을 이전 및 다음 버튼보다 크게 만들고 싶을 때가 있습니다. 서로 다른 flex 팩터를 사용하여, Flexible를 사용하여 이 비균일한 공간 분배를 달성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](/assets/img/2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage_0.png)\n\n2. Dynamic Layouts\n\nExample: Imagine a weather app where you display weather information for different cities. You want the temperature widget to expand or shrink based on the length of the city name, providing a balanced and visually pleasing layout. Flexible, with its flex factor, allows you to achieve this dynamic behavior.\n\n![Image 2](/assets/img/2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage_1.png)\n\n\n<div class=\"content-ad\"></div>\n\n3. 혼합 레이아웃\n\n예시: 전자 상거래 앱의 제품 목록에서 제품 이미지의 크기를 동일하게 유지하고 제품 설명은 콘텐츠에 따라 너비가 다양하게 달라져야 할 때가 있습니다. 이미지에 대해서는 Expanded를, 설명에 대해서는 Flexible를 사용하여 이러한 혼합 레이아웃을 구현할 수 있습니다.\n\n![이미지](/assets/img/2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage_2.png)\n\n이러한 상황에서 Flexible 위젯은 다른 플렉스 요소를 가진 자식들 간의 공간 분배에 대한 정밀한 제어를 제공하여 뛰어납니다. 비례 크기 조정, 동적 레이아웃 또는 두 가지를 혼합할 필요가 있을 때, 요구 사항을 충족하지 못하는 경우에는 Flexible이 더 나은 선택입니다. 이를 통해 적응 가능하고 시각적으로 매력적인 Flutter 레이아웃을 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# Best Practices\n\nFlutter 레이아웃에서 Expanded 및 Flexible 위젯을 사용할 때 효과적이고 효율적인 사용을 보장하기 위해 가이드 라인을 따르는 것이 중요합니다. 여기 몇 가지 주요 권장 사항이 있습니다:\n\n1. 성능 최적화:\n\n   - 위젯 깊이 제한: Expanded 또는 Flexible 위젯을 지나치게 사용하면 깊은 위젯 트리가 생성되어 성능에 영향을 줄 수 있습니다. 가능하다면 이러한 위젯을 적게 사용하여 위젯 트리를 얕게 유지하십시오.\n   - 앱 프로파일링: Flutter의 내장 성능 프로파일링 도구를 사용하여 레이아웃 및 렌더링 병목 현상을 식별하십시오. 이를 통해 성능을 개선할 수 있는 UI를 최적화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n2. 콘텐츠에 유의하세요:\n\n- 적합한 콘텐츠 확인: 확장 가능 또는 유연한 위젯 내의 콘텐츠가 다양한 공간에 적응할 수 있는지 확인하세요. 예를 들어, 유연한 위젯에 긴 텍스트가 적절하게 처리되지 않으면 오버플로우할 수 있습니다.\n- 최소 및 최대 크기 고려: 과도한 확장 또는 수축을 방지하기 위해 위젯의 최소 및 최대 크기를 설정하기 위해 `Container`, `ConstrainedBox`, 또는 `IntrinsicWidth/Height` 위젯을 사용하세요.\n\n3. MainAxisAlignment와 CrossAxisAlignment 사용하기:\n\n- MainAxisAlignment와 CrossAxisAlignment 활용: 행과 열의 `mainAxisAlignment`와 `crossAxisAlignment` 속성을 활용하여 위젯의 정렬을 미세 조정하세요. 이를 통해 사용 가능한 공간 내에서 위젯의 위치를 조절할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n4. 다양한 기기에서 테스트하기:\n\n- 다양한 화면 크기에서 테스트: 다양한 화면 크기와 방향에서 레이아웃을 테스트하여 다양한 기기에 잘 적응되는지 확인합니다.\n- 에뮬레이터 및 실제 기기 사용: 에뮬레이터와 실제 기기는 다르게 작동할 수 있습니다. 둘 다 테스트하여 레이아웃 문제를 식별하고 해결하는 데 도움이 됩니다.\n\n5. 접근성 고려사항:\n\n- 접근성 확보: 레이아웃을 디자인할 때 접근성을 염두에 두세요. 앱을 스크린 리더로 테스트하여 모든 사용자가 접근할 수 있도록 보장하고, 특히 Flex 위젯을 사용할 때의 접근성을 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n6. 레이아웃 설명서 작성하기:\n\n- 복잡한 레이아웃에 주석 추가하기: 레이아웃이 복잡해지면 특정 확장 또는 유연한 위젯의 목적과 의도를 설명하는 주석을 추가하는 것을 고려해보세요. 이는 코드를 작성 중인 여러분과 다른 개발자들에게 매우 도움이 될 수 있습니다.\n\n7. 경험을 통해 배우기:\n\n- 실습과 실험: Expanded 및 Flexible 위젯을 능숙하게 사용하는 가장 좋은 방법은 실습하고 실험해보는 것입니다. 다양한 레이아웃을 시도하고 결과로부터 배우세요.\n\n<div class=\"content-ad\"></div>\n\n이러한 모범 사례를 따르면 가독성이 좋고 성능이 우수한 플러터 레이아웃을 유지하면서 Expanded 및 Flexible 위젯을 효과적으로 사용할 수 있습니다. Expanded와 Flexible 중 어떤 것을 선택해야 하는지는 구체적인 레이아웃 요구 사항을 기반으로 결정되어야 하며, 이러한 위젯의 세부 사항을 이해하면 정보에 기반한 결정을 내릴 수 있을 것입니다.\n\n# 결론\n\n![이미지](/assets/img/2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage_3.png)\n\n본 문서에서는 Flutter 레이아웃의 맥락에서 Expanded 및 Flexible라는 두 가지 중요한 위젯을 탐색했습니다. 이 위젯들 간의 주요 차이점과 공간 분배에서의 역할을 강조했으며, 이를 효과적으로 사용하기 위한 예시를 제공했습니다. 또한 한 위젯이 다른 것보다 적합한 시나리오를 논의하고 가독성이 좋고 성능이 우수한 레이아웃을 유지하기 위한 모범 사례를 강조했습니다.\n\n<div class=\"content-ad\"></div>\n\n​Expanded와 Flexible를 언제 사용해야 하는지 이해하는 것은 유연하고 반응형이며 시각적으로 매력적인 Flutter 레이아웃을 만드는 데 중요합니다. 여기 주요 사항을 요약해 드리겠습니다:\n\n- Expanded 대 Flexible: Expanded는 자식들 사이에 공간을 동등하게 분배하는 반면, Flexible은 유연한 flex 요소에 따른 정확한 비율 제어를 허용합니다.\n- 사용 사례: Expanded는 공간의 동등 분배가 필요한 시나리오에 이상적이며, Flexible은 다양한 flex 요소를 통해 공간 할당을 제어해야 하는 상황에서 뛰어납니다.\n- 최상의 실천 사항: 가독성 유지, 성능 최적화, 콘텐츠 고려, 접근성 염두에 둔다면 Expanded와 Flexible 위젯을 다룰 때 꼭 지켜야 할 최선의 실천 사항이 됩니다.\n\n마지막으로, Flutter 프로젝트에서 Expanded와 Flexible 위젯을 함께 실험하고 실습할 것을 권장합니다. 능숙함은 실무 경험을 통해 오게 되므로, 다양한 레이아웃에서 이 위젯들의 능력을 탐험하는 데 주저하지 마십시오. 이들의 사용법을 능숙히 다루어 Flutter 애플리케이션에서 다재다능하고 동적인 사용자 인터페이스를 만들어보세요.","ogImage":{"url":"/assets/img/2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage_0.png"},"coverImage":"/assets/img/2024-06-21-FluttersExpandedvsFlexibleWidgetsDemystifyingTheirUsage_0.png","tag":["Tech"],"readingTime":9},{"title":"예제와 함께 배우는 Flutter ValueNotifier 활용 방법","description":"","date":"2024-06-21 21:57","slug":"2024-06-21-FlutterValueNotifierwithExamples","content":"\n<img src=\"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_0.png\" />\n\n소개\nFlutter는 크로스 플랫폼 모바일 애플리케이션을 개발하기 위한 강력한 프레임워크입니다. 그 중요한 기능 중 하나는 애플리케이션의 상태를 관리하고 업데이트하기 위해 ValueNotifier를 사용할 수 있는 기능입니다. 이 블로그 포스트에서는 ValueNotifier의 기본 개념을 탐색하고 예제와 함께 사용하는 방법을 알아보겠습니다.\n\nValueNotifier란?\n\nValueNotifier는 Flutter에서 값을 저장하고 그 값이 변경될 때 청취자에게 알릴 수 있는 간단한 클래스입니다. 이는 다른 상태 관리 솔루션인 BLoC나 Provider와 같은 Flutter에서 사용 가능한 가벼운 대안입니다.\n\n<div class=\"content-ad\"></div>\n\n예시 1: 카운터 앱\n간단한 카운터 앱의 예시로 시작해보겠습니다. 화면에 카운터를 표시하고 사용자가 버튼을 탭할 때마다 증가시키는 앱을 만들어봅시다. 이를 위해 ValueNotifier를 사용하는 방법을 살펴보겠습니다:\n\n```js\nclass Counter {\n  final ValueNotifier<int> count = ValueNotifier<int>(0);\n\n  void incrementCount() {\n    count.value++;\n  }\n}\n\nclass CounterApp extends StatefulWidget {\n  @override\n  _CounterAppState createState() => _CounterAppState();\n}\n\nclass _CounterAppState extends State<CounterApp> {\n  final Counter counter = Counter();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('카운터 앱'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              '카운트:',\n            ),\n            ValueListenableBuilder<int>(\n              valueListenable: counter.count,\n              builder: (BuildContext context, int value, child) {\n                return Text(\n                  '$value',\n                  style: Theme.of(context).textTheme.headline4,\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          setState(() {\n            counter.incrementCount();\n          });\n        },\n        tooltip: '증가',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n이 예시에서는 Count 클래스를 정의하고 그 안에 count라는 ValueNotifier를 포함시킵니다. 그런 다음 ValueListenableBuilder를 사용하여 count 값의 변경 사항을 감시하고 버튼이 눌릴 때 UI를 업데이트합니다.\n\n예시 2: 폼 유효성 검사\nValueNotifier는 폼 유효성 검사에도 사용할 수 있습니다. 이 예시에서는 이메일과 패스워드 두 가지 필드로 구성된 폼의 유효성을 검사하려 합니다. 두 필드가 모두 입력되어야 폼이 유효합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nclass LoginModel {\n  final ValueNotifier<String> email = ValueNotifier<String>('');\n  final ValueNotifier<String> password = ValueNotifier<String>('');\n\n  // 이메일과 비밀번호가 비어있지 않은지 확인\n  bool get isValid => email.value.isNotEmpty && password.value.isNotEmpty;\n}\n\nclass LoginForm extends StatefulWidget {\n  @override\n  _LoginFormState createState() => _LoginFormState();\n}\n\nclass _LoginFormState extends State<LoginForm> {\n  final LoginModel model = LoginModel();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        child: Column(\n          children: <Widget>[\n            TextField(\n              onChanged: (String value) {\n                setState(() {\n                  model.email.value = value;\n                });\n              },\n              decoration: const InputDecoration(hintText: 'Email'),\n            ),\n            TextField(\n              onChanged: (String value) {\n                setState(() {\n                  model.password.value = value;\n                });\n              },\n              decoration: const InputDecoration(hintText: 'Password'),\n            ),\n            ValueListenableBuilder<bool>(\n              valueListenable: ValueNotifier<bool>(model.isValid),\n              builder: (BuildContext context, bool isValid, child) {\n                return ElevatedButton(\n                  onPressed: () {\n                    if (isValid) {\n                      // 무언가를 수행\n                      print(\"Valid\");\n                    } else {\n                      print(\"Invalid\");\n                    }\n                  },\n                  child: const Text('Login'),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n이 예제에서는 이메일과 비밀번호를 나타내는 두 개의 ValueNotifier가 포함된 LoginModel 클래스를 정의합니다. 그런 다음 ValueListenableBuilder를 사용하여 isValid 값의 변경 사항을 청취하고 로그인 버튼을 활성화/비활성화합니다.\n\n예제 3: ValueNotifier로 UI 업데이트하기\n\nValueNotifier를 사용하여 상태가 변경될 때 UI를 업데이트할 수도 있습니다. 이 예제에서는 항목 목록을 표시하고 사용자가 스와이프하여 항목을 삭제할 수 있도록합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nclass Item {\n  final ValueNotifier<String> name;\n\n  Item(String name) : name = ValueNotifier<String>(name);\n}\n\nclass ItemList extends StatefulWidget {\n  @override\n  _ItemListState createState() => _ItemListState();\n}\n\nclass _ItemListState extends State<ItemList> {\n  final List<Item> items = [\n    Item('아이템 1'),\n    Item('아이템 2'),\n    Item('아이템 3'),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        child: ListView.builder(\n          itemCount: items.length,\n          itemBuilder: (BuildContext context, int index) {\n            final Item item = items[index];\n\n            return Dismissible(\n              key: Key(item.name.value),\n              onDismissed: (DismissDirection direction) {\n                setState(() {\n                  items.removeAt(index);\n                });\n              },\n              child: ListTile(\n                title: ValueListenableBuilder<String>(\n                  valueListenable: item.name,\n                  builder: (BuildContext context, String value, child) {\n                    return Text(value);\n                  },\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n이 예시에서는 항목 이름에 대한 ValueNotifier`String`을 포함하는 Item 클래스를 정의합니다. 그런 다음 ValueListenableBuilder를 사용하여 이름 값의 변경을 감시하고 항목이 삭제되도록 스와이프될 때 UI를 업데이트합니다.\n\n결론\n\nValueNotifier는 Flutter에서 다양한 용도로 사용할 수 있는 다재다능한 클래스로, 애플리케이션 상태 관리, 폼 유효성 검사 및 UI 업데이트를 포함한 여러 목적에 사용할 수 있습니다. ValueNotifier를 사용하여 개발자는 애플리케이션에서 상태를 관리하는 간단하고 효율적인 해결책을 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-21-FlutterValueNotifierwithExamples_1.png)\n\n만약 내 미디엄 기사를 즐기신다면, 이 주제에 대한 연구와 학습을 지원하기 위해 커피 한 잔 사 주시면 감사하겠습니다.\n","ogImage":{"url":"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_0.png"},"coverImage":"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_0.png","tag":["Tech"],"readingTime":6},{"title":"클린 아키텍처 기반의 Flutter 폴더 구조 이렇게 해보세요","description":"","date":"2024-06-21 21:54","slug":"2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo","content":"\n\n## 폴더 구조\n\n![Folder Structure](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_0.png)\n\n폴더와 파일을 정리하는 일은 고통스럽습니다. 특히 수천 개의 파일을 관리해야 하는 대규모 프로젝트에서는 더욱 그렇습니다.\n\n파일은 수백 줄을 포함해서는 안 됩니다. 정신 건강을 위해 높은 결합도를 가질 필요가 없고 단일 책임 원칙을 준수하려고 노력해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n고품질의 코드를 작성하면 파일 크기가 작아지고 파일 수가 늘어납니다. 여기서 문제가 발생합니다. 이 모든 파일을 효율적으로 어떻게 정리해야 할까요?\n\n# Clean Architecture으로 작업하기\n\n\"Clean architecture\"의 개념은 넓고 모호하지만, \"저는 이 프로젝트에 Clean Arch를 사용하고 있어요\"라고 말할 때, 나는 명확히 Flutterando의 아키텍처 제안을 말하는 것입니다!\n\n## 제안서 간단히 살펴보기\n\n<div class=\"content-ad\"></div>\n\n코드를 4개의 계층으로 분리할 것입니다: Presenter, Domain, Infra, External.\n\n![이미지](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_1.png)\n\n- Presenter — UI 구성 요소입니다. 실제로 위젯이거나 위젯의 컨트롤러인 모든 것이 여기에 속합니다.\n- Domain — 앱의 핵심입니다. 모든 엔티티 및 비즈니스 로직이 이 곳에 보관됩니다.\n- Infra — 외부 레이어에서 오는 데이터를 모델, 저장소 및 서비스를 통해 도메인 레이어를 지원합니다.\n- External — 타사 라이브러리, 센서, SO, 저장소 및 앱의 다른 외부 종속성의 기능을 래핑하는 클래스입니다.\n\n강건한 해결책은 없지만, 저는 대부분의 상황에서 잘 작동하는 깔끔한 아키텍처를 선호합니다. 플러터 앱에서 깔끔한 아키텍처를 개선하기 위해 기술하는 몇 가지 관행을 추가한 이 글을 참고해 주세요.\n\n<div class=\"content-ad\"></div>\n\n메모:\n\n이 아키텍처 제안에 익숙하지 않은 분들에게는 \"entity\", \"controller\" 등과 같은 구체적인 용어의 의미를 알기 어려울 수 있습니다.\n\n이 글 전체를 통해 더 자세한 설명을 볼 수 있지만, 제안 내용을 설명하는 것이 목표가 아닙니다. 공식 문서를 읽을 필요는 없습니다.\n\n## Clean arch + Modular arch = 행복한 개발자 😀\n\n<div class=\"content-ad\"></div>\n\n모듈화 아키텍처는 관련 콘텐츠를 \"모듈\"이라고 불리는 한 곳에 모으는 것을 목표로 합니다.\n\n각 모듈은 시스템의 중요한 책임을 나타내며 모든 모듈은 다른 모듈과 통신하는 규제를 갖습니다.\n\n이는 결합도를 줄이고 다른 팀과 전문가들이 동일한 소스 코드로 작업하는 데 도움이 되는 시스템으로 볼 수 있습니다.\n\n![image](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_2.png)\n\n<div class=\"content-ad\"></div>\n\n플러터에서 모듈 구조를 만들려면 Angular 프레임워크의 모듈 시스템을 기반으로 한 flutter_modular 패키지를 사용할 수 있어요.\n\n이 패키지는 앱을 모듈로 분할하며, 각각의 모듈은 페이지와 종속성을 가지고 있어요. 사용자가 모듈을 빠져나오면, 해당 모듈의 모든 종속성이 폐기됩니다.\n\n또한, 이 패키지는 의존성 주입 및 시스템 내비게이션을 위한 도구도 함께 제공돼요.\n\n# 루트 구조\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_3.png\" />\n\npubspec.yaml 파일과 함께 작업해야 할 디렉토리는 lib, assets, test 이렇게 3개가 있습니다.\n\n여기에 새로운 내용은 없습니다! 아마 이미 사용하고 있을 것입니다. lib와 test는 플러터 프로젝트를 생성할 때 자동으로 생성되는 폴더이며, asset 폴더 사용이 플러터 팀에 의해 권장됩니다.\n\n하지만 새로 온 사람들을 위해 그들의 사용법을 정의해야 할 것입니다. 그 이후에는 우리의 관심을 lib 폴더에만 집중할 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 에셋 폴더\n\n이미지, 글꼴, 아이콘, 비디오 등과 같은 모든 코드가 아닌 파일을 보관하는 곳입니다. 앱에서 사용되는 모든 자원이 여기에 포함될 수 있습니다. 여기에는 에셋의 공식적인 정의가 있습니다:\n\n## 라이브러리 폴더\n\n여기에는 당신의 Dart 파일이 위치합니다! 코드를 여기에 넣어주세요. =)\n\n<div class=\"content-ad\"></div>\n\n## 테스트 폴더\n\n여러분의 테스트 파일은 여기에 있습니다. 이 구조는 lib 폴더와 동일합니다.\n\n예를 들어, lib/modules/register/presenters/widgets에 있는 위젯 user_register_form.dart에 대한 테스트를 예로 들어보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 만들어야 합니다.\n\ntest/modules/register/presenters/widgets/user_register_form_test.dart.\n\n# 라이브러리 구조\n\n![라이브러리 구조](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_4.png)\n\n<div class=\"content-ad\"></div>\n\n## 메인 폴더\n\n![이미지](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_5.png)\n\n이 폴더에는 각 Flavor의 주요 기능을 실행하는 파일이 포함되어 있습니다.\n\n또한 모든 Flavor의 일반 명령을 실행하는 common_main.dart 파일도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n플레이버를 사용하지 않는 경우, 이 폴더와 해당 내용을 닥스트 파일만 사용할 수 있도록 전환할 수 있습니다.\n\n## i18n 폴더\n\n![이미지](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_6.png)\n\n잠깐! JSON 파일인가요? assets 폴더에 있어야 하는 게 아닌가요? 네! 그렇습니다! 이것이 제 죄약입니다. JSON 파일을 넣어야 하는 올바른 위치는 assets 폴더입니다. 하지만 localization 패키지는 lib 파일에 유지해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n물론이에요, 이건 패키지에서 강요하는 대로 하는 거예요. 그러나 의존성을 변경하고 easy_localization 패키지 등을 사용한다면 lib의 i18n 폴더를 제거해야 해요.\n\n그렇다고 해도, 난 여전히 localization 라이브러리를 선호해요. 사용하기 쉽고 열린 이슈도 적거든요.\n\neasy_localization 패키지 매니저는 더 이상 패키지를 활발하게 유지하지 않겠다고 이미 말했어요. 그래서 사용에 대해 경고하는 신호를 보냈어요.\n\n## Core 폴더\n\n<div class=\"content-ad\"></div>\n\n\n![Folder structure for Flutter with clean architecture](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_7.png)\n\n다음은 Clean Architecture 레이어로 표현할 수 없는 모든 공유 로직을 배치하는 폴더입니다. 예를 들어, 정규식 문자열, 믹스인 및 유틸리티 클래스의 클래스입니다.\n\n- Configs: 시스템에 필요한 초기 구성을 저장합니다. 예를 들어, firebase 초기 구성.\n- Constants: 라우트 이름 및 정규식과 같은 앱 설정 문자열.\n- Extensions: Dart 확장 기능.\n- Mixins: Dart 믹스인.\n- Utils: 통화 포매터 또는 날짜 유틸리티와 같은 유틸리티 클래스.\n- Validator: 필드, 전화 번호, 문서 등을 유효성 검사하는 클래스입니다.\n\n다시 말씀드리지만, 이것은 저의 개인 경험입니다. 일반적으로 이러한 폴더들로 충분히 필요한 모든 클래스를 보관할 수 있습니다. 프로젝트에 따라 utils의 남용을 피하기 위해 다른 폴더를 생성하기도 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 모듈 폴더\n\n![모듈 폴더 구성](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_8.png)\n\n앱 모든 모듈을 포함하는 폴더입니다. 각 모듈 내에서는 앱의 각 페이지에 대한 필요한 클린 코드 레이어를 생성합니다.\n\n주 모듈과 루트 위젯도 모듈 폴더 내에서 생성됩니다.\n\n<div class=\"content-ad\"></div>\n\n각 레이어에는 특정 유형의 클래스가 저장되어 있습니다. 이들은 다음과 같습니다:\n\n- 프리젠터:\n위젯 — 시각적 컴포넌트 클래스.\n컨트롤러 — 위젯의 상태 관리 클래스.\r\n- 도메인:\n엔티티 — 데이터를 저장하는 클래스.\n유스케이스 — 비즈니스 논리 클래스.\r\n- 인프라:\n모델 — 데이터를 변환하기 위해 엔티티를 확장하는 클래스.\n데이터 소스 — 외부 API와 연결하는 클래스 (HTTP 드라이버 사용).\n서비스 — 외부 API와 연결하지 않는 클래스 (HTTP 드라이버를 사용하지 않음).\r\n- 외부:\n드라이버 — 외부 라이브러리나 시스템 기능을 격리하는 클래스.\n\n외부 레이어에는 클래스 유형이 하나뿐이므로 드라이버 폴더를 직접 만들겠습니다.\n\n# 모듈 구조\n\n<div class=\"content-ad\"></div>\n\n모듈 구조의 세부 사항을 분석하기 위한 예시를 살펴보겠습니다. 저는 권한 모듈을 선택했는데, 이는 로그인 및 사용자 등록 양식과 같이 인증되지 않은 사용자가 액세스할 수 있는 모든 화면을 나타냅니다.\n\n![Folder Structure](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_9.png)\n\n각 모듈 폴더 내에서는 해당 모듈에서 사용하는 네비게이션 경로와 의존성을 설명하는 동일한 이름의 모듈 파일이 있을 것입니다.\n\n저는 모듈을 페이지로 분리하는 것을 좋아합니다. 이 경우 사용자는 로그인, 등록 및 비밀번호 복구 3개의 페이지에 액세스할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_10.png\" />\n\n로그인 폴더 내부에는 로그인 페이지에 필요한 클린 아키텍처 레이어가 포함되어 있습니다.\n\n## 프리젠터\n\n모듈은 페이지로 나뉘기 때문에, 프리젠터 폴더의 루트에는 로그인 페이지 위젯과 컨트롤러가 나타납니다.\n\n<div class=\"content-ad\"></div>\n\n다른 위젯은 \"위젯\" 폴더와 같은 다른 폴더에 있습니다. 필요할 때 위젯을 편의에 맞게 정리해보세요.\n\n그리고 \"dialogs\" 폴더가 있습니다. 또한 페이지를 구성하는 데 PageView 위젯이 필요한 경우 \"views\" 폴더가 있을 수 있습니다.\n\n위젯과 컨트롤러는 자신의 폴더가 없는 유일한 클래스 유형입니다. 높은 상관 관계 때문에 항상 함께 있어야 합니다.\n\n## 도메인\n\n<div class=\"content-ad\"></div>\n\n로그인 기능을 위해 사용자 이름과 비밀번호를 저장하는 AuthEntity 클래스가 있습니다.\n\nUsecase에서는 모든 비즈니스 로직을 실행합니다. 그렇다면 로그인 기능을 위한 가능한 비즈니스 로직은 무엇일까요?\n\n만약 없다면, 단지 데이터 소스를 호출하기 위해 도메인이 필요합니다. 비즈니스 로직이 없다고 해서 아키텍처 규칙을 어기는 것은 변명이 되지 않습니다.\n\n하지만... 사용자가 앱을 닫은 후에도 인증된 상태를 유지하나요? 그렇다면, 로컬에 인증 토큰을 저장해야 하는데, 이것도 비즈니스 로직입니다.\n\n<div class=\"content-ad\"></div>\n\n사용자가 로그인할 때 분석 데이터를 보내야 하나요? 이것도 비즈니스 로직입니다.\n\n## 인프라\n\nauth_datasource.dart 및 auth_datasource_impl.dart 파일을 메모해 두었나요?\n\nDatasources, Services, 및 Drivers를 위한 인터페이스가 작성되었습니다. 코드가 있는 위치는 `name`_`layer`_impl.dart 파일입니다. 인터페이스 사용은 결합도를 줄이고 Mock 클래스로 테스트를 구축하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n만약 파일의 유형이 데이터 소스인 경우 이미 API를 쿼리한다는 것을 알고 계실 겁니다.\n\n도메인은 데이터 소스에 AuthEntity를 제공하며, 이는 API 형식을 위해 값을 변환하기 위해 AuthModel을 사용합니다.\n\n## Driver (External)\n\n우리가 API를 호출하면서 HTTP 클라이언트를 위한 드라이버 폴더가 없는 이유는 무엇일까요? 그것이 공유 모듈에 있기 때문이죠!\n\n<div class=\"content-ad\"></div>\n\n## 공유 모듈\n\n![이미지](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_11.png)\n\n페이지를 보관하는 모듈 외에도 공유 모듈을 가지고 있습니다.\n\n이 모듈에는 모듈 간에 공유되는 모든 유형의 클래스를 넣을 것입니다. 가장 좋은 예는 HTTP 클라이언트 드라이버입니다.\n\n<div class=\"content-ad\"></div>\n\n이것은 버튼, 텍스트 필드, 스위치 등과 같은 테마 위젯을 공유하는 모듈입니다.\n\n# 내 폴더 구조 만족스러운가요?\n\n![image](/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_12.png)\n\n아니요! 왜 그래야 하나요?\n\n<div class=\"content-ad\"></div>\n\n그 죄악스러운 i18n 폴더, 언젠가는 로컬라이제이션 패키지가 고쳐줄 거에요!\n\n제가 작업 중인 현재 모듈이나 공유 모듈에 원하는 드라이버가 있는지 항상 확신할 수 없네요.\n\nutils 폴더를 봤나요? 유틸리티 클래스의 정확한 정의가 뭔지 아시나요? 제가 프로그래밍한 이유는 제게 유틸리티가 있기 때문이죠. 그저 제대로된 이름을 생각해내지 못해서 그것뿐인 거예요.\n\n이론적으로, 필드 유효성 검증은 비즈니스 로직에 의해 정의되지만, TextField 위젯에 설정해야 합니다. 아마도 입력 유효성 검증은 공유 모듈 내부의 도메인에 있어야 할 것 같아요. 하지만, 그것들은 일반 유틸리티 함수이기 때문에 코어 폴더에 있어요.\n\n<div class=\"content-ad\"></div>\n\n머리 아프다! 그래도 과거의 나보다는 나아진 것 같아. 앞으로도 계속 나아졌으면 좋겠다.\n\n그럼, 내가 도울 수 있을까 생각해봐. 나는 같은 문제를 겪는 개발자들을 지원하고 피드백을 얻기 위해 이 지식과 생각을 공유했어.\n\nFlutter 앱을 위한 파일 구조에 대한 더 나은 또는 알려지지 않은 솔루션이 있는지 알고 있니?\n\n내 생각과 프로그래밍 팁을 더 읽고 싶다면, 내 글을 확인하고 앞으로 올 컨텐츠를 팔로우하거나 구독해줘.","ogImage":{"url":"/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_0.png"},"coverImage":"/assets/img/2024-06-21-FolderstructureforFlutterwithcleanarchitectureHowIdo_0.png","tag":["Tech"],"readingTime":8},{"title":"Serverpod 시작하기 인증  첫 번째 파트","description":"","date":"2024-06-21 21:49","slug":"2024-06-21-GettingStartedwithServerpodAuthenticationPart1","content":"\n## 서버파드에서 이메일 및 비밀번호 인증 구현 단계별 가이드\n\n![이미지](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_0.png)\n\n# 인증 시리즈\n\n부분 1 — 이메일 및 비밀번호 인증\n부분 2 — 구글 인증\n부분 2.5 — 구글 API\n부분 3 — 애플 인증\n\n<div class=\"content-ad\"></div>\n\n# 소개\n\n서버포드에서 인증에 관한 시리즈의 제1부에 오신 것을 환영합니다! 본 문서에서는 서버포드 및 플러터 애플리케이션에서 이메일 및 비밀번호 인증을 구현하는 데 초점을 맞춥니다. 이메일 및 비밀번호 인증은 대부분의 애플리케이션에 있어 일반적이고 필수적인 기능으로, 사용자가 계정을 만들고 로그인하여 데이터에 안전하게 접근할 수 있게 합니다.\n\n우리는 서버포드 프로젝트를 생성부터 서버포드 인증 모듈을 설정하는 과정까지 전체 과정을 안내해 드리겠습니다. 또한 서버 측 코드 설정과 제3자 메일 서버와 통합하는 방법, 사용자 인터페이스를 구축하고 서버와 연결하는 방법에 대한 지침도 제공할 것입니다.\n\n본 문서를 마치면 서버포드-플러터 애플리케이션에서 이메일 및 비밀번호 인증을 어떻게 구현하는지에 대한 탄탄한 이해를 갖추게 되며, 향후 시리즈 뒷부분의 추가적인 인증 방법 탐색을 위한 기초가 마련될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이 튜토리얼에서 생성하는 완전한 예제 프로젝트는 여기에서 확인할 수 있습니다.\n\n시작해 봅시다!\n\n## 전제 조건\n\nServerpod로 이메일 및 비밀번호 인증을 구현하기 전에 필요한 몇 가지 전제 조건이 있습니다. 이미 Serverpod CLI 및 Docker를 비롯한 필요한 도구를 설치했다고 가정합니다. 아직 이 도구들을 설정하지 않은 경우, 공식 Serverpod 문서를 참고하여 시작하십시오.\n\n<div class=\"content-ad\"></div>\n\n또한, 이 글에서 나중에 생성할 데이터베이스 및 테이블을 검토하기 위해 Postico2, PgAdmin, 또는 DBeaver와 같은 데이터베이스 뷰어를 다운로드하고 설치하는 것을 권장합니다. 선호하는 데이터베이스 뷰어를 사용할 수 있습니다. 이 글에서는 Postico2를 사용할 예정입니다.\n\n# 서버포드 프로젝트 만들기\n\n새로운 서버포드 프로젝트를 생성합니다: 다음 명령을 실행하여 새로운 서버포드 프로젝트를 만듭니다:\n\n```js\nserverpod create my_project\n```\n\n<div class=\"content-ad\"></div>\n\n프로젝트 디렉토리로 이동하세요: 프로젝트 내 서버 디렉토리로 작업 디렉토리를 변경하세요:\n\n```js\ncd my_project/my_project_server\n```\n\nWindows 환경에서: 윈도우 환경이라면, 서버팟을 위한 필요한 데이터베이스 테이블을 만들기 위해 설정 중에 이 추가 단계를 수행해야 합니다. 서버 프로젝트 내에서 setup-tables.cmd라는 cmd 파일을 찾을 수 있을 것입니다. 이 스크립트를 실행하세요! 이는 generate/tables-serverpod.pgsql에 위치한 psql 파일을 실행할 것입니다. 리눅스와 맥에서는 프로젝트를 생성할 때 이 단계가 자동으로 수행됩니다.\n\n컨테이너 시작하기: 서버팟 프로젝트에 필요한 Docker 컨테이너를 시작하기 위해 다음 명령을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\ndocker-compose up --build --detach\n```\n\n# 서버팟\\_인증 모듈 설치 및 구성하기\n\n서버팟*인증 모듈은 Serverpod 프로젝트에서 인증을 관리하는 데 필수적인 기능을 제공합니다. 사용자 등록, 로그인, 비밀번호 해싱 및 세션 관리와 같은 기능이 포함되어 있습니다. 이 섹션에서는 서버팟*인증 모듈 설치 및 구성 프로세스를 안내하고 데이터베이스를 업데이트하는 방법을 안내합니다.\n\n## 서버 쪽 설정\n\n<div class=\"content-ad\"></div>\n\n서버파드 프로젝트(my_project_server)의 pubspec.yaml 파일을 열고 다음 줄을 의존성 섹션 아래에 추가해주세요:\n\n```js\ndependencies:\n  serverpod_auth_server: ^2.0.0\n```\n\n참고: 모든 서버파드 종속성의 버전은 동일해야 합니다! serverpod_auth를 버전 2.0.0으로 추가하는 경우, serverpod와 설치한 다른 서버파드 패키지도 2.0.0이어야 합니다.\n\n버전 2.0 이상인 경우 서버파드 객체에 authenticationHandler를 등록하세요: main.dart 파일에 다음 코드를 추가해주세요. 이 콜백은 클라이언트로부터 수신된 요청을 인증하는 데 사용됩니다. 이전 버전은 이 단계를 완료할 필요가 없습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // 이 줄을 추가하세요\n  );\n\n  await pod.start();\n}\n```\n\n의존성 가져오고 필요한 파일 생성하기: 프로젝트의 루트 디렉토리에서 다음 명령을 실행하여 새로운 종속성을 가져오고 서버 구성에 따라 필요한 파일을 생성하세요:\n\n```js\ndart pub get\nserverpod generate\n```\n\n기존 데이터베이스에 필요한 테이블 업데이트하기: Serverpod auth 모듈에는 모듈이 작동하는 데 필요한 데이터베이스 테이블 세트가 함께 제공됩니다. 이를 생성해봅시다.\n\n<div class=\"content-ad\"></div>\n\n만약 Serverpod 버전 1.2 이상을 사용하고 있다면, 마이그레이션 시스템을 사용해야 해요! 다음 명령어로 새 마이그레이션을 만들어보세요:\n\n```js\nserverpod create-migration\n```\n\n그리고 새 마이그레이션을 적용하려면 아래 명령어를 사용하세요:\n\n```js\ndart bin/main.dart --apply-migrations --role=maintenance\n```\n\n<div class=\"content-ad\"></div>\n\n유지 관리 역할을 설정하면 서버가 부팅되어 데이터베이스에 연결한 후 종료됩니다.\n\n버전 1.1 이하:\n\n- 새 SQL 파일 만들기: 기존 tables-serverpod.pgsql 파일이 있는 폴더에 tables-serverpod-auth.pgsql이라는 새 파일을 만듭니다. 이 파일에는 새 테이블을 생성하는 SQL 코드가 포함될 것입니다.\n- SQL 코드 복사: serverpod_auth 모듈의 테이블을 생성하는 SQL 코드에 액세스하려면 다음 링크를 엽니다: serverpod_auth tables.pgsql. 파일 전체 내용을 복사합니다.\n- SQL 코드를 새 파일에 붙여넣기: 새로 생성된 tables-serverpod-auth.pgsql 파일을 열고 복사한 SQL 코드를 붙여넣습니다.\n- Docker 컨테이너 이름 찾기: `docker ps`를 실행하거나 Docker 대시보드를 확인하여 Docker 컨테이너 이름을 찾습니다. 아래 스크린샷을 참고할 수도 있습니다.\n\n![이미지](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_1.png)\n\n<div class=\"content-ad\"></div>\n\n포스트그레SQL 파일을 컨테이너로 복사하고 SQL 코드를 실행하려면 다음 단계를 따르세요: `container_name`을(를) Docker 컨테이너 이름으로 바꿔주세요.\n\n```js\ndocker cp ./tables-serverpod-auth.pgsql <container_name>:/docker-entrypoint-initdb.d/tables-serverpod-auth.pgsql\n\ndocker exec -u postgres <container_name> psql my_project postgres -f /docker-entrypoint-initdb.d/tables-serverpod-auth.pgsql\n```\n\n## 데이터베이스에 Postico 연결하기\n\n시작하려면 Postico2를 열고 \"새 서버\"를 클릭하여 새 연결을 만드세요. 로컬 포스트그레SQL 서버의 연결 세부 정보를 입력해야 합니다. 이 정보는 Serverpod 프로젝트의 config/development.yaml 및 config/passwords.yaml 파일에서 찾을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 표 태그를 변경한 내용입니다.\n\n![GettingStartedwithServerpodAuthenticationPart1_2](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_2.png)\n\n![GettingStartedwithServerpodAuthenticationPart1_3](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_3.png)\n\n모든 테이블이 성공적으로 생성되었습니다. 다음 단계로 넘어가겠습니다.\n\n## 클라이언트 라이브러리 설정\n\n<div class=\"content-ad\"></div>\n\n클라이언트 측에서 serverpod_auth 모듈을 사용하려면 클라이언트 프로젝트에 serverpod_auth_client 종속성을 추가해야 합니다.\n\n클라이언트 프로젝트의 pubspec.yaml 파일을 열고 다음 라인을 dependencies 섹션 아래에 추가하세요:\n\n```js\ndependencies:\n  ...\n  serverpod_auth_client: ^2.0.0\n```\n\n이 패키지에는 서버로 이메일 및 비밀번호 인증을 위한 API 호출을 만들기 위해 필요한 클라이언트 측 라이브러리 코드가 포함되어 있습니다. serverpod_auth_email_flutter가 제공하는 미리 빌드된 UI 구성 요소를 사용 중이라면 해당 종속성은 엄격히 필요하지는 않지만 모든 생성된 인증 엔드포인트가 포함되어 있어 상호 작용할 수 있으므로 여기에 추가하는 것이 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n## 플러터 앱 설정\n\nServerpod를 사용하여 이메일 및 비밀번호 인증에 필요한 서버 측 변경 사항을 구현한 후, 다음 단계는 Flutter 앱과 통합하는 것입니다. 다행히도 Serverpod는 이 프로세스를 가능한한 원활하게 만들기 위해 미리 구축된 UI 컴포넌트를 제공합니다.\n\n먼저, Flutter 앱에 필요한 클라이언트 측 종속성을 추가해야 합니다. Serverpod 프로젝트(my_project_flutter)의 pubspec.yaml 파일을 열고 다음과 같은 라인을 dependencies 섹션 아래 추가해주세요:\n\n```js\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^2.0.0\n  serverpod_auth_shared_flutter: ^2.0.0\n```\n\n<div class=\"content-ad\"></div>\n\npubspec.yaml 파일에 필요한 종속성을 추가한 후에는 터미널에서 flutter pub get을 실행하여 종속성을 업데이트해야 합니다.\n\n이러한 패키지에는 사전 제작된 UI 구성 요소 및 서버 통합을 최대한 간단하게 만드는 기타 도구가 포함되어 있습니다. 그러나 자체 UI 구성 요소를 만들기를 선호하는 경우, 생성된 클라이언트 라이브러리와 통합할 수 있고 이 경우에는 이러한 종속성이 필요하지 않습니다.\n\n# 서버 시작 및 클라이언트 실행\n\n축하합니다! 이제 모든 필요한 종속성이 설정된 프로젝트가 있습니다. 다음으로 진행하기 전에 모든 것이 올바르게 작동하는지 확인해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n서버를 시작하려면 터미널에서 my_project_server 디렉토리로 이동한 다음 다음 명령어를 실행하세요:\n\n```js\ncd my_project_server\ndart bin/main.dart\n```\n\n<img src=\"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_4.png\" />\n\n다음으로, 새 터미널 창에서 my_project_flutter 디렉토리로 이동한 다음 다음 명령어를 실행하여 Flutter 앱을 시작하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\ncd my_project_flutter\nflutter run\n```\n\n크롬에서 실행하여 메시지를 보내는 테스트를 선택하세요!\n\n<img src=\"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_5.png\" />\n\n## 문제 해결\n\n<div class=\"content-ad\"></div>\n\n문제가 발생하면 문제를 진단하는 데 도움이 되는 몇 가지를 확인할 수 있습니다:\n\n- 이 가이드의 이전 단계를 모두 올바르게 따랐는지 확인하세요.\n- 서버가 오류 없이 실행 중인지 확인하세요. 오류가 있으면 서버를 시작한 터미널에 표시됩니다.\n- 필요한 데이터베이스 테이블이 모두 생성되었는지 확인하세요. 이를 확인하려면 Postgres나 pgAdmin과 같은 도구를 사용하여 데이터베이스에 연결하고 public 스키마에있는 테이블을 확인하세요. 테이블이 누락 된 경우 해당 테이블을 만들기 위해 SQL 스크립트를 실행했는지 확인하세요.\n- 여전히 문제가 발생하는 경우 앱의 콘솔 또는 로그에서 추가 컨텍스트를 제공 할 수있는 오류 메시지를 확인하세요.\n\n# 이메일/비밀번호 인증 구현\n\n이제 서버와 클라이언트 라이브러리를 설정 했으므로 Flutter 앱에서 인증을 구현할 시간입니다. 이전에 추가 한 serverpod_auth_email_flutter 및 serverpod_auth_shared_flutter 패키지를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n첫 번째 단계는 Client 및 SessionManager 객체를 초기화하는 것입니다. 먼저 my_project_flutter/lib/src/ 폴더 안에 serverpod_client.dart 파일을 생성해보세요.\n\n```js\nimport 'package:my_project_client/my_project_client.dart';\nimport 'package:serverpod_auth_shared_flutter/serverpod_auth_shared_flutter.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nlate SessionManager sessionManager;\nlate Client client;\n\nFuture<void> initializeServerpodClient() async {\n  // 안드로이드 에뮬레이터는 기본적으로 로컬호스트에 액세스할 수 없습니다.\n  // const ipAddress = '10.0.2.2'; // 호스트에 대한 안드로이드 에뮬레이터 IP 주소\n\n  // 실제 장치에서는 ipAddress를 컴퓨터의 IP 주소로 대체하십시오.\n  const ipAddress = 'localhost';\n\n  // 어플리케이션 어디서든 사용할 수 있는 싱글톤 클라이언트 객체를 설정합니다.\n  // 해당 클라이언트는 서버 코드에서 생성됩니다.\n  // 클라이언트는 로컬 서버의 기본 포트에서 실행 중인 Serverpod에 연결하도록 설정됩니다.\n  // 스테이징이나 프로덕션 서버에 연결하려면 수정해야 합니다.\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  // 세션 관리자는 사용자의 로그인 상태를 추적합니다.\n  // 사용자가 현재 로그인되어 있는지 확인하고 사용자 정보를 가져올 수 있습니다.\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n\n  await sessionManager.initialize();\n}\n```\n\n본 함수는 클라이언트와 서버 간 통신에 사용되는 싱글톤 Client 객체를 설정하고, 사용자의 로그인 상태를 추적하는 SessionManager 객체를 초기화합니다.\n\n이전 단계에서 생성된 Client 객체를 사용하려면 main() 함수에서 싱글톤 인스턴스로 초기화해야 합니다. 이를 위해 main.dart 파일의 main() 함수에서 WidgetsFlutterBinding.ensureInitialized()를 호출하여 Flutter가 완전히 초기화된 후에 SessionManager를 사용할 수 있도록 해야 합니다. 그 후에 방금 만든 initializeServerpodClient() 함수를 호출할 수 있습니다. 마지막으로 runApp() 함수를 호출하여 어플리케이션을 시작할 수 있습니다. 아래는 업데이트된 main() 함수의 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid main() async {\n  // runApp을 호출하기 전에 Flutter 바인딩을 사용하는 SessionManager를 호출해야 합니다.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await initializeServerpodClient();\n\n  runApp(const MyApp());\n}\n```\n\n다음으로 사용자에게 로그인 양식을 표시할 SignInPage 위젯을 만들겠습니다. 또한 사용자가 성공적으로 로그인한 후에 표시될 AccountPage 위젯도 만들겠습니다.\n\n## SignIn 페이지 생성\n\nFlutter 앱에서 이메일 및 비밀번호 인증을 활성화하기 위해 serverpod_auth_email_flutter 패키지에서 제공하는 SignInWithEmailButton이라는 미리 만들어진 위젯을 사용하여 로그인 페이지를 생성할 것입니다. 이 위젯은 로그인 버튼을 생성하며 로그인 흐름을 처리하는 대화 상자를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n먼저, Flutter 앱의 lib/src/widgets 폴더에 sign_in_page.dart란 이름의 새 파일을 만들어주세요.\n\n다음으로, StatelessWidget을 확장하는 SignInPage라는 새 클래스를 만들어주세요. 이 클래스는 Dialog 위젯으로 감싸진 로그인 버튼을 반환할 것입니다:\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\nimport 'package:my_project_flutter/src/serverpod_client.dart';\n\nclass SignInPage extends StatelessWidget {\n  const SignInPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Dialog(\n        child: Container(\n          width: 260,\n          padding: const EdgeInsets.all(16),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: [\n              SignInWithEmailButton(\n                caller: client.modules.auth,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n위 코드에서, SignInWithEmailButton 위젯은 caller라는 인자를 가져오는데, 이는 Serverpod에서 제공하는 생성된 클라이언트 라이브러리의 인스턴스입니다. 이를 통해 위젯이 Serverpod 서버와 통신할 수 있게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 홈페이지에 SignInPage 추가하기\n\n앱의 홈페이지에 SignInPage를 추가하려면 lib/ 폴더의 루트에 위치한 main.dart 파일 내에 정의된 MyHomePage 클래스를 수정해야 합니다.\n\n기존의 MyHomePage 클래스를 다음 코드로 변경하세요. 이 클래스 아래에 있는 내용은 모두 제거해도 됩니다.\n\n```js\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: const SignInPage(),\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n잊지 말고 SignInPage 위젯에 대한 import 문을 추가해주세요:\n\n```js\nimport \"package:my_project_flutter/src/widgets/sign_in_page.dart\";\n```\n\n전체 main.dart 파일은 다음과 같이 보여야 합니다:\n\n```js\nimport 'package:my_project_flutter/src/serverpod_client.dart';\nimport 'package:my_project_flutter/src/widgets/sign_in_page.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() async {\n  // runApp을 호출하기 전에 Flutter 바인딩을 사용하는 SessionManager를 초기화해야 합니다.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await initializeServerpodClient();\n\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: const SignInPage()\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n앱을 새로고침하면 이제 로그인 버튼을 볼 수 있어요! 아직 끝나지 않았지만 실제로 서버와 통신할 수 있어야 해요!\n\n![이미지](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_6.png)\n\n이제 우리 앱의 홈 페이지에 로그인 페이지를 통합했고 계정을 생성할 수 있어요. 그러나 로그인 프로세스를 완료하기 위해 서버에서 전송된 인증 코드가 필요해요. 계정 등록을 위해 사용자는 회원 가입 페이지의 필수 필드를 작성하고 양식을 제출할 수 있어요. 제출하면 서버가 제공된 이메일 주소로 인증 코드를 보내줄 거에요. 현재 우리는 인증 코드에 액세스하지 못하므로 로그인 프로세스를 아직 완료할 수 없어요. 이 문제를 해결해 봐요!\n\n## 이메일 인증 콜백 통합하기\n\n<div class=\"content-ad\"></div>\n\n회원 가입 프로세스를 완료하려면 검증 이메일을 보내는 콜백을 추가해야 합니다. Serverpod은 회원 가입을 위한 검증 코드 및 비밀번호 재설정을 위한 메일을 보내는 데 유용한 몇 가지 콜백을 제공합니다. 지금은 콘솔에 코드를 출력하여 기능을 테스트하기 위한 빠르고 간단한 솔루션을 구현해 봅시다.\n\n서버 프로젝트의 server.dart 파일에 다음 구성을 추가하여 콜백을 설정할 수 있습니다:\n\n```js\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nvoid run(List<String> args) async {\n  ...\n  auth.AuthConfig.set(auth.AuthConfig(\n    sendValidationEmail: (session, email, validationCode) async {\n      // TODO: 메일 서버와 연동\n      print('검증 코드: $validationCode');\n      return true;\n    },\n    sendPasswordResetEmail: (session, userInfo, validationCode) async {\n      // TODO: 메일 서버와 연동\n      print('검증 코드: $validationCode');\n      return true;\n    },\n  ));\n\n  ...\n  await pod.start();\n}\n```\n\nrun() 메서드 내에서 pod.start()를 호출하기 전에 이 코드를 추가하여 콜백이 제대로 설정되도록 해줍니다.\n\n<div class=\"content-ad\"></div>\n\n위에 바꾼 사항들이 적용되도록 하려면 Serverpod 서버를 다시 시작해야 합니다. 서버를 시작한 터미널로 이동하여 \"CTRL + C\"를 눌러 중지한 후, \"dart bin/main.dart\"를 실행하여 서버를 다시 시작합니다.\n\n지금 테스트해 봅시다!\n\n로그인 버튼을 생성하고 정보를 입력해 봅시다!\n\n![이미지](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_7.png)\n\n<div class=\"content-ad\"></div>\n\n지금은 이메일을 받지 않을 거에요. 대신에 서버를 실행한 터미널에서 확인 코드를 찾아보셔야 해요.\n\n마크다운(Markdown) 형식으로 테이블 태그를 변경해주세요.\n\n![이미지 1](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_8.png)\n\n![이미지 2](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_9.png)\n\n# 데이터베이스에서 사용자 생성 확인\n\n<div class=\"content-ad\"></div>\n\n이제 어플리케이션에 가입 기능을 설정했으니, 사용자 데이터가 데이터베이스에 올바르게 저장되는지 확인해야 합니다. 아직 Flutter 앱에서 사용자 페이지를 구현하지 않았으므로 Postico2를 사용하여 사용자 생성을 확인할 수 있습니다.\n\nPostico2를 열고 이전에 설정 섹션에서 한 것과 같이 데이터베이스에 연결하십시오. 데이터베이스에 연결한 후 'serverpod_user_info' 테이블을 클릭하십시오. 방금 생성한 사용자를 확인할 수 있어야 합니다.\n\n<img src=\"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_10.png\" />\n\n# 계정 페이지 구현\n\n<div class=\"content-ad\"></div>\n\n지금 로그인 페이지가 작동되고 있다면, 이제 계정 페이지를 구현해 보겠습니다. 이 페이지는 현재 로그인한 사용자에 대한 정보를 보여줄 것입니다. 이를 위해 이전에 만들었던 SessionManager 객체를 사용할 것입니다. SessionManager는 사용자의 로그인 상태를 추적하고 사용자에 대한 정보에 액세스할 수 있는 기능을 제공합니다.\n\nSessionManager가 제공하는 일부 함수를 살펴보겠습니다:\n\n- isSignedIn(): 이 함수는 사용자가 현재 로그인되어 있는 경우 true를 반환하고 그렇지 않으면 false를 반환합니다.\n- getSignedInUser(): 이 함수는 현재 로그인한 사용자에 대한 정보(이메일 주소 및 표시 이름과 같은)가 포함된 UserInfo 유형의 객체를 반환합니다.\n- signOut(): 이 함수는 사용자를 로그아웃하고 인증 상태를 지웁니다.\n\nCircularUserImage 위젯은 Serverpod 프레임워크가 제공하는 사전 제작된 위젯으로, UserInfo 객체를 입력으로 받아서 원형 프로필 이미지를 표시합니다. sessionManager와 이 위젯을 조합하여 멋진 디자인의 계정 페이지를 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nlib/src/widgets 디렉토리 안에 account_page.dart라는 새 파일을 만들고 다음 코드를 추가할 거에요:\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_auth_shared_flutter/serverpod_auth_shared_flutter.dart';\n\nimport 'package:my_project_flutter/src/serverpod_client.dart';\n\nclass AccountPage extends StatelessWidget {\n  const AccountPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView(\n      children: [\n        ListTile(\n          contentPadding:\n              const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n          leading: CircularUserImage(\n            userInfo: sessionManager.signedInUser,\n            size: 42,\n          ),\n          title: Text(sessionManager.signedInUser!.userName),\n          subtitle: Text(sessionManager.signedInUser!.email ?? ''),\n        ),\n        Padding(\n          padding: const EdgeInsets.all(16),\n          child: ElevatedButton(\n            onPressed: () {\n              sessionManager.signOut();\n            },\n            child: const Text('로그아웃'),\n          ),\n        ),\n      ],\n    );\n  }\n}\n```\n\nUserInfo 객체를 사용하여 사용자의 이름과 이메일을 가져와 UI에 표시할 수 있어요. 또한 사용자가 Sign out 버튼을 누르면 sessionManager.signOut();이 호출되어 응용프로그램에서 로그아웃할 수 있어요.\n\n이제 사용자가 로그인한 경우 AccountPage를 표시해야 해요. 사용자가 로그인했는지 여부에 따라 로그인 페이지와 계정 페이지를 전환하기 위해 main.dart 파일을 수정하고 build 메서드 내에서 const SignInPage()를 이 코드로 바꿔주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsessionManager.isSignedIn ? const AccountPage() : const SignInPage(),\n```\n\n사용자가 로그인한 경우 AccountPage()를 렌더링하고, 로그인되지 않은 경우 SignInPage()를 렌더링합니다.\n\n세션 상태 변경에 따라 사용자 인터페이스를 업데이트하려면 main.dart의 MyHomePageState 내에 다음 코드를 추가해야 합니다.\n\n```js\n@override\nvoid initState() {\n  super.initState();\n\n  // 로그인 상태 변경 시 페이지를 다시 빌드하도록 합니다.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 코드는 sessionManager에 리스너를 설정하여 세션 상태 변경 시 페이지를 다시 빌드합니다. 이렇게 함으로써 사용자가 로그인했는지 여부에 따라 앱이 사용자 인터페이스를 업데이트할 수 있도록 합니다.\n\n전체 클래스는 다음과 같이 보여야 합니다:\n\n```js\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  void initState() {\n    super.initState();\n\n    // 사용자 로그인 상태 변경 시 페이지 다시 빌드하도록 설정\n    sessionManager.addListener(() {\n      setState(() {});\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body:\n          sessionManager.isSignedIn ? const AccountPage() : const SignInPage(),\n    );\n  }\n}\n```\n\n이러한 변경 사항을 통해 사용자가 로그인하지 않은 경우 로그인 페이지가 표시되고, 로그인한 경우 사용자 계정 페이지가 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n![2024-06-21-GettingStartedwithServerpodAuthenticationPart1_11](/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_11.png)\n\n이제 직접 해보세요! 이제 데이터베이스에 사용자 데이터가 저장되는 완전한 기능을 갖춘 가입 및 로그인 흐름이 구현되었습니다! 마지막 단계는 이제까지 연기해 왔던 메일 서버 통합입니다.\n\n# 메일 서버 통합\n\n인증 코드와 비밀번호 재설정 링크를 보내기 위해 앱을 외부 메일 서버와 통합해야 합니다. SendGrid, Mailjet 등 여러 옵션이 있지만, 이 튜토리얼의 목적을 위해 Gmail을 메일 서버로 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n프로덕션 앱에는 좋지 않은 솔루션이라는 것을 알아두는 것이 중요합니다. 앱에서 Gmail을 사용하여 이메일을 보내면 전달 문제가 발생할 수 있습니다. 스팸으로 지목당하거나 계정이 제한될 수도 있습니다. 프로덕션 앱에 대해서는 전문적인 이메일 서비스를 사용하는 것을 강력히 권장합니다.\n\n그렇다면, 이제 Gmail을 사용하여 앱을 통합해 봅시다.\n\n먼저, 서버 프로젝트에 mailer 패키지를 추가해야 합니다. 터미널에서 다음 명령을 실행하여 이 작업을 수행할 수 있습니다:\n\n```js\ndart pub add mailer\n```\n\n<div class=\"content-ad\"></div>\n\n다음으로, 이메일을 보내는 데 사용할 Gmail 계정을 설정해야 합니다. Gmail 계정이 없는 경우 무료로 하나 만들 수 있습니다. https://accounts.google.com/signup 에서 만들어보세요.\n\nGmail 계정을 만든 후 다음 단계를 따르세요:\n\n- Google 계정 보안 페이지로 이동합니다.\n- \"Google에 로그인하는 방법\" 아래에서 \"2단계 인증\"을 켭니다.\n- 계정에 2단계 인증을 설정하기 위해 안내에 따라 진행합니다. 확인 코드를 받을 전화번호를 제공해야 합니다.\n- 2단계 인증을 설정한 후, 계정용 앱 비밀번호를 만듭니다. 이 비밀번호는 우리 앱이 이메일을 보내는 데 사용할 것입니다.\n\n<img src=\"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_12.png\" />\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_13.png\" />\n\n이제 서버팟 프로젝트의 passwords 파일에 암호를 추가해 보겠습니다. 이 파일은 config/passwords.yaml 경로에 있습니다. 여기서 주의할 점은 이 파일을 버전 관리에 저장하지 마십시오. 실제로 서버팟 프로젝트는 이 파일을 .gitignore에 추가하여 사전 구성되어 있습니다. 대신에 항상 프로젝트 외부에서 비밀을 관리하고, 프로덕션 배포 시에는 CI/CD 파이프라인의 비밀 변수로 유지하십시오.\n\nkey/valuesgmailEmail 및 gmailPassword를 추가하세요.\n\n```js\n# 이들은 개발 모드에서 로컬 서버를 실행할 때 사용되는 암호입니다.\ndevelopment:\n  database: '9S8rYW7XeIA8bmGY9FBzOSLwQZtQEFNr'\n  redis: 'V7YogaG9K2rnIpS1odXIKrqsW8kkfddt'\n  gmailEmail: '<your gmail email>'\n  gmailPassword: '<your gmail key>'\n\n  # 서비스 비밀은 서버 간 통신 및 서비스 프로토콜에 액세스하는 데 사용됩니다.\n  serviceSecret: 'IWtaP1Z-Db-F70IBJpWGf3D7x9F3AYGg'\n```\n\n<div class=\"content-ad\"></div>\n\n우리는 비밀번호 파일에 키를 추가하여 나중에 코드에서 쉽게 가져와 사용할 수 있습니다. 이렇게 하면 서버에 시크릿을 삽입하는 편리한 방법입니다.\n\n이제 Gmail 계정과 설정한 시크릿이 준비되었으니, 이메일로 validationCode를 보내는 로직을 구현할 수 있습니다. 이를 위해 이전에 서버 프로젝트 내 server.dart에 만들어둔 AuthConfig를 수정해야 합니다.\n\n먼저, session.serverpod 객체에서 getPassword 함수를 호출하여 Gmail SMTP 서버의 자격 증명을 가져옵니다. 이 함수는 이전 단계에서 추가한 시크릿을 가져올 것입니다.\n\n```js\n// 자격 증명 가져오기\nfinal gmailEmail = session.serverpod.getPassword('gmailEmail')!;\nfinal gmailPassword = session.serverpod.getPassword('gmailPassword')!;\n```\n\n<div class=\"content-ad\"></div>\n\n그럼, 우리는 검색한 이메일과 비밀번호를 사용하여 Gmail용 SMTP 클라이언트를 생성합니다:\n\n```js\n// Gmail용 SMTP 클라이언트 생성\nfinal smtpServer = gmail(gmailEmail, gmailPassword);\n```\n\n그런 다음, 유효성 코드를 사용하여 이메일 메시지를 만듭니다:\n\n```js\n// 검증 코드를 포함한 이메일 메시지 생성\nfinal message = Message()\n  ..from = Address(gmailEmail)\n  ..recipients.add(email)\n  ..subject = 'Serverpod를 위한 검증 코드'\n  ..html = '귀하의 검증 코드는 다음과 같습니다: $validationCode';\n```\n\n<div class=\"content-ad\"></div>\n\n마지막으로, mailer 패키지의 send 함수를 사용하여 이메일 메시지를 전송하는 시도를 합니다. 이메일 전송에 실패하면 false를 반환합니다:\n\n```js\n// 이메일 메시지를 전송합니다.\ntry {\n  await send(message, smtpServer);\n} catch (_) {\n  // 이메일 전송에 실패한 경우 false를 반환합니다.\n  return false;\n}\n\nreturn true;\n```\n\n모든 코드를 한데 모아서 sendValidationEmail 및 sendPasswordResetEmail을 구현할 때 아래와 같이 코드가 보여야 합니다.\n\n```js\n// 이메일로 로그인하는 경우의 구성.\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // 자격 증명 가져오기\n    final gmailEmail = session.serverpod.getPassword('gmailEmail')!;\n    final gmailPassword = session.serverpod.getPassword('gmailPassword')!;\n\n    // Gmail용 SMTP 클라이언트 생성\n    final smtpServer = gmail(gmailEmail, gmailPassword);\n\n    // 검증 코드가 포함된 이메일 메시지 생성\n    final message = Message()\n      ..from = Address(gmailEmail)\n      ..recipients.add(email)\n      ..subject = 'Serverpod의 인증 코드'\n      ..html = '귀하의 인증 코드는 다음과 같습니다: $validationCode';\n\n    // 이메일 메시지 전송\n    try {\n      await send(message, smtpServer);\n    } catch (_) {\n      // 이메일 전송에 실패한 경우 false를 반환합니다.\n      return false;\n    }\n\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // 자격 증명 가져오기\n    final gmailEmail = session.serverpod.getPassword('gmailEmail')!;\n    final gmailPassword = session.serverpod.getPassword('gmailPassword')!;\n\n    // Gmail용 SMTP 클라이언트 생성\n    final smtpServer = gmail(gmailEmail, gmailPassword);\n\n    // 비밀번호 재설정 링크가 포함된 이메일 메시지 생성\n    final message = Message()\n      ..from = Address(gmailEmail)\n      ..recipients.add(userInfo.email!)\n      ..subject = 'Serverpod의 비밀번호 재설정 링크'\n      ..html = '다음은 비밀번호 재설정 코드입니다: $validationCode';\n\n    // 이메일 메시지 전송\n    try {\n      await send(message, smtpServer);\n    } catch (_) {\n      // 이메일 전송에 실패한 경우 false를 반환합니다.\n      return false;\n    }\n\n    return true;\n  },\n));\n```\n\n<div class=\"content-ad\"></div>\n\n새 변경 사항이 적용되었는지 확인하려면 서버를 다시 시작하는 것을 잊지 마세요. 그러고 나면 테스트해 보는 시간입니다! 새 계정을 만들어서 이메일을 통해 인증 코드를 받는지 확인해 보세요. 모든 것이 기대한 대로 작동한다면, 축하합니다! 이메일 서비스 제공 업체와 Serverpod를 성공적으로 통합했습니다.\n\n# 결론\n\n이 튜토리얼에서는 serverpod_auth_google_flutter를 Flutter 앱과 통합하는 기본 사항을 다뤘습니다. 이를 통해 사용자 계정을 만들고 로그인하고 이메일 주소를 인증할 수 있었습니다. 또한, 메일 서버 통합과 테스트 목적으로 Gmail을 보내는 사람으로 사용하는 mailer 패키지를 간단히 논의했습니다.\n\n다음 시리즈에서는 Google 소셜 로그인을 serverpod_auth_google_flutter와 통합하는 방법에 대해 논의할 것입니다. 이를 통해 사용자가 새로운 계정을 만들 필요 없이 Google 계정으로 로그인하도록 설정하여 사용자가 간편하고 편리하게 가입하고 로그인할 수 있도록 지원할 수 있게 될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이 시리즈를 마치면 serverpod_auth를 사용하여 플러터 앱에 인증을 통합하는 견고한 기반을 갖추게 될 것입니다. 이를 통해 사용자가 계정을 만들고 로그인하여 안전한 콘텐츠에 액세스할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_0.png"},"coverImage":"/assets/img/2024-06-21-GettingStartedwithServerpodAuthenticationPart1_0.png","tag":["Tech"],"readingTime":24},{"title":"Flutter iOS  다양한 Firebase 설정으로 Flavors 설정하는 방법","description":"","date":"2024-06-21 21:47","slug":"2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig","content":"\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png)\n\n플레이버의 목적은 무엇인가요? 플레이버는 개발 및 프로덕션을 포함한 다양한 맥락에 맞춰 응용 프로그램을 사용자 정의하는 수단으로 작용합니다. 아래 예시를 살펴보겠습니다:\n\n- 개발 단계에서는 앱이 https://dev.mobileapp.com/v1/에 위치한 API 호스트와 com.mobileapp.dev 프로젝트 ID를 사용하여 연결을 설정하기를 원할 수 있습니다.\n- 반면, 앱을 릴리스할 때에는 프로덕션 버전이 https://api.mobileapp.com/v1/에 위치한 API 호스트와 com.mobileapp.prod 프로젝트 ID를 사용하여 연결해야 합니다.\n\n이러한 값을 변수로 직접 코딩하고 각 환경에 대해 별도의 앱 빌드를 생성하는 대신 플레이버를 활용하는 것이 권장됩니다. 플레이버를 사용하면 이러한 값을 빌드 시간 구성으로 제공하여 프로세스를 간소화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 튜토리얼에서는 \"dev\"와 \"prod\" 두 가지 플레이버를 가진 샘플 애플리케이션을 생성하는 방법을 안내합니다. 각 단계마다 샘플 앱에 커밋이 이루어지며 코드 차이를 검토하고 적용된 수정 사항을 파악할 수 있게 됩니다.\n\n추가로, 기존 앱에 이 지침을 간편하게 적용할 수 있도록 상세한 지침을 제공할 것이며, 사용자 친화적인 경험을 보장할 것입니다.\n\n단계 1: Flutter 애플리케이션 프로젝트 생성\n\n단계 2: Firebase와 통합하도록 애플리케이션 구성\n\n<div class=\"content-ad\"></div>\n\n먼저, 개발 및 프로덕션을 위해 두 개의 별도 Firebase 프로젝트를 설정하세요. Firebase 콘솔 내에서 각 프로젝트에 대한 Android 애플리케이션을 생성해주세요. 개발 앱은 com.mobileapp.dev ID를, 프로덕션 앱은 com.mobileapp.prod ID를 갖고 있다고 가정합니다. 각 애플리케이션에 대한 GoogleServices-Info.plist 파일을 다운로드해주세요. Firebase를 Flutter 프로젝트에 통합하는 자세한 지침은 Firebase Flutter 설정 가이드를 참고하세요.\n\n![image1](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_1.png)\n\n그다음, 개발 및 프로덕션 애플리케이션을 위한 GoogleServices-Info.plist 파일을 ios/config/ 디렉토리 내의 별도 폴더로 복사해주세요.\n\n![image2](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_2.png)\n\n<div class=\"content-ad\"></div>\n\nStep 3: 루트 프로젝트 디렉토리에 다른 API 엔드포인트를 가리키도록 하는 2개의 구성 파일을 생성하세요.\n\n![dev.json](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_3.png)\n\n![dev.json](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_4.png)\n\n<div class=\"content-ad\"></div>\n\nprod.json\n\n![Flutter iOS Setup Flavors with different Firebase Config](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_5.png)\n\nStep 4: Create multiple Runner on XCode\n\nXCode에서 여러 Runner를 생성하려면\n\nXCode에서 ios 폴더를 열어주세요. ios 폴더를 우클릭하고 \"Xcode에서 열기\" 옵션을 선택하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_6.png\" />\n\nXcode는 제품 플레이버와 상응하는 스키마와 빌드 구성 개념을 소개합니다. 안드로이드에서 제품 플레이버에 해당하는 사용자 정의 스키마를 만들어봅시다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*OE7e4r2CbOJ1mue4mzfMTg.gif\" />\n\n그런 다음, Debug-Dev, Release-Dev 및 Profile-Dev로 명명된 3가지 구성을 생성합시다.\n\n<div class=\"content-ad\"></div>\n\n![Image](https://miro.medium.com/v2/resize:fit:1200/1*5KlPoqD-amdcgurzjTVulA.gif)\n\nWe also need to rename for prod build configuration\n\n![Image](https://miro.medium.com/v2/resize:fit:1200/1*74RaOwzLGWilIM5LkzVi1A.gif)\n\nOk, now let’s set Dev schemes by Dev build configuration\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*9FqzXYzM4USJiBaFjf3dbA.gif\" />\n\n- 플레이버에 기반한 번들 ID 설정\n\n이제 두 개의 스키마가 각각의 빌드 구성과 연결되었습니다. 이는 우리가 각 스키마에 맞도록 사용자 정의를 할 수 있게 해 줍니다. 시작하려면 어플리케이션 번들 식별자를 두 스키마 각각에 대해 고유하게 설정해 보겠습니다.\n\n타겟 섹션의 Runner를 클릭하여 `Build Settings`로 이동하고, 오른쪽 상단의 필터 필드에서 Bundle을 입력하여 모든 제품 번들 식별자를 채워주세요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_7.png)\n\n- 플레이버에 따라 AppName 설정하기\n\n앱에 다른 디스플레이 이름을 사용하고 싶습니다. 그러나 빌드 설정의 대상에는 디스플레이 이름 매개변수가 없습니다. 해결책으로 사용자 정의 매개변수를 생성하고 이를 디스플레이 이름 매개변수 대신 사용할 수 있습니다.\n\nBuild Settings에서 `Info`를 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n번들 디스플레이 이름을 $(APP_DISPLAY_NAME)으로 설정하세요.\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_8.png)\n\n빌드 설정으로 이동해서 `추가 버튼 (+)`을 클릭하고 사용자 정의 설정을 추가한 다음 APP_DISPLAY_NAME을 입력하세요.\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_9.png)\n\n<div class=\"content-ad\"></div>\n\n그리고 다음과 같이 설정하세요\n\n![image](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_10.png)\n\n- Runner에 config 폴더 추가하기\n\n마지막으로, 빌드 구성에 따라 다른 GoogleServices-Info.plist 파일을 활용하는 해결책을 찾아야 합니다. 몇 가지 제안은 Firebase 초기화 시에 원하는 구성 파일을 명시적으로 지정하여 런타임에서 처리하는 것을 제안합니다 (Firebase 문서에서 언급됨: https://firebase.google.com/docs/projects/multiprojects). 그러나 다른 옵션으로 저는 빌드 시 적절한 파일을 기본 위치로 복사하는 방법을 선호합니다. 이렇게 하면 앱 번들이 생성될 때 자동으로 올바른 파일을 사용하게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n위 작업을 수행하기 위해 먼저 각 flavor에 대한 GoogleServices-Info.plist 파일을 별도 폴더에 정리하고, Runner에 추가합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*x4yGjohfV_JUafeoPOw1Aw.gif)\n\n![image](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_11.png)\n\n- 빌드 단계에서 GoogleService-info.plist를 복사하는 Runnner 스크립트를 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n다음으로는 빌드 프로세스에 단계를 추가하여 해당 GoogleServices-Info.plist 파일이 Runner 디렉토리 내의 적절한 위치로 복사되도록 하는 방법을 결정해야 합니다. 이것은 새로운 Run script Build Phase를 대상에 추가함으로써 달성할 수 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*TFJl5ZZVrS0f1gIuB3zajQ.gif)\n\n```js\nenvironment=\"default\"\n\n# 빌드 구성에서 스킴 이름을 추출하기 위한 정규식\n# 빌드 구성을 Debug-dev, Debug-prod 등과 같이 지정했습니다.\n# 여기서 dev와 prod는 스킴 이름입니다. Flutter에서 플레이버가 작동하려면 이러한 유형의 이름이 필요합니다.\n# 우리는 XCode 빌드 환경에서 사용 가능한 $CONFIGURATION 변수를 사용하여 환경(또는 플레이버)를 추출합니다.\n# 예를 들어\n# CONFIGURATION=\"Debug-prod\"인 경우, 환경은 \"prod\"로 설정됩니다.\nif [[ $CONFIGURATION =~ -([^-]*)$ ]]; then\n    environment=${BASH_REMATCH[1]}\nfi\n\necho $environment\n\n# 복사하는 리소스의 이름과 경로\nGOOGLESERVICE_INFO_PLIST=GoogleService-Info.plist\nGOOGLESERVICE_INFO_FILE=${PROJECT_DIR}/config/${environment}/${GOOGLESERVICE_INFO_PLIST}\n\n# GoogleService-Info.plist 파일이 존재하는지 확인\necho \"${GOOGLESERVICE_INFO_PLIST} 파일이 ${GOOGLESERVICE_INFO_FILE}에서 확인 중\"\nif [ ! -f $GOOGLESERVICE_INFO_FILE ]; then\n    echo \"GoogleService-Info.plist 파일을 찾을 수 없습니다. 올바른 디렉토리에 있는지 확인하세요.\"\n    exit 1\nfi\n\n# GoogleService-Info.plist의 대상 위치에 대한 참조 얻기\n# Firebase init 코드가 GoogleServices-Info.plist 파일을 찾을 기본 위치입니다.\nPLIST_DESTINATION=${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app\necho \"${GOOGLESERVICE_INFO_PLIST} 파일을 최종 대상지인 ${PLIST_DESTINATION}에 복사합니다.\"\n\n# 릴리스 빌드용 prod GoogleService-Info.plist를 복사합니다.\ncp \"${GOOGLESERVICE_INFO_FILE}\" \"${PLIST_DESTINATION}\"\n```\n\nStep 5: 플레이버를 기반으로 한 설정을 처리하는 몇 개의 Dart 파일을 생성하세요.\n\n<div class=\"content-ad\"></div>\n\nlib/utils/environment.dart\n\n```js\nabstract class Environment {\n  static const dev = 'dev';\n  static const prod = 'prod';\n}\n```\n\nlib/utils/config_reader.dart\n\n```js\nimport 'dart:convert';\nimport 'package:flutter/services.dart';\n\nabstract class ConfigReader {\n  static Map<String, dynamic>? _config;\n  static bool _isDevMode = false;\n\n  static Future<void> initialize(String env) async {\n    var configString = '{}';\n\n    try {\n      configString = await rootBundle.loadString('config/$env.json');\n    } catch (_) {\n      configString = await rootBundle.loadString('config/dev.json');\n    }\n\n    _config = json.decode(configString) as Map<String, dynamic>;\n    _isDevMode = env == \"dev\";\n  }\n\n  static bool isDevMode() {\n    return _isDevMode;\n  }\n\n  static String getBaseUrl() {\n    return _config!['baseUrl'] as String;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n6단계: 플레이버를 관리하기 위해 3개의 다른 주요 Dart 파일을 만듭니다.\n\nlib/main_dev.dart\n\n```js\nFuture<void> main() async {\n  await mainCommon(Environment.dev);\n}\n```\n\nlib/main_prod.dart\n\n<div class=\"content-ad\"></div>\n\n```js\nFuture<void> main() async {\n  await mainCommon(Environment.prod);\n}\n```\n\nlib/main_common.dart\n\n```js\nFuture<void> mainCommon(String env) async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await ConfigReader.initialize(env);\n  runApp(const MyApp());\n}\n```\n\nStep 6: 플레이버에 기반한 변수 가져오기\n\n<div class=\"content-ad\"></div>\n\nconfig에서 변수를 다음과 같이 가져올 수 있어요\n\n```js\ndebugShowCheckedModeBanner: ConfigReader.isDevMode(),\n```\n\n또한 연결 클래스 파일에 대한 base_url을 다음과 같이 가져올 수 있어요\n\n```js\nclass HttpGetConnect extends GetConnect {\n  final _baseUrl = ConfigReader.getBaseUrl();\n  static HttpGetConnect? _instance;\n  HttpGetConnect._internal() {\n    _instance = this;\n    httpClient.baseUrl = _baseUrl;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n7단계: VS code 런처 설정 추가하기\n\n.vscode/lunch.json을 생성하세요.\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_12.png)\n\nlaunch.json을 다음 코드로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  // 가능한 속성에 대해 알아보려면 IntelliSense를 사용하세요.\n  // 기존 속성에 대한 설명을 보려면 가리킬 수 있어요.\n  // 더 많은 정보는 여기를 참조하세요: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"[Debug] Development App\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"program\": \"lib/main_dev.dart\",\n      \"args\": [\"--flavor\", \"Dev\"]\n    },\n    {\n      \"name\": \"[Debug] Production App\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"program\": \"lib/main_prod.dart\",\n      \"args\": [\"--flavor\", \"Prod\"]\n    },\n    {\n      \"name\": \"[Release] Production App\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"flutterMode\": \"release\",\n      \"program\": \"lib/main_prod.dart\",\n      \"args\": [\"--flavor\", \"Prod\"]\n    }\n  ]\n}\n```\n\n그리고 이제 개발 flavor 또는 프로덕션 flavor를 사용하여 앱을 실행할 수 있어요\n\n![Flutter iOS Setup Flavors](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_13.png)\n\n그리고 여기 결과가 있어요\n\n<div class=\"content-ad\"></div>\n\n8단계: xcarchive 빌드하기\n\nXCode를 열고 Target Runners 'Signing & Capabilities'를 선택하여 Apple 개발자 계정이 이미 있는지 확인한 다음에 아래 스크립트를 실행하면 build/ios/ 폴더에 출력 파일이 생성됩니다.\n\n```js\nflutter build xcarchive --flavor prod -t lib/main_prod.dart\n```\n\nAndroid에서 플레이버 설정을 진행하시겠습니까? 다음 단계로 넘어가 보시겠습니까?\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_14.png)\n\nGithub 프로젝트\n\n[https://github.com/c0deslinger/flutter-learn-flavor](https://github.com/c0deslinger/flutter-learn-flavor)\n\n참고:\n\n<div class=\"content-ad\"></div>\n\nhttps://medium.com/flutter-community/flutter-ready-to-go-e59873f9d7de\n\nhttps://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b\n","ogImage":{"url":"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png"},"coverImage":"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png","tag":["Tech"],"readingTime":10},{"title":"Supabase를 사용한 Flutter Google 로그인 인증 구현 방법","description":"","date":"2024-06-21 21:44","slug":"2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase","content":"\n\n\n![이미지](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_0.png)\n\n# 소개\n\n모바일 앱 개발의 계속 발전하는 지형에서 인증은 사용자 경험과 보안에 직접적으로 영향을 미치는 중요한 측면입니다. 본 문서에서는 Supabase의 백엔드 서비스를 활용하여 Flutter 앱에 Google Sign-In 인증을 통합하는 과정을 안내해 드리겠습니다.\n\n# 배경\n\n\n<div class=\"content-ad\"></div>\n\n구현에 들어가기 전에, 관련 기술들을 간단히 살펴보겠습니다:\n\n- Flutter (https://flutter.dev/): Google에서 제공하는 인기 있는 오픈 소스 UI 소프트웨어 개발 툴킷으로, 단일 코드베이스에서 모바일, 웹, 데스크톱용 네이티브 컴파일된 애플리케이션을 구축할 수 있습니다.\n- Supabase (https://supabase.com/): 오픈 소스 Firebase 대안인 Supabase는 애플리케이션을 위한 확장 가능하고 안전한 백엔드 서비스(BaaS) 인프라를 제공합니다.\n\n# 준비사항\n\n시작하기 전에, 다음의 준비사항이 있는지 확인해주세요:\n\n<div class=\"content-ad\"></div>\n\n- Flutter SDK가 설치되어 있습니다. 사용한 버전은 v3.16.0 입니다.\n- Supabase 계정 및 프로젝트가 설정되어 있습니다.\n- Flutter와 Dart 프로그래밍 언어에 대한 기본적인 이해가 있어야 합니다.\n\n# 우리가 만들고 있는 것\n\n우리의 미니멀한 Flutter 앱은 두 개의 페이지로 구성될 것입니다:\n\n- 로그인 페이지: 애플리케이션의 진입점인 로그인 페이지는 Google Sign-In을 활용하여 사용자에게 편리하고 안전한 인증 프로세스를 제공합니다. 사용자는 Google 자격 증명을 사용하여 로그인할 수 있어 스무스한 온보딩 경험을 보장합니다.\n- 프로필 페이지: 인증된 후 사용자는 프로필 페이지로 이동할 것입니다. 여기서 우리는 Supabase라는 강력한 백엔드 서비스에 중요한 사용자 데이터를 저장하는 방법을 탐구할 것입니다. 프로필 페이지는 사용자 정보를 표시하기 위한 것뿐만 아니라 Flutter 앱과 Supabase 간의 강력한 통합을 증명하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n자, 한 단계씩 가이드를 시작해보겠습니다. 플러터 UI 툴킷의 효율성, Google Sign-In의 간편함, 그리고 Supabase의 견고함을 결합하여 이 페이지들을 살아있게 만들어봅시다.\n\n한 단계씩 가이드:\n\n- 플러터 프로젝트 설정\n\n다음 명령을 사용하여 새로운 플러터 프로젝트를 생성하여 시작해보세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nflutter create your_project_name\n```\n\n2. 프로젝트 디렉토리를 변경한 후 아래 명령을 실행하여 종속성을 설치하세요\n\n```js\nflutter pub add supabase_flutter google_sign_in\n```\n\n3. Supabase 설정. Supabase.com에서 로그인 또는 회원가입을 하고 프로젝트를 생성하세요. 주의하세요, 실제 프로덕션 앱에서 사용자가 거주하는 지역 또는 근처 지역을 선택해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_1.png\" />\n\n4. 프로젝트가 준비되면 'Auth Provider' 페이지로 이동하세요,\n\n인증 - 공급자(provider)로 이동한 다음 Google을 선택하고 Google로 로그인 허용을 확인하고 iOS 클라이언트에서 nonce(일회용 숫자) 확인을 건너뛰는 것을 확인하세요. 이후에는 Google 콘솔(이후에 설정합니다)에서 허가된 클라이언트 ID를 입력하고 저장을 클릭하세요.\n\n<img src=\"/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_2.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n5. 구글 클라우드 플랫폼(GCP) 설정하기\n\nhttps://console.cloud.google.com/에 로그인하고 새 프로젝트를 만듭니다.\n\n![이미지](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_3.png)\n\n프로젝트 이름과 조직을 입력하세요.\n\n<div class=\"content-ad\"></div>\n\n6. 검색 창에서 OAuth 동의를 검색하고, 외부, 생성을 선택하세요.\n\n![이미지](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_4.png)\n\n7. OAuth 동의 화면 양식을 작성하세요.\n\n![이미지](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_5.png)\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 다음은 한글로 번역된 내용입니다.\n\n\n![이미지](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_6.png)\n\n앱 이름, 사용자 지원 이메일 및 인가된 도메인이 필요합니다. 인가된 도메인에는 Supabase의 Google 제공자 섹션에서 콜백 URL을 입력하세요. 저장 및 계속하기를 클릭하세요.\n\n8. OAuth 클라이언트 ID를 만들기 위해 자격 증명으로 이동합니다.\n\n이 페이지에서는 웹 클라이언트 ID, 안드로이드 클라이언트 ID 및 iOS 클라이언트 ID 3개의 OAuth 클라이언트 ID를 생성합니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_7.png)\n\n8.1. 웹 클라이언트 ID 생성\n\n이름을 입력하고 승인된 리디렉션 URI를 추가하세요. URI를 얻으려면, supabase로 돌아가세요,\n\n![Image 2](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_8.png)\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_9.png\" />\n\n8.2. 안드로이드 클라이언트 만들기.\n\n패키지 이름과 SHA-1 인증서를 입력하세요.\n참고 : SHA-1 인증서를 받으려면 키스토어를 생성해야 하며, app/build.gradle에서 환경설정을 해야 합니다.\n\n<img src=\"/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_10.png\" />\n\n<div class=\"content-ad\"></div>\n\n9. 앱을 게시하기\n\n![Publish app](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_11.png)\n\n10. 플러터를 Supabase와 통합해 봅시다.\n\n코드 구조, 상태 관리, 라우팅 등을 선호하는 대로 프로젝트를 자유롭게 설정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n먼저 main.dart 파일의 상단에 Supabase를 초기화하세요.\n\n```js\nawait Supabase.initialize(\n  url: '당신의 Supabase URL',\n  anonKey:\n      '당신의 익명 키',\n);\n```\n\nSupabase 대시보드에서 URL과 익명 키를 가져오세요. 설정 - API로 이동하세요.\n\n![이미지](/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_12.png)\n\n<div class=\"content-ad\"></div>\n\n11. 로그인 페이지 만들기\n\n최소한 구글 로그인 버튼이 있는 페이지입니다.\n\n12. 구글을 이용한 로그인 로직 생성\n\n```js\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\n...\n\nFuture<AuthResponse> _googleSignIn() async {\n  /// 수정해야 할 부분: 자체 웹 클라이언트 ID로 업데이트하세요.\n  ///\n  /// Google Cloud에 등록한 웹 클라이언트 ID입니다.\n  const webClientId = 'my-web.apps.googleusercontent.com';\n\n  /// 수정해야 할 부분: 자체 iOS 클라이언트 ID로 업데이트하세요.\n  ///\n  /// Google Cloud에 등록한 iOS 클라이언트 ID입니다.\n  const androidClientId = 'my-android.apps.googleusercontent.com';\n\n  // 안드로이드에서 Google 로그인을 위해 Android 클라이언트 ID를 제공하지 않아도 작동합니다.\n\n  final GoogleSignIn googleSignIn = GoogleSignIn(\n    clientId: iosClientId,\n    serverClientId: webClientId,\n  );\n  final googleUser = await googleSignIn.signIn();\n  final googleAuth = await googleUser!.authentication;\n  final accessToken = googleAuth.accessToken;\n  final idToken = googleAuth.idToken;\n\n  if (accessToken == null) {\n    throw 'Access Token을 찾을 수 없습니다.';\n  }\n  if (idToken == null) {\n    throw 'ID Token을 찾을 수 없습니다.';\n  }\n\n  return supabase.auth.signInWithIdToken(\n    provider: Provider.google,\n    idToken: idToken,\n    accessToken: accessToken,\n  );\n}\n...\n```\n\n<div class=\"content-ad\"></div>\n\n13. 홈 / 대시보드 페이지 생성\n로그인 성공 후에는 다른 페이지로 이동해야 합니다. 우리의 경우에는 홈 페이지로 이동해야 합니다.\n\n페이지를 자유롭게 디자인할 수 있습니다. 사용자 데이터를 얻으려면 supabase.auth.currentUser를 사용할 수 있습니다.\n\n```js\nfinal user = supabase.auth.currentUser;\nfinal profileImageUrl = user?.userMetadata?['avatar_url'];\nfinal fullName = user?.userMetadata?['full_name'];\n```\n\n14. 로그아웃\n\n<div class=\"content-ad\"></div>\n\n로그아웃하려면 await supabase.auth.signOut()을 사용하세요.\n\n# 결론\n\n이 기사에서는 Google 로그인 및 Supabase SDK for Flutter를 활용하여 Flutter 애플리케이션에 인증을 통합하는 과정을 다루었습니다. 상태 관리, 라우팅 등을 더 탐구할 수 있으니 이것은 간단/최소한의 예시에 불과하다는 점을 유의해 주세요.","ogImage":{"url":"/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_0.png"},"coverImage":"/assets/img/2024-06-21-ImplementingGoogleSign-InAuthenticationinFlutterwithSupabase_0.png","tag":["Tech"],"readingTime":7},{"title":"클린 아키텍처로 플러터 개발 효율적으로 하기","description":"","date":"2024-06-21 21:41","slug":"2024-06-21-StreamlineFlutterDevelopmentwithCleanArchitecture","content":"\n\n## 모듈화, 유지보수 가능하고 테스트 가능한 Flutter 앱을 만드는 방법을 배워보세요.\n\n올바른 아키텍처는 앱의 성패를 좌우할 수 있습니다. 개발 프로세스뿐만 아니라 최종 제품의 성능과 확장성에도 영향을 미칩니다.\n\n로버트 C. 마틴이 만든 \"Clean Architecture(깨끗한 아키텍처)\"는 코드를 구성하여 비즈니스 로직과 기술 구현(데이터베이스, API, 프레임워크)을 분리하는 소프트웨어 디자인 철학입니다. 이 분리는 애플리케이션의 기능을 유지, 변경 및 테스트하기 쉽게 만듭니다.\n\n# Clean Architecture가 왜 필요한가요?\n\n<div class=\"content-ad\"></div>\n\n클린 아키텍처는 코드를 계층으로 분리하여 모듈화되고 유지보수 가능하며 테스트할 수 있는 앱을 만드는 데 도움이 됩니다. 특히 대규모 및 복잡한 앱에 유용한 방법론입니다.\n\n# 클린 아키텍처 계층\n\n클린 아키텍처는 세 가지 주요 계층으로 구성됩니다: 데이터 계층, 도메인 계층 및 프레젠테이션 계층. 각 계층은 구체적인 책임과 제한된 종속성을 갖습니다.\n\n## 데이터 계층\n\n<div class=\"content-ad\"></div>\n\n데이터 레이어에는 서버나 데이터베이스와 같은 외부 데이터 소스와 통신하는 코드가 포함되어 있습니다. 이것은 도메인 레이어에서 정의된 계약(추상 클래스)의 구현, 로컬/원격 데이터 소스, 서비스, 그리고 모델을 포함합니다.\n\n## 도메인 레이어\n\n도메인 레이어는 프레젠테이션 레이어와 데이터 레이어 사이에 위치하며 비즈니스 로직을 캡슐화합니다. 이 레이어에는 엔티티, 유스 케이스, 그리고 리포지토리의 추상 클래스인 계약이 포함되어 있습니다. 클린 아키텍처 원칙에 따르면, 이 레이어는 프레젠테이션 또는 데이터 레이어에서의 클래스, 함수 또는 임포트에 의존하지 않아야 합니다.\n\n의존성 역전 원칙은 데이터 레이어와 도메인 레이어 사이의 간극을 메꾸는 역할을 합니다. 상위 수준 모듈은 하위 수준 모듈의 구체적인 구현이 아닌 추상화 또는 인터페이스에 의존해야 합니다. 의존성 역전 원칙에 대해 자세히 이해하려면 이 링크를 참조해주세요.\n\n<div class=\"content-ad\"></div>\n\n## 프레젠테이션 레이어\n\n프레젠테이션 레이어는 시스템의 UI와 관련됩니다. 실제적인 용어로는 화면에 정보를 표시하거나 UI 논리를 처리하는 모든 코드가 이 레이어에 있어야 합니다. 구체적으로 위젯, 컨트롤러 및 상태 보유자가 프레젠테이션 레이어의 구성원입니다.\n\n이 레이어는 도메인 레이어에 의존하며 데이터 레이어에 어떠한 참조도 가지지 않아야 합니다.\n\n## 카운터 앱의 예시로 살펴보기\n\n<div class=\"content-ad\"></div>\n\n클린 아키텍처를 탐구하는데, 인크리먼트, 디크리먼트, 그리고 초기화 기능을 포함한 카운터 앱으로 로컬 데이터베이스인 Hive를 사용합니다. 상태 관리에는 MobX를 사용하고 서비스 로케이터로 get_it을 사용합니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:582/1*sAj2VA36Rb7G0B0wyKOfKw.gif)\n\n아래는 애플리케이션의 전체 프로젝트 파일 구조입니다.\n\n```js\nlib/\n├── core/\n│   ├── data/\n│   │   ├── data_sources/\n│   │   │   └── counter/\n│   │   │       └── counter_local_data_source.dart\n│   │   ├── models/\n│   │   │   └── counter/\n│   │   │       └── counter_model.dart\n│   │   └── repositories/\n│   │       └── counter/\n│   │           └── counter_repository_impl.dart\n│   ├── domain/\n│   │   ├── entities/\n│   │   │   └── counter/\n│   │   │       └── counter_entity.dart\n│   │   ├── repositories/\n│   │   │   └── counter/\n│   │   │       └── counter_repository.dart\n│   │   └── usecases/\n│   │       └── counter/\n│   │           ├── get_counter_usecase.dart\n│   │           ├── increment_counter_usecase.dart\n│   │           ├── decrement_counter_usecase.dart\n│   │           └── reset_counter_usecase.dart\n│   └── presentation/\n│       ├── controllers/\n│       │   └── counter/\n│       │       └── counter_controller.dart\n│       └── screens/\n│           └── counter/\n│               └── counter_screen.dart\n├── injection_container.dart\n└── main.dart\n```\n\n<div class=\"content-ad\"></div>\n\n코드 플로우:\n\n<img src=\"/assets/img/2024-06-21-StreamlineFlutterDevelopmentwithCleanArchitecture_0.png\" />\n\n참고: 상태 관리에 MobX를 사용했기 때문에 store에 대해서는 counter_controller.dart 하나만 필요합니다. 다른 상태 관리 솔루션을 사용할 계획이라면 파일을 적절히 업데이트하실 수 있습니다.\n\n# 1. 데이터 레이어\n\n<div class=\"content-ad\"></div>\n\n## 책임\n\n데이터 레이어는 데이터베이스, 네트워크 서비스 또는 저장소와 같은 외부 데이터 소스와의 상호 작용을 관리합니다. 또한 데이터를 저장하고 검색합니다.\n\n## 구성 요소\n\n- 데이터 소스: 데이터베이스, API 또는 다른 외부 서비스와 상호 작용하는 저장소를 구현합니다.\n- 데이터 모델: 외부 소스에 저장된 데이터 구조를 나타냅니다.\n- 저장소: 데이터 액세스와 데이터 저장을 정의하는 추상 인터페이스입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n── data/\n   ├── data_sources/\n   │   └── counter/\n   │       └── counter_local_data_source.dart\n   ├── models/\n   │   └── counter/\n   │       └── counter_model.dart\n   └── repositories/\n       └── counter/\n           └── counter_repository_impl.dart\n```\n\n# 2. 도메인 레이어\n\n## 책임\n\n도메인 레이어는 비즈니스 로직 또는 유즈 케이스 레이어로도 알려져 있으며, 특정 프레임워크와 독립적인 애플리케이션의 핵심 규칙과 로직을 보유합니다.\n\n<div class=\"content-ad\"></div>\n\n## 구성요소\n\n- Entities(개체들): 기본적인 비즈니스 객체나 개념들을 나타냅니다.\n- 비즈니스 규칙 및 논리(저장소): 애플리케이션 도메인에 중요한 핵심 기능을 정의합니다.\n- Use Cases(사용 사례들): 애플리케이션의 특정 비즈니스 규칙을 보유하며 데이터가 다른 부분으로 이동하는 방법을 관리합니다. 특정 작업이나 작업을 수행하는 데 책임이 있습니다.\n\n## 모델이 있는데 왜 개체가 필요한가요?\n\n개체와 모델은 소프트웨어 개발에서 서로 다른 역할을 하게 됩니다. 개체는 핵심 비즈니스 규칙과 논리에 초점을 맞추고, 모델은 다양한 시스템에서 데이터 저장 및 검색을 처리합니다. 이들을 분리하면 서로에게 영향을주지 않고 관리 및 수정이 쉬워지게 됩니다. 게다가, 개체는 외부 시스템과 독립적이기 때문에 테스트 및 유지 관리가 쉽고 모델을 변경해도 핵심 비즈니스 논리에 영향을주지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n── domain/\n   ├── entities/\n   │   └── counter/\n   │       └── counter_entity.dart\n   ├── repositories/\n   │   └── counter/\n   │       └── counter_repository.dart\n   └── usecases/\n       └── counter/\n           ├── get_counter_usecase.dart\n           ├── increment_counter_usecase.dart\n           ├── decrement_counter_usecase.dart\n           └── reset_counter_usecase.dart\n```\n\n# 3. 표현 계층\n\n## 책임\n\n표현 계층은 사용자에게 정보를 표시하고 사용자 상호작용을 관리하는 역할을 합니다. 위젯, 화면 및 컨트롤러와 같은 모든 사용자 인터페이스 (UI) 구성 요소를 포함합니다.\n\n<div class=\"content-ad\"></div>\n\n## 구성 요소\n\n- 스크린: 이들은 기능 스크린을 나타냅니다.\n- 위젯 및 UI 구성 요소: 이들은 애플리케이션의 시각적 요소를 나타냅니다. 이 접근 방식은 UI 구성 요소에 대한 코드 분리가 필요한 경우 유용합니다. 그러나 저희 예시에서는 사용하지 않았습니다.\n- 컨트롤러: 이들은 정보 제공과 UI 구성 요소, 사용자 입력, 도메인 레이어의 유스 케이스 및 UI 조정과 상호 작용을 처리합니다.\n\n```js\n── presentation/\n   ├── controllers/\n   │   └── counter/\n   │       └── counter_controller.dart\n   └── screens/\n       └── counter/\n           └── counter_screen.dart\n```\n\n## 공통 파일:\n\n<div class=\"content-ad\"></div>\n\n그게 예제 내용이에요.\n\n# 클린 아키텍처의 장단점\n\n## 장점:\n\n- 모듈화 및 유지보수성: 클린 아키텍처는 컴포넌트를 각각의 계층으로 분리하여 모듈화를 촉진합니다. 이러한 분리는 유지보수성을 향상시켜 특정 부분의 업데이트나 수정을 전체 애플리케이션에 영향을 주지 않고 쉽게 수행할 수 있게 합니다.\n- 테스트 용이성: 역할 분리로 인해 플러터에서 유닛 테스트가 용이해집니다. 코어 계층에 있는 비즈니스 로직은 외부 종속성에 영향을 받지 않고 독립적으로 테스트할 수 있어 더 견고하고 신뢰성 있는 테스트를 보장합니다.\n- 프레임워크 독립성: 플러터의 핵심 비즈니스 로직은 특정 프레임워크나 라이브러리에 강하게 묶여 있지 않습니다. 이러한 독립성은 애플리케이션을 전환하거나 업그레이드할 때 핵심 기능을 손상시키지 않으면서 쉽게 수행할 수 있게 합니다.\n- 유연성: 클린 아키텍처는 플러터의 다양한 계층의 기술 선택에서 유연성을 제공합니다. 예를 들어 다양한 상태 관리 솔루션, UI 라이브러리 또는 데이터 저장 옵션 간에 전환하면서도 핵심 비즈니스 로직을 크게 변경하지 않고 사용할 수 있습니다.\n- 확장성: 클린 아키텍처의 모듈화된 구조는 플러터에서 더 나은 확장성을 제공합니다. 다양한 애플리케이션 부분을 독립적으로 확장할 수 있고, 팀이 서로 간섭하지 않고 특정 계층에서 작업할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 단점:\n\n- 복잡성: Clean Architecture을 구현하는 것은 특히 초기 개발 단계에서 추가 복잡성을 도입할 수 있습니다. 관심사의 분리가 더 많은 파일과 디렉토리를 초래할 수 있으며, 작은 프로젝트에게는 압도적일 수도 있습니다.\n- 학습 곡선: Clean Architecture에 새로운 개발자는 학습 곡선을 겪을 수 있습니다. 이 아키텍처의 원칙을 파악하고 올바르게 구현하는 데는 시간과 노력이 필요할 수 있습니다.\n- 부가 코드: Clean Architecture은 특히 계층 간의 데이터 매핑에서 더 많은 부가 코드를 필요로 할 수 있습니다. 이는 개발 시간을 증가시킬 수 있지만, 지지자들은 유지 관리성의 장점이 이 단점을 상쇄한다고 주장합니다.\n- 간단한 프로젝트의 경우 과도한 엔지니어링: Clean Architecture은 간단하거나 작은 프로젝트에 대해 과한 경우가 있습니다. 여기서 분리 및 모듈화의 이점이 두드러지지 않습니다.\n\n이 게시물이 도움이 되었기를 바라며 새로운 것을 배우셨기를 기대합니다.\n\nGitHub에서 전체 프로젝트 및 코드를 찾을 수 있습니다 — [소스 코드](https://github.com).","ogImage":{"url":"/assets/img/2024-06-21-StreamlineFlutterDevelopmentwithCleanArchitecture_0.png"},"coverImage":"/assets/img/2024-06-21-StreamlineFlutterDevelopmentwithCleanArchitecture_0.png","tag":["Tech"],"readingTime":7},{"title":"Flutter 확장 프로그램 생산성을 높이는 7가지 꿀팁 ","description":"","date":"2024-06-21 21:39","slug":"2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity","content":"\n![이미지](/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png)\n\n플러터 코드가 정체되어 있는 기분이 들죠? 반복적인 보일러플레이트를 작성하거나 기존 클래스에 슈퍼파워를 추가하고 싶은가요? 그렇다면, 플러터 개발자 여러분, 확실하게 할 일을 해야 합니다! 약간의 마법 같은 힘을 담아줄 확장 함수로 여러분의 작업 흐름에 활력을 불어넣어 보세요! 이 안내서에서는 이러한 다재다능한 코드 챔피언들의 비밀을 밝혀내어 기존 유형을 확장하고 코드를 간소화하며 플러터 게임의 수준을 높이도록 도와줄 것입니다. 이 강력한 확장 기능을 통해 반복적인 수고를 벗어던지고 더 깔끔하고 표현력이 풍부한 코드의 세계를 받아들이세요!\n\n# A. BuildContext에 대한 Extension\n\n먼저, 확장 기능을 만들고 이 확장 기능이 BuildContext를 확장한다는 것을 확실히하고 메서드를 확장 기능에 넣으세요:\n\n<div class=\"content-ad\"></div>\n\n# 테이블 태그를 Markdown 형식으로 변경\n\n```js\nextension ContextExt on BuildContext {\n\n    // 여기에 EXT 함수를 넣으세요\n\n}\n```\n\n1. 테마에 쉽게 접근하기\n\n```js\n  Color get primaryColor => Theme.of(this).primaryColor;\n  Color get canvasColor => Theme.of(this).canvasColor;\n  Color get cardColor => Theme.of(this).cardColor;\n  Color get focusColor => Theme.of(this).focusColor;\n  Color get dialogBackgroundColor => Theme.of(this).dialogBackgroundColor;\n  Color get disabledColor => Theme.of(this).disabledColor;\n  Color get dividerColor => Theme.of(this).dividerColor;\n  Color get highlightColor => Theme.of(this).highlightColor;\n  Color get hintColor => Theme.of(this).hintColor;\n  Color get hoverColor => Theme.of(this).hoverColor;\n  Color get indicatorColor => Theme.of(this).indicatorColor;\n  Color get primaryDark => Theme.of(this).primaryColorDark;\n  Color get primaryLight => Theme.of(this).primaryColorLight;\n  Color get shadowColor => Theme.of(this).shadowColor;\n```\n\n2. MediaQuery에 쉽게 접근하기\n\n<div class=\"content-ad\"></div>\n\n```js\n  double get width => MediaQuery.of(this).size.width;\n  double get height => MediaQuery.of(this).size.height;\n  double get aspectRatio => MediaQuery.of(this).size.aspectRatio;\n  double get longestSide => MediaQuery.of(this).size.longestSide;\n  double get shortestSide => MediaQuery.of(this).size.shortestSide;\n  Orientation get orientation => MediaQuery.of(this).orientation;\n  EdgeInsets get padding => MediaQuery.of(this).padding;\n```\n\n3. SnackBar 표시하기\n\n```js\n  void showSnackBar(String message) {\n    if (!mounted) return;\n    final snackBar = SnackBar(\n      content: Text(message),\n      duration: const Duration(seconds: 3),\n    );\n    ScaffoldMessenger.of(this).showSnackBar(snackBar);\n  }\n```\n\n4. AlertDialog 표시하기\n\n<div class=\"content-ad\"></div>\n\n```js\n  void displayAlertDialog({\n    required String title,\n    required String content,\n    VoidCallback? onPositivePressed,\n    String positiveButtonText = 'OK',\n    VoidCallback? onNegativePressed,\n    String negativeButtonText = 'Cancel',\n  }) {\n    if (!mounted) return;\n    showDialog(\n      context: this,\n      builder: (BuildContext context) {\n        return AlertDialog(\n          title: Text(title),\n          content: Text(content),\n          actions: <Widget>[\n            TextButton(\n              onPressed: onNegativePressed ??\n                  () {\n                    Navigator.of(this).pop();\n                  },\n              child: Text(negativeButtonText),\n            ),\n            TextButton(\n              onPressed: onPositivePressed ??\n                  () {\n                    Navigator.of(this).pop();\n                  },\n              child: Text(positiveButtonText),\n            ),\n          ],\n        );\n      },\n    );\n  }\n```\n\n5. 방향 기반으로 위젯 작성하기\n\n```js\n  T orientationAction<T>({\n    required T Function() onPortrait,\n    required T Function() onLandscape,\n  }) {\n    if (MediaQuery.of(this).orientation == Orientation.landscape) {\n      return onLandscape();\n    }\n    return onPortrait();\n  }\n```\n\n<br>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*aFEZr6_WdUFq3-DRjnYm9g.gif\" />\n\n<div class=\"content-ad\"></div>\n\n# 위젯 확장\n\n위젯을 확장하려면 먼저 확장 프로젝트를 만들고 위젯에 적용하세요.\n\n```js\nextension WidgetExt on Widget {\n\n    // 여기에 확장 함수를 넣으세요\n\n}\n```\n\n- 위젯 확장하기\n\n<div class=\"content-ad\"></div>\n\n```js\n확장된확장({int flex = 1}) => Expanded(\n        flex: flex,\n        child: this,\n      );\n```\n\n2. 투명도 설정\n\n```js\n투명도설정(double val) => Opacity(\n        opacity: val,\n        child: this,\n      );\n```\n\n3. Padding 추가하기\n\n<div class=\"content-ad\"></div>\n\n```js\nPadding withPadding(EdgeInsets padding) => Padding(\n        padding: padding,\n        child: this,\n      );\n```\n\n4. Wrap with SizedBox\n\n```js\nSizedBox box({double? width, double? height}) =>\n      SizedBox(width: width, height: height, child: this);\n```\n\n5. Centerize It!\n\n<div class=\"content-ad\"></div>\n\n```js\n  Center center() => Center(\n    child: this,\n  );\n```\n\n6. 클릭 가능하게 만들기\n\n```js\nWidget onClick(Function() onClick) => InkWell(\n        onTap: onClick,\n        child: this,\n      );\n```\n\n7. 회전하기!\n\n<div class=\"content-ad\"></div>\n\n```js\nRotatedBox rotate(int quarterTurns) => RotatedBox(\n  quarterTurns: quarterTurns,\n  child: this,\n);\n```\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*4Wh8PWVfCj2Jf3wlfSELYA.gif)\n\n# C. Extension on String\n\n먼저 확장 기능을 만들고 문자열을 확장하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nextension StringExt on String {\n\n  // 여기에 EXT 함수 추가하세요\n\n}\n```\n\n- 텍스트 위젯으로 변환\n\n```js\nText get text => Text(this);\n```\n\n2. 매치해 보세요!\n\n<div class=\"content-ad\"></div>\n\n```js\n// 8자리 문자, 소문자, 대문자, 숫자를 포함해야 함\nbool isValidPassword() {\n  return RegExp(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}$').hasMatch(this);\n}\n\nbool isValidEmail() {\n  return RegExp(r'^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$').hasMatch(this);\n}\n\nbool isURL() {\n  // 간단한 URL 패턴에 대한 정규 표현식\n  RegExp urlRegExp = RegExp(\n    r'^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$',\n    caseSensitive: false,\n    multiLine: false,\n  );\n\n  return urlRegExp.hasMatch(this);\n}\n```\n\n3. 기타 내용\n\n```js\nString append(String other) => '$this$other';\n\nString get capitalizeFirstLetter =>\n    this.isNotEmpty ? this[0].toUpperCase() + this.substring(1) : this;\n\nString get removeWhitespace => this.replaceAll(RegExp(r'\\s+'), '');\n\n// 형식: yyyy-MM-dd HH:mm:ss\nDateTime toDateTime() {\n  return DateTime.parse(this);\n}\n```\n\n# D. Num 확장\n\n<div class=\"content-ad\"></div>\n\n먼저 Extension을 만들고 num을 확장하세요.\n\n```js\nextension NumExt on num {\n\n    // 여기에 EXT 함수를 넣어주세요\n\n}\n```\n\n- 수직 및 수평 간격을 간단하게 만듭니다.\n\n```js\nSizedBox get heightBox => SizedBox(\n        height: toDouble(),\n      );\n\nSizedBox get widthBox => SizedBox(\n        width: toDouble(),\n      );\n```\n\n<div class=\"content-ad\"></div>\n\n2. 패딩으로 변환\n\n```js\nEdgeInsets get allPadding => EdgeInsets.all(toDouble());\n\nEdgeInsets get verticalPadding => EdgeInsets.symmetric(vertical: toDouble());\n\nEdgeInsets get horizontalPadding => EdgeInsets.symmetric(horizontal: toDouble());\n\nEdgeInsets get leftPadding => EdgeInsets.only(left: toDouble());\n\nEdgeInsets get rightPadding => EdgeInsets.only(right: toDouble());\n\nEdgeInsets get topPadding => EdgeInsets.only(top: toDouble());\n\nEdgeInsets get bottomPadding => EdgeInsets.only(bottom: toDouble());\n```\n\n3. 기간으로 변환\n\n```js\nDuration get microseconds => Duration(microseconds: toInt());\n\nDuration get milliseconds => Duration(milliseconds: toInt());\n\nDuration get seconds => Duration(seconds: toInt());\n\nDuration get minutes => Duration(minutes: toInt());\n\nDuration get hours => Duration(hours: toInt());\n\nDuration get days => Duration(days: toInt());\n```\n\n<div class=\"content-ad\"></div>\n\n# 기타\n\n- DateTime 확장\n\n```js\nextension DateTimeExt on DateTime {\n  bool isToday() {\n    final now = DateTime.now();\n    return day == now.day && month == now.month && year == now.year;\n  }\n\n  bool isYesterday() {\n    final now = DateTime.now();\n    final yesterday = DateTime(now.year, now.month, now.day - 1);\n    return day == yesterday.day &&\n        month == yesterday.month &&\n        year == yesterday.year;\n  }\n\n  // yyyy-mm-dd\n  String get stringFormat => toIso8601String().substring(0, 10);\n}\n```\n\n2. 파일 확장\n\n<div class=\"content-ad\"></div>\n\n```js\nextension FileExt on File {\n  Future<Uint8List?> toUint8List() async {\n    try {\n      List<int> bytes = await readAsBytes();\n      Uint8List uint8List = Uint8List.fromList(bytes);\n      return uint8List;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  bool isImageFile() {\n    final String extension = path.split('.').last.toLowerCase();\n    return ['jpg', 'jpeg', 'png', 'gif', 'bmp'].contains(extension);\n  }\n\n  bool isVideoFile() {\n    final String extension = path.split('.').last.toLowerCase();\n    return ['mp4', 'avi', 'mkv', 'mov', 'wmv', 'flv', 'webm'].contains(extension);\n  }\n\n  bool isAudioFile() {\n    final String extension = path.split('.').last.toLowerCase();\n    return ['mp3', 'wav', 'ogg', 'aac', 'flac', 'm4a', 'wma'].contains(extension);\n  }\n}\n```\n\n3. Scope Function Extension\n\n```js\nextension ScopeFunctionExt<T> on T {\n\n  // Do Something on The Object and returns Something\n  R map<R>(R Function(T) block) {\n    return block(this);\n  }\n\n  // Do Something on The Object and returns The Object\n  T apply(Function(T) block) {\n    block(this);\n    return this;\n  }\n}\n```\n\n플러터에서 확장 메서드에 대한 코드 팁을 보여드렸습니다. 생산성을 높이는 데 도움이 되는 내용일지 모릅니다. 만약 이 기사가 유익했다면 👏 박수를 보내주시고, 휴대폰 개발에 관한 다양한 기사를 확인하시려면 팔로우해주세요. 감사합니다. 계속해서 생산적이세요 🔥\n\n<div class=\"content-ad\"></div>\n\n아래는 제 GitHub에서 제 쿨한 프로젝트들을 확인해보세요:\n\n# 나와 소통하기:\n\n- Medium\n- GitHub\n- LinkedIn\n\n<div class=\"content-ad\"></div>\n\n# Stackademic\n\n끝까지 읽어 주셔서 감사합니다. 떠나기 전에:\n\n- 작가를 칭찬하고 팔로우해 주시면 감사하겠습니다! 👏\n- Twitter(X), LinkedIn, YouTube에서 팔로우해 주세요.\n- 세계적으로 프로그래밍 교육을 무료로 더 democra타이징하는 Stackademic.com 방문하기.\n","ogImage":{"url":"/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png"},"coverImage":"/assets/img/2024-06-21-FlutterExtensionsTrickstoBoostYourProductivity_0.png","tag":["Tech"],"readingTime":10},{"title":"정규 표현식 쉽게 배우기 5부 - 전방탐색과 후방탐색 기법 알아보기","description":"","date":"2024-06-21 21:37","slug":"2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds","content":"\n\n<img src=\"/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_0.png\" />\n\n크레딧: Nguyễn Thành Minh (안드로이드 개발자)\n\nPart 1은 여기에서 확인하세요: Quantifiers\n\nPart 2은 여기에서 확인하세요: Flavors, Flags, and Assertions\n\n<div class=\"content-ad\"></div>\n\n아래의 테이블 태그를 마크다운 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n룩어헤드 어설션은 특정 문자로 뒤따라오거나 선행하는 경우에만 일치하는 비캡처 그룹입니다.\n\n룩어헤드 어설션은 입력 문자열이나 텍스트의 문자를 소비하지 않습니다. 다른 어설션 메타 문자인 입력 경계 어설션 (^와 $) 및 단어 경계 어설션 (\\b와 \\B)과 달리.\n\n룩어헤드 어설션에는 두 가지 유형이 있습니다: 앞봐기(lookahead)와 뒷봐기(lookbehind). 두 유형은 양수와 음수 형태로 나뉘며, 양수 앞봐기, 음수 앞봐기, 양수 뒷봐기 및 음수 뒷봐기 어설션이 있습니다.\n\n- 양수 앞봐기(?=chars)\n\n<div class=\"content-ad\"></div>\n\n프렌들리한 톤으로 번역해드리겠습니다. 😀\n\n긍정형 선행 단언은 문자열에서 현재 위치 이후에 특정 패턴이 일치하는지를 확인하며 해당 문자열에서 문자를 소비하지 않습니다. 간단히 말하면, 특정 표현식이 현재 위치 오른쪽에 위치하는지를 확인합니다. 이는 다음과 같은 구문을 사용하여 나타냅니다:\n\n```js\n(?=chars)\n```\n\n예를 들어, 패턴 x(?=y)는 y가 뒤따라오는 경우에만 x와 일치합니다.\n\n[이미지:RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_1.png]\n\n<div class=\"content-ad\"></div>\n\n다른 예시로, xyz(?=123)는 xyz와 일치하는 것이 123로 뒤 따르는 경우에만 일치합니다.\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_2.png)\n\n또 다른 예시로, apple (?=pie)\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_3.png)\n\n<div class=\"content-ad\"></div>\n\n위 예제에서, 'apple'과 일치하는 부분은 있지만 'apple pie' 전체까지는 일치하지 않습니다. 왜냐하면 lookaround 어서션은 입력 문자열의 문자들을 소비하지 않기 때문입니다.\n\n만약 x(?=y)를 (?=y)x로 바꾼다면 어떻게 될까요? 패턴 (?=y)x를 이해하기 위해서는 먼저 패턴 (?=y)와 (?=y)y를 이해해야 합니다.\n\n패턴 (?=y)는 'y'가 뒤따라오는 문자열과 일치하지만, 그 앞에는 다른 문자열이 없는 경우를 의미합니다. 따라서 아래 이미지에서 볼 수 있듯이 \"빈 문자열\"과 일치하게 됩니다. 이 경우 빈 문자열 중에서 'y'가 뒤따라오는 것에만 일치하며, 모든 빈 문자열과는 일치하지 않음에 유의해 주세요.\n\n<img src=\"/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_4.png\" />\n\n<div class=\"content-ad\"></div>\n\nThe pattern (?=y)은 ‘y’ 바로 앞에 오는 빈 문자열과 일치합니다. 그래서, 패턴 (?=y)y는 ‘y’ 앞의 빈 문자열과 바로 ‘y’ 문자 뒤에 옵니다. 보다 쉬운 용어로 표현하자면, 이는 단순히 문자 ‘y’에 해당합니다.\n\n![](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_5.png)\n\n비슷하게, 패턴 (?=y)x는 ‘y’ 앞에 오는 빈 문자열과 바로 ‘x’ 문자 뒤에 오는 것을 나타냅니다. 다시 말해, 이는 'x' 문자 하나로만 구성되어야 하지만 'y'로 시작해야 하는 문자열과 일치합니다. 이러한 시나리오는 불가능하기 때문에, 이 패턴은 어떤 문자열과도 일치하지 않습니다.\n\n![](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_6.png)\n\n<div class=\"content-ad\"></div>\n\n만약 우리가 (?=y)x와 같은 패턴에 .*을 삽입한다면 어떻게 될까요? (?=.*y)x가 되는데, 이 경우 'x'가 'xy', 'x123y', 'x1y2z3'와 같이 'y'가 뒤에 오는 경우에 일치합니다.\n\n![이미지](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_7.png)\n\n먼저, 이 패턴이 단 한 문자 'x'만 일치한다는 점은 확실합니다. 왜냐하면 (?=.*y)는 단언이기 때문에 문자를 소비하지 않기 때문입니다.\n\n그런 다음, 패턴 (?=.*y)가 어떻게 작동하는지 이해해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n- .*: 새 줄 제외한 모든 문자 시퀀스와 일치합니다.\n- y: 문자 `y`와 일치합니다.\n- 따라서, .*y는 적어도 하나의 문자 `y`를 포함하는 모든 문자열과 일치합니다.\n\n그러므로, (?=.*y)는 'y'가 뒤따르는 빈 문자열과 일치합니다.\n\n![이미지](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_8.png)\n\n마지막으로, 패턴 (?=.*y)x는 'y'가 뒤따르는 문자열(예: `xy,`, `x123y,`, `x1y2` 등)에서 단일 문자 `x`와 일치합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_9.png)\n\n이 경우에는 .*가 ‘x’와 일치하기 때문에 .*y 전체가 ‘xy’와 일치하지만 ‘yx’와는 일치하지 않습니다. 그래서 (?=.*y)x는 ‘yx’와 일치하지 않습니다. 이를 그룹화하여 확인할 수 있습니다: (?=(.*)y)x\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_10.png)\n\n그룹 (.*)는 ‘x’, ‘xz’, ‘xbc’와 일치하는 것을 볼 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n간단히 말해서, (?=.*y)는 문자열에 적어도 하나의 'y' 문자가 있는지 확인하는 데 일반적으로 사용됩니다. 비슷하게, 다음과 같은 유용한 패턴들이 있습니다:\n\n- (?=.*[a-z]).+는 적어도 하나의 소문자가 있는 문자열과 일치합니다.\n- (?=.*[A-Z]).+는 적어도 하나의 대문자가 있는 문자열과 일치합니다.\n- (?=.*\\d).+는 적어도 하나의 숫자가 있는 문자열과 일치합니다.\n- (?=.*[^A-Za-z0–9\\s]).+는 공백을 제외한 특수 문자가 적어도 하나 있는 문자열과 일치합니다.\n\n긍정적인 선행 단언은 비밀번호 유효성을 확인하는 데 유용할 수 있습니다. 예를 들어, 적어도 하나의 대문자, 소문자, 숫자, 및 (공백을 제외한) 하나의 특수 문자를 포함하는 8자 이상의 비밀번호를 확인하려면 다음과 같이 할 수 있습니다:\n\n```js\n^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[^A-Za-z0-9\\s]).{8,}$\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_11.png\" />\n\n여기서:\n\n- ^: 패턴을 문자열의 시작으로 고정시킵니다.\n- (?=.*[A-Z]): 적어도 하나의 대문자가 존재하는 것을 보증합니다.\n- (?=.*[a-z]): 적어도 하나의 소문자가 존재하는 것을 보증합니다.\n- (?=.*\\d): 적어도 하나의 숫자가 존재하는 것을 보증합니다.\n- (?=.*[^A-Za-z0-9\\s]): 적어도 하나의 특수문자(공백 제외)가 존재하는 것을 보증합니다.\n- .'8,': 적어도 8자의 문자열과 일치합니다.\n- $: 패턴을 문자열의 끝으로 고정시킵니다.\n\n2. 부정형 순방향탐색 (?!chars)\n\n<div class=\"content-ad\"></div>\n\n부정적 룩어헤드 구문에서는 등호를 느낌표로 바꿉니다:\n\n```js\n(?!chars)\n```\n\n예를 들어, x(?!y) 패턴은 'y'에 뒤이어 나오지 않는 경우에만 'x'와 일치합니다.\n\n다른 예로는 x(?!123) 패턴으로, '123'에 뒤이어 나오지 않는 경우에만 'x'와 일치합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_12.png)\n\n부정적 전방탐색 어설션은 특정 단어로 시작하지 않는 문자열을 유효성 검사하는 데 유용할 수 있습니다. 예를 들어, 'http' 또는 'https'로 시작하지 않는 URL을 유효성 검사하는 것입니다.\n\n```js\n^(?!http|https).+$\n```\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_13.png)\n\n\n<div class=\"content-ad\"></div>\n\n위의 패턴에서, ^는 현재 위치가 문자열의 시작임을 나타내며, 부정 후조형 (?!http|https)는 현재 위치 뒤의 문자열이 \"http\" 또는 \"https\"가 아님을 나타냅니다. 이는 \"http\" 또는 \"https\"로 시작하지 않는 문자열과 일치합니다.\n\n3. 긍정 후조형 (?`=chars)\n\n후조형 단언은 후조 단언과 유사합니다. 하지만 일치하려는 항목 뒤에 무엇이 따라오는지 확인하는 대신, 일치하려는 항목 앞에 어떤 문자(들)가 있는지 확인합니다.\n\n후조 단언과 마찬가지로, 긍정과 부정 후조 단언도 있습니다. 긍정 후조는 패턴에서 지정한 다른 문자에 의해 선행된 문자만 일치시킵니다. 반면에 부정 후조는 일치시키려는 문자가 다른 문자에 의해 선행되지 않을 때만 일치시킵니다.\n\n<div class=\"content-ad\"></div>\n\n이것은 긍정형 lookbehind의 구문입니다:\n\n```js\n(?<=chars)\n```\n\n예를 들어, 패턴 (?`=x)y는 y를 일치시키려면 그 앞에 x가 있어야 한다는 것을 나타냅니다. 이 경우 xx 또는 yx는 일치하지 않지만 xy는 일치합니다.\n\n긍정형 lookbehind 어설션은 특정 통화 기호로만 선행된 숫자와 일치하는 경우에 유용할 수 있습니다. 예를 들어, 달러 기호로 선행된 숫자와 일치하는 경우입니다.\n\n<div class=\"content-ad\"></div>\n\n아래의 정규 표현식 패턴은 달러 기호가 앞에 오는 숫자만 일치시키는 양수형 룩비하인드를 갖고 있어요:\n\n```js\n(?<=\\$)\\d+\n```\n\n<img src=\"/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_14.png\" />\n\n위 패턴에서 양수형 룩비하인드인 (?`=\\$) 는 달러 기호인 '$' 가 \\d+에 의해 표현되는 하나 이상의 숫자 앞에 있는지를 확인합니다.\n\n<div class=\"content-ad\"></div>\n\n4. Negative lookbehind (?`!chars)\n\n부정적인 lookbehind에서는 등호 대신 느낌표를 사용합니다:\n\n```js\n(?<!chars)\n```\n\n예를 들어, 패턴 (?`!x)y는 y 앞에 x가 있는 경우 y와 일치하지 않습니다. 이 경우 vy는 일치하고, ny는 일치하지만 xy는 결코 일치하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n부정적인 전방탐색 단언은 특정 확장자로 끝나지 않는 파일을 유효성 검사할 때 유용할 수 있습니다. 예를 들어, \"js\", \"css\", 또는 \"html\"로 끝나지 않는 파일 경로를 유효성 검사하려면 아래와 같이 사용할 수 있습니다.\n\n```js\n^.+(?<!js|css|html)$\n```\n\n![image](/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_15.png)\n\n위 패턴에서 $는 현재 위치가 문자열 끝을 나타내고, 부정적인 전방탐색 (?`!js|css|html)는 현재 위치(끝 위치) 앞에 있는 문자열이 \"js\", \"css\", 또는 \"html\"이 아님을 나타냅니다. 즉, \"js\", \"css\", \"html\"로 끝나지 않는 문자열과 일치합니다.\n\n<div class=\"content-ad\"></div>\n\n결론\n\n정규 표현식에서 이 개념이 제일 어려웠어요. 이번 레슨 이후에는 대부분의 문제를 해결하는 데 정규 표현식을 사용할 수 있을 것으로 믿어요. 다음 파트에서는 프로그래밍에 적용해볼 거에요.","ogImage":{"url":"/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_0.png"},"coverImage":"/assets/img/2024-06-21-RegexforDummiesPart5LookaroundAssertionsLookaheadsandLookbehinds_0.png","tag":["Tech"],"readingTime":7},{"title":"Execution failed for task appcheckDebugDuplicateClasses 에러 해결하는 방법","description":"","date":"2024-06-21 21:35","slug":"2024-06-21-HowtofixExecutionfailedfortaskappcheckDebugDuplicateClasses","content":"\n\n```js\r\n실패: 예외로 빌드가 실패했습니다.\n\n* 무엇이 잘못되었나요:\n:app:checkDebugDuplicateClasses 작업을 실행하는 동안 실행이 실패했습니다.\n> com.android.build.gradle.internal.tasks.CheckDuplicatesRunnable을 실행하는 동안 오류가 발생했습니다.\n   > 모듈 jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10)와 jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)에서 발견된 중복 클래스 kotlin.collections.jdk8.CollectionsJDK8Kt\n     모듈 jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10)와 jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)에서 발견된 중복 클래스 kotlin.internal.jdk8.JDK8PlatformImplementations\n     모듈 jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10)와 jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)에서 발견된 중복 클래스 kotlin.internal.jdk8.JDK8PlatformImplementations$ReflectSdkVersion\n     모듈 jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10)와 jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)에서 발견된 중복 클래스 kotlin.jvm.jdk8.JvmRepeatableKt\n     모듈 jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10)와 jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)에서 발견된 중복 클래스 kotlin.random.jdk8.PlatformThreadLocalRandom\n     모듈 jetified-kotlin-stdlib-1.8.10 (org.jetbrains.kotlin:kotlin-stdlib:1.8.10)와 jetified-kotlin-stdlib-jdk8-1.6.21 (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21)에서 발견된 중복 클래스 kotlin.streams.jdk8.StreamsKt\n     ...\n  \n* 해결 방법:\n> 스택 트레이스를 가져오려면 --stacktrace 옵션을 사용하십시오.\n> 더 많은 로그 출력을 얻으려면 --info 또는 --debug 옵션으로 실행하십시오.\n> 전체 통찰을 얻으려면 --scan으로 실행하십시오.\n\n* https://help.gradle.org에서 더 많은 도움을 받을 수 있습니다.\n\n빌드 완료: 1 분 9 초 \nGradle 작업 'assembleDebug' 실행 중...                             72.5초\n예외: Gradle 작업 assembleDebug의 종료 코드가 1로 실패했습니다\r\n```\n\n저는 zegocloud SDK를 활용한 앱을 생성하면서 이 오류를 만났어요.\n\n이 오류를 해결하는 방법은 간단합니다. 아래 코드 라인을 추가하는 것뿐이에요.\n\n```js\next.kotlin_version = '1.8.0-Beta'\n```\n\n<div class=\"content-ad\"></div>\n\nAndroid build.gradle 파일에서 작업하고 있군요.\n\n다음과 같이 수정하면 됩니다.\n\n```js\nbuildscript {\n    ext.kotlin_version = '1.7.10'\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.2.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nbuildscript {\n    ext.kotlin_version = '1.8.0-Beta'\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.2.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n```\n\n그 다음 앱을 다시 실행하면 문제가 해결될 것입니다.","ogImage":{"url":"/assets/img/2024-06-21-HowtofixExecutionfailedfortaskappcheckDebugDuplicateClasses_0.png"},"coverImage":"/assets/img/2024-06-21-HowtofixExecutionfailedfortaskappcheckDebugDuplicateClasses_0.png","tag":["Tech"],"readingTime":3}],"page":"15","totalPageCount":29,"totalPageGroupCount":2,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}