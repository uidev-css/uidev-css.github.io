{"pageProps":{"post":{"title":"Flutter 앱에 Gemini 연동 방법","description":"","date":"2024-06-22 05:06","slug":"2024-06-22-IntegratingGeminiIntoFlutterApp","content":"\n\n안녕하세요 여러분! 이 기사에서는 플러터 프로젝트에서 제미니를 사용하는 방법에 대해 이야기하고 싶습니다.\n\n![Gemini](/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_0.png)\n\n## 제미니란 무엇인가요?\n제미니 AI는 구글의 최첨단 AI 모델로, 인공지능 분야에서의 중요한 발전을 이루었습니다. 이 모델은 다양한 형식인 텍스트, 이미지, 오디오 및 비디오와 같은 콘텐츠를 이해하고 처리할 수 있는 다재다능한 기능으로 눈에 띕니다.\n\n<div class=\"content-ad\"></div>\n\n젬니의 능력과 다양한 변형:\n\n젬니는 특정 사용자 요구 사항을 충족하기 위해 세 가지 다른 변형을 제공합니다:\n\n젬니 1.5 Pro: 이 신기술 모델은 AI의 경계를 넓혀 다양한 입력 형식인 오디오, 시각, 비디오, 텍스트를 처리합니다. 이 모델은 텍스트 생성, 코딩, 문제 해결, 데이터 추출과 같은 복잡한 작업에 뛰어납니다.\n\n젬니 1.5 Flash: 민첩성으로 유명한 이 모델은 다양한 형식의 입력을 신속하게 처리하여 텍스트 결과물을 생성합니다. 이 모델의 다재다능함으로 다양한 작업에 효과적입니다.\n\n<div class=\"content-ad\"></div>\n\n젬니 1.0 Pro: 자연어 처리 작업에 특화된 이 모델은 다양한 텍스트 및 코드 대화, 코드 생성과 같은 영역에서 우수한 성능을 보여줍니다.\n\n언어 지원 및 API 액세스\n\n젬니 모델은 약 40가지 다른 언어에서 작동하도록 훈련되어 다양한 사용자를 대상으로 합니다. 게다가, 젬니 API를 통해 개발자들은 이 강력한 AI 모델을 자신의 프로젝트에 통합할 수 있는 기회를 제공받습니다.\n\n![이미지](/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_1.png)\n\n<div class=\"content-ad\"></div>\n\n## 플러터 프로젝트에 Gemini 통합하기 단계별 안내\n\nAPI 키를 안전하게 보관하고 절대 공개하지 마세요.\n\n![Gemini 통합 이미지](/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_2.png)\n\n다음 명령을 실행하여 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n\nflutter pub add google_generative_ai\r\n\n\r\n이 패키지를 사용하려면 다트 코드에 이 줄을 추가하세요:\r\n\r\n```dart\r\nimport 'package:google_generative_ai/google_generative_ai.dart';\r\n```\r\n\r\n```dart\r\nimport 'package:google_generative_ai/google_generative_ai.dart';\r\n\r\nfinal apiKey = Platform.environment['API_KEY'];\r\n\r\nfinal model = GenerativeModel(model: 'MODEL_NAME', apiKey: apiKey);\r\n```\n\n<div class=\"content-ad\"></div>\n\n[model] 인자는 `gemini-1.5-flash-latest`와 같은 모델 이름 또는 `models/gemini-1.5-flash-latest`와 같은 모델 코드가 될 수 있습니다.\n\nGenerativeModel을 자세히 살펴봅시다.\n\n## GenerativeModel이란 무엇인가요?\n\nGenerativeModel 클래스는 텍스트, 이미지 또는 기타 콘텐츠를 생성하는 데 상호 작용하는 큰 언어 모델 (LLM)을 나타냅니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n(new) GenerativeModel GenerativeModel({\n  필수 요소 String model,\n  필수 요소 String apiKey,\n  List<SafetySetting> safetySettings = const [],\n  GenerationConfig? generationConfig,\n  List<Tool>? tools,\n  Client? httpClient,\n  RequestOptions? requestOptions,\n  Content? systemInstruction,\n  ToolConfig? toolConfig,\n})\n```\n\nmodel 및 apiKey는 필수입니다. 다른 매개변수들은 선택 사항입니다.\n\n매개변수 설명\n\n필수 요소 String model: 사용하려는 특정 LLM의 이름 또는 식별자입니다 (예: \"models/text-bison-001\"). Gemini는 다양한 기능을 가진 여러 모델을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n다음은 문서의 번역입니다:\n\n`apiKey` 필수 문자열: Google Cloud에서 획득한 API 키는 요청을 인증하고 Gemini API에 액세스하는 데 필요합니다.\n\nList`SafetySetting` safetySettings: 안전 설정은 LLMs와 작업할 때 중요한 측면입니다. 이러한 설정을 사용하면 모델 출력에 적용되는 콘텐츠 필터를 제어하여 해로운 또는 부적절한 콘텐츠 생성을 방지할 수 있습니다.\n\nGenerationConfig? generationConfig: 이 매개변수는 모델이 응답을 생성하는 방식을 구성합니다. 다음과 같은 옵션이 포함되어 있습니다.\n\n- temperature: 출력의 무작위성을 제어합니다(높은 값은 더 창의적이지만 정확하지 않을 수 있음).\n- topP: 무작위성을 제어하는 대안적인 방법입니다.\n- topK: 각 단계에서 상위 K개의 가장 가능성이 높은 단어를 고려하도록 모델을 제한합니다.\n- maxOutputTokens: 생성된 응답의 길이에 대한 최대 제한을 설정합니다.\n\n<div class=\"content-ad\"></div>\n\nList`Tool`? tools: 일부 LLM(라이프사이클 매니저)는 특히 최신 버전은 외부 도구를 사용하여 기능을 강화할 수 있습니다. 예를 들어, 계산기 도구는 수학 문제를 해결하는 데 도움이 될 수 있습니다.\n\nClient? httpClient: API 요청을 만들기 위한 사용자 지정 HTTP 클라이언트입니다. 일반적으로 특별한 네트워크 요구사항이 없는 경우 기본 클라이언트를 신뢰할 수 있습니다.\n\nRequestOptions? requestOptions: API 요청 동작을 세밀하게 조정하기 위한 추가 옵션입니다.\n\nContent? systemInstruction: LLM의 전반적인 동작과 응답을 안내하는 지침입니다.\n\n<div class=\"content-ad\"></div>\n\nToolConfig? toolConfig: 모델에서 사용하는 외부 도구에 대한 추가 구성 옵션입니다.\n\n이제 플러터 프로젝트에서 Gemini AI를 사용할 수 있습니다.\n\n## 사용 예시:\n\nGemini를 사용하여 스토리 앱을 만들고 싶다고 가정해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\n최종 모델 = 생성 모델(\n    모델: '젬니 1.5 프로',\n    apiKey: Apiclass.apiKey,\n    시스템명령: Content.system('당신은 이야기꾼이에요. 당신은 짧은 공포 이야기를 만드는 것을 좋아해요.'),);\n      \n콘텐츠 = [\n    Content.text(\n        \"이야기를 써라\")\n    ];\n\n응답 = await model.generateContent(content);\r\n```\n\n이 코드를 사용하면 Gemini는 짧은 공포 이야기를 좋아하는 이야기꾼처럼 행동합니다. \"응답\"에는 짧은 공포 이야기가 생성됩니다.\n\n일부 UI 디자인 코드를 추가하면 결과물은 다음과 같습니다:\n\n![이미지](/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_3.png)\n\n<div class=\"content-ad\"></div>\n\n스토리 앱의 모든 코드에 접근하려면 제 Github 페이지를 방문해 주세요!\n\n더 많은 정보를 얻으시려면 Gemini API 문서와 Google AI 포럼을 방문하는 것을 잊지 마세요.\n\n제 글을 읽어 주셔서 감사합니다. 연락을 원하시면 LinkedIn과 Twitter 계정을 통해 저에게 연락하실 수 있습니다. 다음 글에서 뵙겠습니다!","ogImage":{"url":"/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_0.png"},"coverImage":"/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 여러분! 이 기사에서는 플러터 프로젝트에서 제미니를 사용하는 방법에 대해 이야기하고 싶습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_0.png\" alt=\"Gemini\"></p>\n<h2>제미니란 무엇인가요?</h2>\n<p>제미니 AI는 구글의 최첨단 AI 모델로, 인공지능 분야에서의 중요한 발전을 이루었습니다. 이 모델은 다양한 형식인 텍스트, 이미지, 오디오 및 비디오와 같은 콘텐츠를 이해하고 처리할 수 있는 다재다능한 기능으로 눈에 띕니다.</p>\n<p>젬니의 능력과 다양한 변형:</p>\n<p>젬니는 특정 사용자 요구 사항을 충족하기 위해 세 가지 다른 변형을 제공합니다:</p>\n<p>젬니 1.5 Pro: 이 신기술 모델은 AI의 경계를 넓혀 다양한 입력 형식인 오디오, 시각, 비디오, 텍스트를 처리합니다. 이 모델은 텍스트 생성, 코딩, 문제 해결, 데이터 추출과 같은 복잡한 작업에 뛰어납니다.</p>\n<p>젬니 1.5 Flash: 민첩성으로 유명한 이 모델은 다양한 형식의 입력을 신속하게 처리하여 텍스트 결과물을 생성합니다. 이 모델의 다재다능함으로 다양한 작업에 효과적입니다.</p>\n<p>젬니 1.0 Pro: 자연어 처리 작업에 특화된 이 모델은 다양한 텍스트 및 코드 대화, 코드 생성과 같은 영역에서 우수한 성능을 보여줍니다.</p>\n<p>언어 지원 및 API 액세스</p>\n<p>젬니 모델은 약 40가지 다른 언어에서 작동하도록 훈련되어 다양한 사용자를 대상으로 합니다. 게다가, 젬니 API를 통해 개발자들은 이 강력한 AI 모델을 자신의 프로젝트에 통합할 수 있는 기회를 제공받습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_1.png\" alt=\"이미지\"></p>\n<h2>플러터 프로젝트에 Gemini 통합하기 단계별 안내</h2>\n<p>API 키를 안전하게 보관하고 절대 공개하지 마세요.</p>\n<p><img src=\"/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_2.png\" alt=\"Gemini 통합 이미지\"></p>\n<p>다음 명령을 실행하여 추가하세요:</p>\n<p>flutter pub add google_generative_ai</p>\n<p>이 패키지를 사용하려면 다트 코드에 이 줄을 추가하세요:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:google_generative_ai/google_generative_ai.dart'</span>;\n</code></pre>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:google_generative_ai/google_generative_ai.dart'</span>;\r\n\r\n<span class=\"hljs-keyword\">final</span> apiKey = Platform.environment[<span class=\"hljs-string\">'API_KEY'</span>];\r\n\r\n<span class=\"hljs-keyword\">final</span> model = GenerativeModel(model: <span class=\"hljs-string\">'MODEL_NAME'</span>, apiKey: apiKey);\n</code></pre>\n<p>[model] 인자는 <code>gemini-1.5-flash-latest</code>와 같은 모델 이름 또는 <code>models/gemini-1.5-flash-latest</code>와 같은 모델 코드가 될 수 있습니다.</p>\n<p>GenerativeModel을 자세히 살펴봅시다.</p>\n<h2>GenerativeModel이란 무엇인가요?</h2>\n<p>GenerativeModel 클래스는 텍스트, 이미지 또는 기타 콘텐츠를 생성하는 데 상호 작용하는 큰 언어 모델 (LLM)을 나타냅니다.</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-keyword\">new</span>) <span class=\"hljs-title class_\">GenerativeModel</span> <span class=\"hljs-title class_\">GenerativeModel</span>({\n  필수 요소 <span class=\"hljs-title class_\">String</span> model,\n  필수 요소 <span class=\"hljs-title class_\">String</span> apiKey,\n  <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">SafetySetting</span>> safetySettings = <span class=\"hljs-keyword\">const</span> [],\n  <span class=\"hljs-title class_\">GenerationConfig</span>? generationConfig,\n  <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Tool</span>>? tools,\n  <span class=\"hljs-title class_\">Client</span>? httpClient,\n  <span class=\"hljs-title class_\">RequestOptions</span>? requestOptions,\n  <span class=\"hljs-title class_\">Content</span>? systemInstruction,\n  <span class=\"hljs-title class_\">ToolConfig</span>? toolConfig,\n})\n</code></pre>\n<p>model 및 apiKey는 필수입니다. 다른 매개변수들은 선택 사항입니다.</p>\n<p>매개변수 설명</p>\n<p>필수 요소 String model: 사용하려는 특정 LLM의 이름 또는 식별자입니다 (예: \"models/text-bison-001\"). Gemini는 다양한 기능을 가진 여러 모델을 제공합니다.</p>\n<p>다음은 문서의 번역입니다:</p>\n<p><code>apiKey</code> 필수 문자열: Google Cloud에서 획득한 API 키는 요청을 인증하고 Gemini API에 액세스하는 데 필요합니다.</p>\n<p>List<code>SafetySetting</code> safetySettings: 안전 설정은 LLMs와 작업할 때 중요한 측면입니다. 이러한 설정을 사용하면 모델 출력에 적용되는 콘텐츠 필터를 제어하여 해로운 또는 부적절한 콘텐츠 생성을 방지할 수 있습니다.</p>\n<p>GenerationConfig? generationConfig: 이 매개변수는 모델이 응답을 생성하는 방식을 구성합니다. 다음과 같은 옵션이 포함되어 있습니다.</p>\n<ul>\n<li>temperature: 출력의 무작위성을 제어합니다(높은 값은 더 창의적이지만 정확하지 않을 수 있음).</li>\n<li>topP: 무작위성을 제어하는 대안적인 방법입니다.</li>\n<li>topK: 각 단계에서 상위 K개의 가장 가능성이 높은 단어를 고려하도록 모델을 제한합니다.</li>\n<li>maxOutputTokens: 생성된 응답의 길이에 대한 최대 제한을 설정합니다.</li>\n</ul>\n<p>List<code>Tool</code>? tools: 일부 LLM(라이프사이클 매니저)는 특히 최신 버전은 외부 도구를 사용하여 기능을 강화할 수 있습니다. 예를 들어, 계산기 도구는 수학 문제를 해결하는 데 도움이 될 수 있습니다.</p>\n<p>Client? httpClient: API 요청을 만들기 위한 사용자 지정 HTTP 클라이언트입니다. 일반적으로 특별한 네트워크 요구사항이 없는 경우 기본 클라이언트를 신뢰할 수 있습니다.</p>\n<p>RequestOptions? requestOptions: API 요청 동작을 세밀하게 조정하기 위한 추가 옵션입니다.</p>\n<p>Content? systemInstruction: LLM의 전반적인 동작과 응답을 안내하는 지침입니다.</p>\n<p>ToolConfig? toolConfig: 모델에서 사용하는 외부 도구에 대한 추가 구성 옵션입니다.</p>\n<p>이제 플러터 프로젝트에서 Gemini AI를 사용할 수 있습니다.</p>\n<h2>사용 예시:</h2>\n<p>Gemini를 사용하여 스토리 앱을 만들고 싶다고 가정해 봅시다.</p>\n<pre><code class=\"hljs language-js\">최종 모델 = 생성 모델(\n    모델: <span class=\"hljs-string\">'젬니 1.5 프로'</span>,\n    <span class=\"hljs-attr\">apiKey</span>: <span class=\"hljs-title class_\">Apiclass</span>.<span class=\"hljs-property\">apiKey</span>,\n    시스템명령: <span class=\"hljs-title class_\">Content</span>.<span class=\"hljs-title function_\">system</span>(<span class=\"hljs-string\">'당신은 이야기꾼이에요. 당신은 짧은 공포 이야기를 만드는 것을 좋아해요.'</span>),);\n      \n콘텐츠 = [\n    <span class=\"hljs-title class_\">Content</span>.<span class=\"hljs-title function_\">text</span>(\n        <span class=\"hljs-string\">\"이야기를 써라\"</span>)\n    ];\n\n응답 = <span class=\"hljs-keyword\">await</span> model.<span class=\"hljs-title function_\">generateContent</span>(content);\n</code></pre>\n<p>이 코드를 사용하면 Gemini는 짧은 공포 이야기를 좋아하는 이야기꾼처럼 행동합니다. \"응답\"에는 짧은 공포 이야기가 생성됩니다.</p>\n<p>일부 UI 디자인 코드를 추가하면 결과물은 다음과 같습니다:</p>\n<p><img src=\"/assets/img/2024-06-22-IntegratingGeminiIntoFlutterApp_3.png\" alt=\"이미지\"></p>\n<p>스토리 앱의 모든 코드에 접근하려면 제 Github 페이지를 방문해 주세요!</p>\n<p>더 많은 정보를 얻으시려면 Gemini API 문서와 Google AI 포럼을 방문하는 것을 잊지 마세요.</p>\n<p>제 글을 읽어 주셔서 감사합니다. 연락을 원하시면 LinkedIn과 Twitter 계정을 통해 저에게 연락하실 수 있습니다. 다음 글에서 뵙겠습니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}