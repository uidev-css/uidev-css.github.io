{"pageProps":{"post":{"title":"Flutter에서 MQTT로 ESP8266 IOT 기기 연결하는 방법 종합 가이드  PART I","description":"","date":"2024-06-22 05:09","slug":"2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI","content":"\n\n요즘에는 많은 IOT 기기들과 작업하고 있어요. 많은 기기들을 다루는 데 큰 어려움이 있어요. 운영, 데이터 수집, 유지관리 등을 모두 집중적으로 하기가 어려워요.\n\n![이미지](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_0.png)\n\n## 리얼타임 기기들이 클라우드와 어떻게 소통할 수 있는 가장 좋은 방법은 무엇인가요?\n\n![이미지](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_1.png)\n\n<div class=\"content-ad\"></div>\n\n# MQTT 프로토콜에 대해 알아봐요!!!!!!!!\n\n이 글에서는 다음의 내용을 다룹니다.\n\n- MQTT 브로커와의 ESP8266 연결\n- MQTT 브로커와의 Flutter 연결\n\n가이드를 두 부분으로 나눴어요.\n\n<div class=\"content-ad\"></div>\n\n첫 번째 파트에서는 우리의 브로커와 Esp8266을 구성하는 방법에 대해 다룹니다.\n\n두 번째 파트에서는 어플리케이션에서 데이터를 읽고 쓰는 방법에 대해 다룹니다.\n\n## MQTT 브로커란 무엇인가요?\n\n아키텍처 사이에서 중개자 역할을 한다고 생각해보세요. Esp8266 장치는 데이터를 브로커로 보내고, 거기서 데이터가 저장됩니다. 그런 후 어플리케이션은 MQTT 브로커에 연결하여 데이터에 접근할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_2.png](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_2.png)\n\n**참고:** 대부분의 경우, 데이터를 처리하기 위해 백엔드가 필요하고 응용 프로그램이 이에 액세스하지만, MQTT를 사용하여 연결하고 데이터를 보내는 방법을 알고 나면 쉽다는 것을 이 문서에서 다루지는 않습니다. 나중에 전체 IOT 인프라를 보여주는 글을 쓸 수도 있습니다.\n\n# 준비물\n\n- MQTT의 이해\n- 발행/구독 아키텍처의 기본 이해\n- ESP8266 Node MCU 모듈\n- Flutter 또는 다른 기본 프레임워크에 대한 이해\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_3.png)\n\n# 파트 1: 설정\n\n전체 아키텍처를 구현하려면 먼저 MQTT 브로커가 필요합니다. HiveMQ와 EMQX와 같은 많은 무료 브로커들이 있으며 Mosquitto를 사용하여 로컬 브로커를 만들 수도 있습니다.\n\n![image](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_4.png)\n\n\n<div class=\"content-ad\"></div>\n\nEMQX에 계정을 등록하고 브로커를 생성했습니다.\n\n![이미지](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_5.png)\n\n그런 다음 브로커에 액세스하는 데 사용될 몇 가지 사용자 계정을 만듭니다.\n\n![이미지](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_6.png)\n\n<div class=\"content-ad\"></div>\n\n# Part 2: ESP8266 펌웨어\n\n펌웨어 작업을 시작하기 전에 몇 가지 알아야 할 사항이 있습니다.\n\n웹에서 MQTT 브로커에 액세스할 때 TLS를 사용하거나 사용하지 않을 수 있습니다. 제 경험상 TLS를 사용하지 않고 브로커에 연결하려고 시도하면 Esp8266에서 작동하지 않습니다. 모든 연결 요청이 거부됩니다. 따라서 저는 연결을 가장 안전하게 만드는 방법을 보여드리겠습니다.\n\n- 브로커에서 인증서를 다운로드하십시오 (나중에 필요할 것입니다)\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_7.png)\n\n- Arduino IDE를 열고 Esp8266을 설정합니다.\n\nEsp8266을 사용해본 적이 없다면, 이 가이드를 따를 수 있습니다.\n\n우선 라이브러리를 가져오겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\n#include <ESP8266WiFi.h>\n\n#include <PubSubClient.h>\n\n// 이 부분은 선택 사항입니다. 센서 데이터로 보낼 무작위 숫자를 생성하기 위해 사용했습니다.\n#include <ESP8266TrueRandom.h>\n\n// 인터넷과의 시간 동기화에 사용됩니다.\n#include <time.h>\r\n```\n\n이제 자격 증명을 정의해 봅시다.\n\n```js\r\nconst char *ntp_server = \"0.pool.ntp.org\";     // 기본 NTP 서버\nconst long gmt_offset_sec = 0;            // GMT 오프셋(시간대에 맞게 조정)\nconst int daylight_offset_sec = 0;        // 일광 절약 시간 오프셋(초)\n\nconst char* SSID = \"************\";\nconst char* PASSWORD = \"************\";\n\nconst char* MQTT_HOST = \"************\"; // 브로커 대시보드에서 가져오세요\nconst int MQTT_PORT = 8883; // 기본 MQTT TCP TLS 포트\n\nconst char* MQTT_USERNAME = \"\";\nconst char* MQTT_PASSWORD = \"\";\nconst char* MQTT_TOPIC = \"test\";\n\nchar payload[10] = \"\";\n\nBearSSL::WiFiClientSecure espClient;\n\nPubSubClient mqtt_client(espClient);\r\n```\n\n이제 다운로드한 인증서 데이터를 입력해 봅시다. 텍스트 편집기로 해당 파일을 열어 내용을 복사하세요.\n\n<div class=\"content-ad\"></div>\n\n다음은 Markdown 형식으로 table 태그를 변경해주세요.\n\n```js\nstatic const char ca_cert[] = R\"EOF(\n|-----BEGIN CERTIFICATE-----|\n|---MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh---|\n|---MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3---|\n|---d3cuZGlnaWNlcnQuYa9tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD---|\n|-----END CERTIFICATE-----|\n)EOF\";\r\n```\n\n먼저, WiFi에 연결해야 합니다.\n\n```js\r\nvoid connectToWiFi() {\r\n    WiFi.begin(SSID, PASSWORD);\r\n    Serial.print(\"WiFi에 연결 중\");\r\n    while (WiFi.status() != WL_CONNECTED) {\r\n        delay(500);\r\n        Serial.print(\".\");\r\n    }\r\n    Serial.println(\"\\nWiFi 네트워크에 연결되었습니다\");\r\n}\r\n```\n\n<div class=\"content-ad\"></div>\n\n우리의 Esp8266과 시간을 동기화하기 위해 NTP(Network Time Protocol) 서버를 사용합니다.\n\n```js\nvoid syncTime() {\n    configTime(gmt_offset_sec, daylight_offset_sec, ntp_server);\n    \n    Serial.print(\"NTP 시간 동기화를 기다리는 중: \");\n\n    while (time(nullptr) < 8 * 3600 * 2) {\n        delay(1000);\n        Serial.print(\".\");\n    }\n\n    Serial.println(\"시간이 동기화되었습니다.\");\n    \n    struct tm timeinfo;\n    \n    if (getLocalTime(&timeinfo)) {\n        Serial.print(\"현재 시간: \");\n        Serial.println(asctime(&timeinfo));\n    \n    } else {\n        Serial.println(\"로컬 시간을 가져오지 못했습니다.\");\n    }\n}\n```\n\n브로커에 연결하려면 다음 함수를 사용할 것입니다.\n\n```js\nvoid connectToMQTTBroker() {\n    \n    // 우리의 인증서를 사용하여 신뢰할 수 있는 연결 요청을 수행합니다\n    BearSSL::X509List serverTrustedCA(ca_cert);\n\n    espClient.setTrustAnchors(&serverTrustedCA);\n\n    while (!mqtt_client.connected()) {\n\n        String client_id = \"esp8266-client-\" + String(WiFi.macAddress());\n        \n        Serial.printf(\"%s로 MQTT 브로커에 연결 중.....\\n\", client_id.c_str());\n        \n        if (mqtt_client.connect(client_id.c_str(), MQTT_USERNAME, MQTT_PASSWORD)) {\n            \n            Serial.println(\"MQTT 브로커에 연결되었습니다.\");\n        \n        } else {\n            char err_buf[128];\n            \n            espClient.getLastSSLError(err_buf, sizeof(err_buf));\n            \n            Serial.print(\"MQTT 브로커에 연결에 실패했습니다. rc=\");\n            Serial.println(mqtt_client.state());\n            Serial.print(\"SSL 오류: \");\n            Serial.println(err_buf);\n\n            delay(5000);\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n해당 함수를 사용하여 주제에 대한 데이터를 게시합니다.\n\n```js\nvoid publishData(int data){\n  // Int 데이터를 String으로 변환합니다.\n  itoa(data, payload, 10);\n\n  // 주제 \"test\"에 데이터를 게시합니다.\n  mqtt_client.publish(MQTT_TOPIC, payload);\n}\n```\n\n이벤트에 구독하려면 다음과 같이 작성합니다.\n\n```js\nvoid subscribeToTopic(char* topic){\n\n  mqtt_client.subscribe(topic);\n  Serial.print(\"주제에 구독함: \");\n  Serial.println(topic);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n구독한 주제를 듣습니다.\n\n```js\nvoid mqttCallback(char *topic, byte *payload, unsigned int length) {\n    Serial.print(\"주제에서 메시지 받음: \");\n    Serial.println(topic);\n    Serial.print(\"메시지:\");\n    for (unsigned int i = 0; i < length; i++) {\n        Serial.print((char) payload[i]);\n    }\n    Serial.println();\n    Serial.println(\"-----------------------\");\n}\n```\n\n마지막으로 전체 펌웨어 코드를 작성해 봅시다.\n\n```js\n#include <ESP8266WiFi.h>\n#include <PubSubClient.h>\n#include <ESP8266TrueRandom.h>\n#include <time.h>\n\n// NTP 서버 설정\nconst char *ntp_server = \"0.pool.ntp.org\";     // 기본 NTP 서버\nconst long gmt_offset_sec = 0;            // GMT 오프셋(시간대에 따라 조정)\nconst int daylight_offset_sec = 0;        // 일광 절약 시간 오프셋(초)\n\nconst char* SSID = \"본인의 와이파이를 사용해주세요\";\nconst char* PASSWORD = \"패스워드\";\n\nconst char* MQTT_HOST = \"f4b0e072.ala.asia-southeast1.emqxsl.com\";\nconst int MQTT_PORT = 8883;\n\nconst char* MQTT_USERNAME = \"test2\";\nconst char* MQTT_PASSWORD = \"testpass123A\";\nconst char* MQTT_TOPIC = \"test\";\n\nchar payload[10] = \"\";\n\nstatic const char ca_cert[] = R\"EOF(\n-----BEGIN CERTIFICATE-----\n여기에 인증서 내용을 복사하세요\n-----END CERTIFICATE-----\n)EOF\";\n\nBearSSL::WiFiClientSecure espClient;\nPubSubClient mqtt_client(espClient);\n\nvoid subscribeToTopic(char* topic){\n\n  mqtt_client.subscribe(topic);\n  Serial.print(\"주제에 구독 완료: \");\n  Serial.println(topic);\n}\n\nvoid mqttCallback(char *topic, byte *payload, unsigned int length) {\n    Serial.print(\"주제에서 받은 메시지: \");\n    Serial.println(topic);\n    Serial.print(\"메시지:\");\n    for (unsigned int i = 0; i < length; i++) {\n        Serial.print((char) payload[i]);\n    }\n    Serial.println();\n    Serial.println(\"-----------------------\");\n}\n\nvoid connectToMQTTBroker() {\n    \n    // 인증서를 사용하여 신뢰할 수 있는 연결 요청을 수행합니다\n    BearSSL::X509List serverTrustedCA(ca_cert);\n\n    espClient.setTrustAnchors(&serverTrustedCA);\n\n    while (!mqtt_client.connected()) {\n\n        String client_id = \"esp8266-client-\" + String(WiFi.macAddress());\n        \n        Serial.printf(\"%s로 MQTT 브로커에 연결 중.....\\n\", client_id.c_str());\n        \n        if (mqtt_client.connect(client_id.c_str(), MQTT_USERNAME, MQTT_PASSWORD)) {\n            \n            Serial.println(\"MQTT 브로커에 연결됨\");\n\n            subscribeToTopic(\"test\");\n        \n        } else {\n            char err_buf[128];\n            \n            espClient.getLastSSLError(err_buf, sizeof(err_buf));\n            \n            Serial.print(\"MQTT 브로커에 연결 실패, 상태=\");\n            Serial.println(mqtt_client.state());\n            Serial.print(\"SSL 오류: \");\n            Serial.println(err_buf);\n\n            delay(5000);\n        }\n    }\n}\n\nvoid syncTime() {\n    configTime(gmt_offset_sec, daylight_offset_sec, ntp_server);\n    \n    Serial.print(\"NTP 시간 동기화 대기 중: \");\n\n    while (time(nullptr) < 8 * 3600 * 2) {\n        delay(1000);\n        Serial.print(\".\");\n    }\n\n    Serial.println(\"시간 동기화 완료\");\n    \n    struct tm timeinfo;\n    \n    if (getLocalTime(&timeinfo)) {\n        Serial.print(\"현재 시간: \");\n        Serial.println(asctime(&timeinfo));\n    \n    } else {\n        Serial.println(\"로컬 시간 획득 실패\");\n    }\n}\n\nvoid publishData(int data){\n  // 정수 데이터를 문자열로 변환합니다\n  itoa(data,payload,10);\n\n  // \"test\" 주제에 데이터를 발행합니다\n  mqtt_client.publish(MQTT_TOPIC,payload);\n}\n\n\nvoid connectToWiFi() {\n    WiFi.begin(SSID, PASSWORD);\n    Serial.print(\"WiFi에 연결 중\");\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.print(\".\");\n    }\n    Serial.println(\"\\nWiFi 네트워크에 연결됨\");\n}\n\n\nvoid setup() {\n  Serial.begin(115200);\n\n  connectToWiFi();\n\n  syncTime();\n\n  mqtt_client.setServer(MQTT_HOST,MQTT_PORT);\n\n  connectToMQTTBroker();\n\n}\n\nvoid loop() {\n  if (!mqtt_client.connected()) {\n        connectToMQTTBroker();\n    }\n\n\n    mqtt_client.loop();\n\n    // 3초마다 무작위 숫자를 보냅니다. 여러분은 센서 데이터를 전송할 수 있습니다.\n    publishData(ESP8266TrueRandom.random(1,500));\n    delay(3000);\n\n}\n```\n\n<div class=\"content-ad\"></div>\n\n마침내, 코드를 Esp8266에 업로드하세요.\n\nmqtt-cli를 설치하고 컴퓨터 터미널에서 실행하여 데이터가 발행되는지 확인하세요.\n\n설치 후, 다음 명령어를 실행하세요\n\n```js\nmqtt sub -h <호스트> -p <포트> -s -u <사용자이름> -pw <비밀번호> -t <토픽>\n```\n\n<div class=\"content-ad\"></div>\n\n우리 경우에는 \"test\" 주제입니다.\n\n다음 출력을 볼 수 있습니다.\n\n\n<img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_8.png\" />\n\n\n이것은 우리의 Esp8266이 데이터를 MQTT 브로커로 보내고, 우리 컴퓨터에서 실행되는 CLI 도구를 사용하여 해당 데이터를 구독한다는 것을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n# 마지막으로\n\nMQTT를 Esp8266 및 Flutter와 함께 사용하는 방법에 대한 두 부분 가이드의 첫 번째 부분이 끝났습니다.\n\n소중한 시간 내주셔서 감사합니다. 이에 대한 생각을 알려주세요!\n\n도움이 되었다면 LinkedIn에서 제 소식을 지켜보실 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![Animated GIF](https://miro.medium.com/v2/resize:fit:440/0*xIWi3szlPmvPpqh0.gif)","ogImage":{"url":"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_0.png"},"coverImage":"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘에는 많은 IOT 기기들과 작업하고 있어요. 많은 기기들을 다루는 데 큰 어려움이 있어요. 운영, 데이터 수집, 유지관리 등을 모두 집중적으로 하기가 어려워요.</p>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_0.png\" alt=\"이미지\"></p>\n<h2>리얼타임 기기들이 클라우드와 어떻게 소통할 수 있는 가장 좋은 방법은 무엇인가요?</h2>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_1.png\" alt=\"이미지\"></p>\n<h1>MQTT 프로토콜에 대해 알아봐요!!!!!!!!</h1>\n<p>이 글에서는 다음의 내용을 다룹니다.</p>\n<ul>\n<li>MQTT 브로커와의 ESP8266 연결</li>\n<li>MQTT 브로커와의 Flutter 연결</li>\n</ul>\n<p>가이드를 두 부분으로 나눴어요.</p>\n<p>첫 번째 파트에서는 우리의 브로커와 Esp8266을 구성하는 방법에 대해 다룹니다.</p>\n<p>두 번째 파트에서는 어플리케이션에서 데이터를 읽고 쓰는 방법에 대해 다룹니다.</p>\n<h2>MQTT 브로커란 무엇인가요?</h2>\n<p>아키텍처 사이에서 중개자 역할을 한다고 생각해보세요. Esp8266 장치는 데이터를 브로커로 보내고, 거기서 데이터가 저장됩니다. 그런 후 어플리케이션은 MQTT 브로커에 연결하여 데이터에 접근할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_2.png\" alt=\"2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_2.png\"></p>\n<p><strong>참고:</strong> 대부분의 경우, 데이터를 처리하기 위해 백엔드가 필요하고 응용 프로그램이 이에 액세스하지만, MQTT를 사용하여 연결하고 데이터를 보내는 방법을 알고 나면 쉽다는 것을 이 문서에서 다루지는 않습니다. 나중에 전체 IOT 인프라를 보여주는 글을 쓸 수도 있습니다.</p>\n<h1>준비물</h1>\n<ul>\n<li>MQTT의 이해</li>\n<li>발행/구독 아키텍처의 기본 이해</li>\n<li>ESP8266 Node MCU 모듈</li>\n<li>Flutter 또는 다른 기본 프레임워크에 대한 이해</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_3.png\" alt=\"image\"></p>\n<h1>파트 1: 설정</h1>\n<p>전체 아키텍처를 구현하려면 먼저 MQTT 브로커가 필요합니다. HiveMQ와 EMQX와 같은 많은 무료 브로커들이 있으며 Mosquitto를 사용하여 로컬 브로커를 만들 수도 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_4.png\" alt=\"image\"></p>\n<p>EMQX에 계정을 등록하고 브로커를 생성했습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_5.png\" alt=\"이미지\"></p>\n<p>그런 다음 브로커에 액세스하는 데 사용될 몇 가지 사용자 계정을 만듭니다.</p>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_6.png\" alt=\"이미지\"></p>\n<h1>Part 2: ESP8266 펌웨어</h1>\n<p>펌웨어 작업을 시작하기 전에 몇 가지 알아야 할 사항이 있습니다.</p>\n<p>웹에서 MQTT 브로커에 액세스할 때 TLS를 사용하거나 사용하지 않을 수 있습니다. 제 경험상 TLS를 사용하지 않고 브로커에 연결하려고 시도하면 Esp8266에서 작동하지 않습니다. 모든 연결 요청이 거부됩니다. 따라서 저는 연결을 가장 안전하게 만드는 방법을 보여드리겠습니다.</p>\n<ul>\n<li>브로커에서 인증서를 다운로드하십시오 (나중에 필요할 것입니다)</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-22-MQTTinFlutterAComprehensiveGuidetoConnectApplicationswithESP8266IOTDevicesPARTI_7.png\" alt=\"image\"></p>\n<ul>\n<li>Arduino IDE를 열고 Esp8266을 설정합니다.</li>\n</ul>\n<p>Esp8266을 사용해본 적이 없다면, 이 가이드를 따를 수 있습니다.</p>\n<p>우선 라이브러리를 가져오겠습니다.</p>\n<pre><code class=\"hljs language-js\">#include &#x3C;<span class=\"hljs-title class_\">ESP8266WiFi</span>.<span class=\"hljs-property\">h</span>>\n\n#include &#x3C;<span class=\"hljs-title class_\">PubSubClient</span>.<span class=\"hljs-property\">h</span>>\n\n<span class=\"hljs-comment\">// 이 부분은 선택 사항입니다. 센서 데이터로 보낼 무작위 숫자를 생성하기 위해 사용했습니다.</span>\n#include &#x3C;<span class=\"hljs-title class_\">ESP8266TrueRandom</span>.<span class=\"hljs-property\">h</span>>\n\n<span class=\"hljs-comment\">// 인터넷과의 시간 동기화에 사용됩니다.</span>\n#include &#x3C;time.<span class=\"hljs-property\">h</span>>\n</code></pre>\n<p>이제 자격 증명을 정의해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> char *ntp_server = <span class=\"hljs-string\">\"0.pool.ntp.org\"</span>;     <span class=\"hljs-comment\">// 기본 NTP 서버</span>\n<span class=\"hljs-keyword\">const</span> long gmt_offset_sec = <span class=\"hljs-number\">0</span>;            <span class=\"hljs-comment\">// GMT 오프셋(시간대에 맞게 조정)</span>\n<span class=\"hljs-keyword\">const</span> int daylight_offset_sec = <span class=\"hljs-number\">0</span>;        <span class=\"hljs-comment\">// 일광 절약 시간 오프셋(초)</span>\n\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">SSID</span> = <span class=\"hljs-string\">\"************\"</span>;\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">PASSWORD</span> = <span class=\"hljs-string\">\"************\"</span>;\n\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_HOST</span> = <span class=\"hljs-string\">\"************\"</span>; <span class=\"hljs-comment\">// 브로커 대시보드에서 가져오세요</span>\n<span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">MQTT_PORT</span> = <span class=\"hljs-number\">8883</span>; <span class=\"hljs-comment\">// 기본 MQTT TCP TLS 포트</span>\n\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_USERNAME</span> = <span class=\"hljs-string\">\"\"</span>;\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_PASSWORD</span> = <span class=\"hljs-string\">\"\"</span>;\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_TOPIC</span> = <span class=\"hljs-string\">\"test\"</span>;\n\nchar payload[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">\"\"</span>;\n\n<span class=\"hljs-title class_\">BearSSL</span>::<span class=\"hljs-title class_\">WiFiClientSecure</span> espClient;\n\n<span class=\"hljs-title class_\">PubSubClient</span> <span class=\"hljs-title function_\">mqtt_client</span>(espClient);\n</code></pre>\n<p>이제 다운로드한 인증서 데이터를 입력해 봅시다. 텍스트 편집기로 해당 파일을 열어 내용을 복사하세요.</p>\n<p>다음은 Markdown 형식으로 table 태그를 변경해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> char ca_cert[] = R<span class=\"hljs-string\">\"EOF(\n|-----BEGIN CERTIFICATE-----|\n|---MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh---|\n|---MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3---|\n|---d3cuZGlnaWNlcnQuYa9tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD---|\n|-----END CERTIFICATE-----|\n)EOF\"</span>;\n</code></pre>\n<p>먼저, WiFi에 연결해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">connectToWiFi</span>(<span class=\"hljs-params\"></span>) {\r\n    <span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-variable constant_\">SSID</span>, <span class=\"hljs-variable constant_\">PASSWORD</span>);\r\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"WiFi에 연결 중\"</span>);\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">status</span>() != <span class=\"hljs-variable constant_\">WL_CONNECTED</span>) {\r\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">500</span>);\r\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\".\"</span>);\r\n    }\r\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"\\nWiFi 네트워크에 연결되었습니다\"</span>);\r\n}\n</code></pre>\n<p>우리의 Esp8266과 시간을 동기화하기 위해 NTP(Network Time Protocol) 서버를 사용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncTime</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">configTime</span>(gmt_offset_sec, daylight_offset_sec, ntp_server);\n    \n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"NTP 시간 동기화를 기다리는 중: \"</span>);\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title function_\">time</span>(nullptr) &#x3C; <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\".\"</span>);\n    }\n\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"시간이 동기화되었습니다.\"</span>);\n    \n    struct tm timeinfo;\n    \n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">getLocalTime</span>(&#x26;timeinfo)) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"현재 시간: \"</span>);\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title function_\">asctime</span>(&#x26;timeinfo));\n    \n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"로컬 시간을 가져오지 못했습니다.\"</span>);\n    }\n}\n</code></pre>\n<p>브로커에 연결하려면 다음 함수를 사용할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">connectToMQTTBroker</span>(<span class=\"hljs-params\"></span>) {\n    \n    <span class=\"hljs-comment\">// 우리의 인증서를 사용하여 신뢰할 수 있는 연결 요청을 수행합니다</span>\n    <span class=\"hljs-title class_\">BearSSL</span>::X509List <span class=\"hljs-title function_\">serverTrustedCA</span>(ca_cert);\n\n    espClient.<span class=\"hljs-title function_\">setTrustAnchors</span>(&#x26;serverTrustedCA);\n\n    <span class=\"hljs-keyword\">while</span> (!mqtt_client.<span class=\"hljs-title function_\">connected</span>()) {\n\n        <span class=\"hljs-title class_\">String</span> client_id = <span class=\"hljs-string\">\"esp8266-client-\"</span> + <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">macAddress</span>());\n        \n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">\"%s로 MQTT 브로커에 연결 중.....\\n\"</span>, client_id.<span class=\"hljs-title function_\">c_str</span>());\n        \n        <span class=\"hljs-keyword\">if</span> (mqtt_client.<span class=\"hljs-title function_\">connect</span>(client_id.<span class=\"hljs-title function_\">c_str</span>(), <span class=\"hljs-variable constant_\">MQTT_USERNAME</span>, <span class=\"hljs-variable constant_\">MQTT_PASSWORD</span>)) {\n            \n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"MQTT 브로커에 연결되었습니다.\"</span>);\n        \n        } <span class=\"hljs-keyword\">else</span> {\n            char err_buf[<span class=\"hljs-number\">128</span>];\n            \n            espClient.<span class=\"hljs-title function_\">getLastSSLError</span>(err_buf, <span class=\"hljs-title function_\">sizeof</span>(err_buf));\n            \n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"MQTT 브로커에 연결에 실패했습니다. rc=\"</span>);\n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(mqtt_client.<span class=\"hljs-title function_\">state</span>());\n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"SSL 오류: \"</span>);\n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(err_buf);\n\n            <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5000</span>);\n        }\n    }\n}\n</code></pre>\n<p>해당 함수를 사용하여 주제에 대한 데이터를 게시합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">publishData</span>(<span class=\"hljs-params\">int data</span>){\n  <span class=\"hljs-comment\">// Int 데이터를 String으로 변환합니다.</span>\n  <span class=\"hljs-title function_\">itoa</span>(data, payload, <span class=\"hljs-number\">10</span>);\n\n  <span class=\"hljs-comment\">// 주제 \"test\"에 데이터를 게시합니다.</span>\n  mqtt_client.<span class=\"hljs-title function_\">publish</span>(<span class=\"hljs-variable constant_\">MQTT_TOPIC</span>, payload);\n}\n</code></pre>\n<p>이벤트에 구독하려면 다음과 같이 작성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">subscribeToTopic</span>(<span class=\"hljs-params\">char* topic</span>){\n\n  mqtt_client.<span class=\"hljs-title function_\">subscribe</span>(topic);\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"주제에 구독함: \"</span>);\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(topic);\n}\n</code></pre>\n<p>구독한 주제를 듣습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">mqttCallback</span>(<span class=\"hljs-params\">char *topic, byte *payload, unsigned int length</span>) {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"주제에서 메시지 받음: \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(topic);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"메시지:\"</span>);\n    <span class=\"hljs-keyword\">for</span> (unsigned int i = <span class=\"hljs-number\">0</span>; i &#x3C; length; i++) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>((char) payload[i]);\n    }\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>();\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"-----------------------\"</span>);\n}\n</code></pre>\n<p>마지막으로 전체 펌웨어 코드를 작성해 봅시다.</p>\n<pre><code class=\"hljs language-js\">#include &#x3C;<span class=\"hljs-title class_\">ESP8266WiFi</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">PubSubClient</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">ESP8266TrueRandom</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;time.<span class=\"hljs-property\">h</span>>\n\n<span class=\"hljs-comment\">// NTP 서버 설정</span>\n<span class=\"hljs-keyword\">const</span> char *ntp_server = <span class=\"hljs-string\">\"0.pool.ntp.org\"</span>;     <span class=\"hljs-comment\">// 기본 NTP 서버</span>\n<span class=\"hljs-keyword\">const</span> long gmt_offset_sec = <span class=\"hljs-number\">0</span>;            <span class=\"hljs-comment\">// GMT 오프셋(시간대에 따라 조정)</span>\n<span class=\"hljs-keyword\">const</span> int daylight_offset_sec = <span class=\"hljs-number\">0</span>;        <span class=\"hljs-comment\">// 일광 절약 시간 오프셋(초)</span>\n\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">SSID</span> = <span class=\"hljs-string\">\"본인의 와이파이를 사용해주세요\"</span>;\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">PASSWORD</span> = <span class=\"hljs-string\">\"패스워드\"</span>;\n\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_HOST</span> = <span class=\"hljs-string\">\"f4b0e072.ala.asia-southeast1.emqxsl.com\"</span>;\n<span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">MQTT_PORT</span> = <span class=\"hljs-number\">8883</span>;\n\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_USERNAME</span> = <span class=\"hljs-string\">\"test2\"</span>;\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_PASSWORD</span> = <span class=\"hljs-string\">\"testpass123A\"</span>;\n<span class=\"hljs-keyword\">const</span> char* <span class=\"hljs-variable constant_\">MQTT_TOPIC</span> = <span class=\"hljs-string\">\"test\"</span>;\n\nchar payload[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">\"\"</span>;\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> char ca_cert[] = R<span class=\"hljs-string\">\"EOF(\n-----BEGIN CERTIFICATE-----\n여기에 인증서 내용을 복사하세요\n-----END CERTIFICATE-----\n)EOF\"</span>;\n\n<span class=\"hljs-title class_\">BearSSL</span>::<span class=\"hljs-title class_\">WiFiClientSecure</span> espClient;\n<span class=\"hljs-title class_\">PubSubClient</span> <span class=\"hljs-title function_\">mqtt_client</span>(espClient);\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">subscribeToTopic</span>(<span class=\"hljs-params\">char* topic</span>){\n\n  mqtt_client.<span class=\"hljs-title function_\">subscribe</span>(topic);\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"주제에 구독 완료: \"</span>);\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(topic);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">mqttCallback</span>(<span class=\"hljs-params\">char *topic, byte *payload, unsigned int length</span>) {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"주제에서 받은 메시지: \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(topic);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"메시지:\"</span>);\n    <span class=\"hljs-keyword\">for</span> (unsigned int i = <span class=\"hljs-number\">0</span>; i &#x3C; length; i++) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>((char) payload[i]);\n    }\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>();\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"-----------------------\"</span>);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">connectToMQTTBroker</span>(<span class=\"hljs-params\"></span>) {\n    \n    <span class=\"hljs-comment\">// 인증서를 사용하여 신뢰할 수 있는 연결 요청을 수행합니다</span>\n    <span class=\"hljs-title class_\">BearSSL</span>::X509List <span class=\"hljs-title function_\">serverTrustedCA</span>(ca_cert);\n\n    espClient.<span class=\"hljs-title function_\">setTrustAnchors</span>(&#x26;serverTrustedCA);\n\n    <span class=\"hljs-keyword\">while</span> (!mqtt_client.<span class=\"hljs-title function_\">connected</span>()) {\n\n        <span class=\"hljs-title class_\">String</span> client_id = <span class=\"hljs-string\">\"esp8266-client-\"</span> + <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">macAddress</span>());\n        \n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">\"%s로 MQTT 브로커에 연결 중.....\\n\"</span>, client_id.<span class=\"hljs-title function_\">c_str</span>());\n        \n        <span class=\"hljs-keyword\">if</span> (mqtt_client.<span class=\"hljs-title function_\">connect</span>(client_id.<span class=\"hljs-title function_\">c_str</span>(), <span class=\"hljs-variable constant_\">MQTT_USERNAME</span>, <span class=\"hljs-variable constant_\">MQTT_PASSWORD</span>)) {\n            \n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"MQTT 브로커에 연결됨\"</span>);\n\n            <span class=\"hljs-title function_\">subscribeToTopic</span>(<span class=\"hljs-string\">\"test\"</span>);\n        \n        } <span class=\"hljs-keyword\">else</span> {\n            char err_buf[<span class=\"hljs-number\">128</span>];\n            \n            espClient.<span class=\"hljs-title function_\">getLastSSLError</span>(err_buf, <span class=\"hljs-title function_\">sizeof</span>(err_buf));\n            \n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"MQTT 브로커에 연결 실패, 상태=\"</span>);\n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(mqtt_client.<span class=\"hljs-title function_\">state</span>());\n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"SSL 오류: \"</span>);\n            <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(err_buf);\n\n            <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5000</span>);\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">syncTime</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">configTime</span>(gmt_offset_sec, daylight_offset_sec, ntp_server);\n    \n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"NTP 시간 동기화 대기 중: \"</span>);\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title function_\">time</span>(nullptr) &#x3C; <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\".\"</span>);\n    }\n\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"시간 동기화 완료\"</span>);\n    \n    struct tm timeinfo;\n    \n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">getLocalTime</span>(&#x26;timeinfo)) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"현재 시간: \"</span>);\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title function_\">asctime</span>(&#x26;timeinfo));\n    \n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"로컬 시간 획득 실패\"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">publishData</span>(<span class=\"hljs-params\">int data</span>){\n  <span class=\"hljs-comment\">// 정수 데이터를 문자열로 변환합니다</span>\n  <span class=\"hljs-title function_\">itoa</span>(data,payload,<span class=\"hljs-number\">10</span>);\n\n  <span class=\"hljs-comment\">// \"test\" 주제에 데이터를 발행합니다</span>\n  mqtt_client.<span class=\"hljs-title function_\">publish</span>(<span class=\"hljs-variable constant_\">MQTT_TOPIC</span>,payload);\n}\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">connectToWiFi</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-variable constant_\">SSID</span>, <span class=\"hljs-variable constant_\">PASSWORD</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"WiFi에 연결 중\"</span>);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">status</span>() != <span class=\"hljs-variable constant_\">WL_CONNECTED</span>) {\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">500</span>);\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\".\"</span>);\n    }\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"\\nWiFi 네트워크에 연결됨\"</span>);\n}\n\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">115200</span>);\n\n  <span class=\"hljs-title function_\">connectToWiFi</span>();\n\n  <span class=\"hljs-title function_\">syncTime</span>();\n\n  mqtt_client.<span class=\"hljs-title function_\">setServer</span>(<span class=\"hljs-variable constant_\">MQTT_HOST</span>,<span class=\"hljs-variable constant_\">MQTT_PORT</span>);\n\n  <span class=\"hljs-title function_\">connectToMQTTBroker</span>();\n\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (!mqtt_client.<span class=\"hljs-title function_\">connected</span>()) {\n        <span class=\"hljs-title function_\">connectToMQTTBroker</span>();\n    }\n\n\n    mqtt_client.<span class=\"hljs-title function_\">loop</span>();\n\n    <span class=\"hljs-comment\">// 3초마다 무작위 숫자를 보냅니다. 여러분은 센서 데이터를 전송할 수 있습니다.</span>\n    <span class=\"hljs-title function_\">publishData</span>(<span class=\"hljs-title class_\">ESP8266TrueRandom</span>.<span class=\"hljs-title function_\">random</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">500</span>));\n    <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">3000</span>);\n\n}\n</code></pre>\n<p>마침내, 코드를 Esp8266에 업로드하세요.</p>\n<p>mqtt-cli를 설치하고 컴퓨터 터미널에서 실행하여 데이터가 발행되는지 확인하세요.</p>\n<p>설치 후, 다음 명령어를 실행하세요</p>\n<pre><code class=\"hljs language-js\">mqtt sub -h &#x3C;호스트> -p &#x3C;포트> -s -u &#x3C;사용자이름> -pw &#x3C;비밀번호> -t &#x3C;토픽>\n</code></pre>\n<p>우리 경우에는 \"test\" 주제입니다.</p>\n<p>다음 출력을 볼 수 있습니다.</p>\n<p>이것은 우리의 Esp8266이 데이터를 MQTT 브로커로 보내고, 우리 컴퓨터에서 실행되는 CLI 도구를 사용하여 해당 데이터를 구독한다는 것을 보여줍니다.</p>\n<h1>마지막으로</h1>\n<p>MQTT를 Esp8266 및 Flutter와 함께 사용하는 방법에 대한 두 부분 가이드의 첫 번째 부분이 끝났습니다.</p>\n<p>소중한 시간 내주셔서 감사합니다. 이에 대한 생각을 알려주세요!</p>\n<p>도움이 되었다면 LinkedIn에서 제 소식을 지켜보실 수도 있습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:440/0*xIWi3szlPmvPpqh0.gif\" alt=\"Animated GIF\"></p>\n</body>\n</html>\n"},"__N_SSG":true}