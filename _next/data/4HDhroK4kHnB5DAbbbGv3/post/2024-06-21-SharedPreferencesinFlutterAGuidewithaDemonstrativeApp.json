{"pageProps":{"post":{"title":"Flutter에서 Shared Preferences 사용하기 데모 앱과 함께하는 가이드","description":"","date":"2024-06-21 20:38","slug":"2024-06-21-SharedPreferencesinFlutterAGuidewithaDemonstrativeApp","content":"\n\n![image](/assets/img/2024-06-21-SharedPreferencesinFlutterAGuidewithaDemonstrativeApp_0.png)\n\n모바일 앱 개발에서의 공유 환경은 사용자 기기에 키-값 쌍의 작은 데이터를 저장할 수 있게 해주는데요. 이 데이터는 영구적이며 앱이 종료된 후에도 접근할 수 있습니다. Flutter에서는 shared_preferences 패키지를 사용하여 공유 환경을 쉽게 관리할 수 있어요.\n\n이 글에서는 Flutter에서의 공유 환경 기본을 살펴보고, 사용 방법을 보여줄 간단한 앱을 만들어볼 거에요.\n\nshared_preferences 시작하기\n\n<div class=\"content-ad\"></div>\n\n\"shared_preferences\" 패키지를 쉽게 추가할 수 있습니다. Flutter 프로젝트에 다음 줄을 pubspec.yaml 파일에 추가하세요:\n\n```yaml\ndependencies:\n  shared_preferences: ^0.5.12+4\n```\n\n의존성을 추가했으면 Dart 파일에서 가져와 초기화할 수 있습니다:\n\n```dart\nimport 'package:shared_preferences/shared_preferences.dart';\n\nSharedPreferences prefs;\n\n// 공유 설정 초기화\nprefs = await SharedPreferences.getInstance();\n```\n\n<div class=\"content-ad\"></div>\n\n이제 공유 설정을 초기화했으니, 공유 설정에서 데이터를 저장하고 검색하는 방법을 알아보겠습니다.\n\n공유 설정에 데이터 저장\n\n공유 설정에 데이터를 저장하는 것은 간단하며 아래와 같이 수행할 수 있습니다:\n\n```js\n// 문자열 값을 저장\nprefs.setString('키', '값');\n\n// 정수 값을 저장\nprefs.setInt('키', 42);\n\n// 실수 값을 저장\nprefs.setDouble('키', 3.14);\n\n// 부울 값을 저장\nprefs.setBool('키', true);\n```\n\n<div class=\"content-ad\"></div>\n\n공유 프리퍼런스에서 데이터를 검색하는 것은 데이터를 저장하는 것만큼 쉽습니다:\n\n```js\n// 문자열 값 검색\nString stringValue = prefs.getString('key');\n\n// 정수 값 검색\nint intValue = prefs.getInt('key');\n\n// 배정밀도 부동 소수점 값 검색\ndouble doubleValue = prefs.getDouble('key');\n\n// 부울 값 검색\nbool boolValue = prefs.getBool('key');\n```\n\n시연용 앱\n\n<div class=\"content-ad\"></div>\n\n이번에는 Flutter에서의 공유 환경 설정(shared preferences)의 기본적인 이해를 한 것 같네요. 이제 이를 활용한 간단한 앱을 만들어보겠습니다.\n\n이 앱에서는 사용자 이름을 입력하는 TextField와 사용자 이름을 기억할지 여부를 나타내는 SwitchListTile이 있습니다. 스위치가 켜져 있고(true), \"저장\" 버튼이 눌리면 입력된 사용자 이름과 스위치 상태가 공유 환경 설정에 저장됩니다. 앱을 다음에 열면, 이전에 저장된 값이 공유 환경 설정에서 로드되어 Text에 표시되며, Switch는 여전히 true로 설정될 것입니다.\n\n다음은 우리의 데모 앱 코드입니다:\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  // 공유 환경 설정 데이터를 저장하는 변수들\n  String _username;\n  bool _rememberMe;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadPreferences();\n  }\n\n  // 공유 환경 설정 데이터를 로드하는 메서드\n  void _loadPreferences() async {\n    final prefs = await SharedPreferences.getInstance();\n    setState(() {\n      _username = prefs.getString('username') ?? '';\n      _rememberMe = prefs.getBool('rememberMe') ?? false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Shared Preferences Demo'),\n        ),\n        body: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            children: <Widget>[\n              TextField(\n                decoration: InputDecoration(\n                  labelText: 'Username',\n                  hintText: 'Enter your username',\n                ),\n                onChanged: (value) {\n                  setState(() {\n                    _username = value;\n                  });\n                },\n              ),\n              CheckboxListTile(\n                title: Text('Remember me'),\n                value: _rememberMe,\n                onChanged: (value) {\n                  setState(() {\n                    _rememberMe = value;\n                  });\n                },\n              ),\n              RaisedButton(\n                child: Text('Save'),\n                onPressed: () async {\n                  final prefs = await SharedPreferences.getInstance();\n                  prefs.setString('username', _username);\n                  prefs.setBool('rememberMe', _rememberMe);\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n다음 앱에서 사용하시고 로컬 저장소의 아름다움을 즐기세요!!!\n\n만약 유용하다고 느끼신다면, 좋아요를 남겨주세요\n\n소스 코드: github","ogImage":{"url":"/assets/img/2024-06-21-SharedPreferencesinFlutterAGuidewithaDemonstrativeApp_0.png"},"coverImage":"/assets/img/2024-06-21-SharedPreferencesinFlutterAGuidewithaDemonstrativeApp_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-SharedPreferencesinFlutterAGuidewithaDemonstrativeApp_0.png\" alt=\"image\"></p>\n<p>모바일 앱 개발에서의 공유 환경은 사용자 기기에 키-값 쌍의 작은 데이터를 저장할 수 있게 해주는데요. 이 데이터는 영구적이며 앱이 종료된 후에도 접근할 수 있습니다. Flutter에서는 shared_preferences 패키지를 사용하여 공유 환경을 쉽게 관리할 수 있어요.</p>\n<p>이 글에서는 Flutter에서의 공유 환경 기본을 살펴보고, 사용 방법을 보여줄 간단한 앱을 만들어볼 거에요.</p>\n<p>shared_preferences 시작하기</p>\n<p>\"shared_preferences\" 패키지를 쉽게 추가할 수 있습니다. Flutter 프로젝트에 다음 줄을 pubspec.yaml 파일에 추가하세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">shared_preferences:</span> <span class=\"hljs-string\">^0.5.12+4</span>\n</code></pre>\n<p>의존성을 추가했으면 Dart 파일에서 가져와 초기화할 수 있습니다:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:shared_preferences/shared_preferences.dart'</span>;\n\nSharedPreferences prefs;\n\n<span class=\"hljs-comment\">// 공유 설정 초기화</span>\nprefs = <span class=\"hljs-keyword\">await</span> SharedPreferences.getInstance();\n</code></pre>\n<p>이제 공유 설정을 초기화했으니, 공유 설정에서 데이터를 저장하고 검색하는 방법을 알아보겠습니다.</p>\n<p>공유 설정에 데이터 저장</p>\n<p>공유 설정에 데이터를 저장하는 것은 간단하며 아래와 같이 수행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 문자열 값을 저장</span>\nprefs.<span class=\"hljs-title function_\">setString</span>(<span class=\"hljs-string\">'키'</span>, <span class=\"hljs-string\">'값'</span>);\n\n<span class=\"hljs-comment\">// 정수 값을 저장</span>\nprefs.<span class=\"hljs-title function_\">setInt</span>(<span class=\"hljs-string\">'키'</span>, <span class=\"hljs-number\">42</span>);\n\n<span class=\"hljs-comment\">// 실수 값을 저장</span>\nprefs.<span class=\"hljs-title function_\">setDouble</span>(<span class=\"hljs-string\">'키'</span>, <span class=\"hljs-number\">3.14</span>);\n\n<span class=\"hljs-comment\">// 부울 값을 저장</span>\nprefs.<span class=\"hljs-title function_\">setBool</span>(<span class=\"hljs-string\">'키'</span>, <span class=\"hljs-literal\">true</span>);\n</code></pre>\n<p>공유 프리퍼런스에서 데이터를 검색하는 것은 데이터를 저장하는 것만큼 쉽습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 문자열 값 검색</span>\n<span class=\"hljs-title class_\">String</span> stringValue = prefs.<span class=\"hljs-title function_\">getString</span>(<span class=\"hljs-string\">'key'</span>);\n\n<span class=\"hljs-comment\">// 정수 값 검색</span>\nint intValue = prefs.<span class=\"hljs-title function_\">getInt</span>(<span class=\"hljs-string\">'key'</span>);\n\n<span class=\"hljs-comment\">// 배정밀도 부동 소수점 값 검색</span>\ndouble doubleValue = prefs.<span class=\"hljs-title function_\">getDouble</span>(<span class=\"hljs-string\">'key'</span>);\n\n<span class=\"hljs-comment\">// 부울 값 검색</span>\nbool boolValue = prefs.<span class=\"hljs-title function_\">getBool</span>(<span class=\"hljs-string\">'key'</span>);\n</code></pre>\n<p>시연용 앱</p>\n<p>이번에는 Flutter에서의 공유 환경 설정(shared preferences)의 기본적인 이해를 한 것 같네요. 이제 이를 활용한 간단한 앱을 만들어보겠습니다.</p>\n<p>이 앱에서는 사용자 이름을 입력하는 TextField와 사용자 이름을 기억할지 여부를 나타내는 SwitchListTile이 있습니다. 스위치가 켜져 있고(true), \"저장\" 버튼이 눌리면 입력된 사용자 이름과 스위치 상태가 공유 환경 설정에 저장됩니다. 앱을 다음에 열면, 이전에 저장된 값이 공유 환경 설정에서 로드되어 Text에 표시되며, Switch는 여전히 true로 설정될 것입니다.</p>\n<p>다음은 우리의 데모 앱 코드입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:shared_preferences/shared_preferences.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>() => <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-title class_\">MyApp</span>());\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  @override\n  _MyAppState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_MyAppState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyApp</span>> {\n  <span class=\"hljs-comment\">// 공유 환경 설정 데이터를 저장하는 변수들</span>\n  <span class=\"hljs-title class_\">String</span> _username;\n  bool _rememberMe;\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n    <span class=\"hljs-title function_\">_loadPreferences</span>();\n  }\n\n  <span class=\"hljs-comment\">// 공유 환경 설정 데이터를 로드하는 메서드</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_loadPreferences</span>() <span class=\"hljs-keyword\">async</span> {\n    final prefs = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">SharedPreferences</span>.<span class=\"hljs-title function_\">getInstance</span>();\n    <span class=\"hljs-title function_\">setState</span>(() {\n      _username = prefs.<span class=\"hljs-title function_\">getString</span>(<span class=\"hljs-string\">'username'</span>) ?? <span class=\"hljs-string\">''</span>;\n      _rememberMe = prefs.<span class=\"hljs-title function_\">getBool</span>(<span class=\"hljs-string\">'rememberMe'</span>) ?? <span class=\"hljs-literal\">false</span>;\n    });\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>(\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n        <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Shared Preferences Demo'</span>),\n        ),\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Padding</span>(\n          <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-number\">16.0</span>),\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n            <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n              <span class=\"hljs-title class_\">TextField</span>(\n                <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">InputDecoration</span>(\n                  <span class=\"hljs-attr\">labelText</span>: <span class=\"hljs-string\">'Username'</span>,\n                  <span class=\"hljs-attr\">hintText</span>: <span class=\"hljs-string\">'Enter your username'</span>,\n                ),\n                <span class=\"hljs-attr\">onChanged</span>: (value) {\n                  <span class=\"hljs-title function_\">setState</span>(() {\n                    _username = value;\n                  });\n                },\n              ),\n              <span class=\"hljs-title class_\">CheckboxListTile</span>(\n                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Remember me'</span>),\n                <span class=\"hljs-attr\">value</span>: _rememberMe,\n                <span class=\"hljs-attr\">onChanged</span>: (value) {\n                  <span class=\"hljs-title function_\">setState</span>(() {\n                    _rememberMe = value;\n                  });\n                },\n              ),\n              <span class=\"hljs-title class_\">RaisedButton</span>(\n                <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Save'</span>),\n                <span class=\"hljs-attr\">onPressed</span>: () <span class=\"hljs-keyword\">async</span> {\n                  final prefs = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">SharedPreferences</span>.<span class=\"hljs-title function_\">getInstance</span>();\n                  prefs.<span class=\"hljs-title function_\">setString</span>(<span class=\"hljs-string\">'username'</span>, _username);\n                  prefs.<span class=\"hljs-title function_\">setBool</span>(<span class=\"hljs-string\">'rememberMe'</span>, _rememberMe);\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>테이블 태그를 마크다운 형식으로 변경하세요.</p>\n<p>다음 앱에서 사용하시고 로컬 저장소의 아름다움을 즐기세요!!!</p>\n<p>만약 유용하다고 느끼신다면, 좋아요를 남겨주세요</p>\n<p>소스 코드: github</p>\n</body>\n</html>\n"},"__N_SSG":true}