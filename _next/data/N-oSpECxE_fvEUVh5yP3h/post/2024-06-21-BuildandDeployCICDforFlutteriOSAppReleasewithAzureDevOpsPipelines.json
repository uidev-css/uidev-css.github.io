{"pageProps":{"post":{"title":"Azure DevOps 파이프라인을 사용하여 Flutter iOS 앱을 빌드하고 배포하는 CICD 가이드","description":"","date":"2024-06-21 23:07","slug":"2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines","content":"\n\n인디 소프트웨어 개발자로서, 내 Flutter 앱을 App Store에 고객에게 제공하는 것은 불가능한 일처럼 보였어요. 인증서를 관리하고, App Store Connect를 탐색하고, 테스트 릴리스를 구성하는 사이에, 진전이 없이 몇 일 동안 좌절했죠.\n\nAzure 파이프라인을 활용하여, 제가 iOS 배포를 위한 신뢰할 수 있고 반복 가능한 CI/CD 워크플로우를 설정할 수 있었어요. 더 이상 주말을 낭비하여 앱 업데이트를 수동으로 빌드, 테스트, 발행할 필요가 없어요.\n\n이제 매번 커밋이 자동 빌드와 테스트 통과, 그리고 TestFlight로 피드백을 받는 릴리스를 발생시켜요. \n\n이 가이드는 얻어온 경험, 시행착오, 여러 번의 반복을 토대로 작성했어요. 제 목표는 동료 iOS 개발자들이 겪은 고통을 덜어드리는 거예요. 여기서 상세하고 실행 가능한 단계를 제시함으로써, 여러분은 iOS 애플리케이션을 위한 간소화된 CI/CD 파이프라인을 세우는 데 필요한 도구를 갖추게 될 거예요.\n\n<div class=\"content-ad\"></div>\n\n# 전제 조건\n\n- 활성화된 Apple 개발자 계정과 ​​App Store Connect 액세스\n- XCode에서의 iOS 앱 프로젝트\n- Azure DevOps 조직에 대한 액세스\n- IOS 앱 서명 프로세스를 시작하기 위한 p12 및 모바일 Provisional 인증서에 대한 액세스\n\nAzure DevOps Marketplace\n\n- Apple App Store 확장 프로그램https://marketplace.visualstudio.com/items?itemName=ms-vsclient.app-store을 설치하십시오. 이를 통해 App Store API와 통합할 수 있습니다.\n- Azure DevOps Marketplace에서 Flutter https://marketplace.visualstudio.com/items?itemName=Hey24sheep.flutter 확장 프로그램을 설치하십시오. 이를 통해 Flutter 앱을 빌드할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# iOS 서명 인증서 설정하기\n\nP12 인증서 생성하기\n\niOS 앱에 서명하기 위해 필요한 P12 인증서를 생성하는 방법에 대한 자세한 설명은 다음 문서를 활용해주세요: [iOS 앱을 서명하기 위한 CSR 및 P12 인증서 생성 방법](https://www.cheapsslsecurity.com).\n\n해당 문서는 iOS 앱을 서명하기 위해 필요한 p12 인증서를 생성하는 방법에 대한 상세한 지침을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n프로비저닝 프로필 생성하기\n\n애플 개발자 페이지에서 Certificates, Identifiers & Profiles(`아이덴티파이어`) 섹션으로 이동하세요.\n\n- Profiles에서 새 프로필을 추가하려면 클릭하세요.\n- 앱을 앱 스토어에 제출하기 위한 배포용 프로비저닝 프로필을 생성하려면 App Store를 선택하세요.\n- 계속해서 `Your_APP_ID` 앱 식별자를 선택하세요.\n- 계속해서 프로비저닝 프로필을 생성하고 저장하고 다운로드하세요.\n\n# Azure 파이프라인 설정하기\n\n<div class=\"content-ad\"></div>\n\n- Azure DevOps 프로젝트에서, 파이프라인 `라이브러리` 보안 파일로 이동해 \"mobileProvisional\" 및 \"p12\" 인증서를 추가하세요. 이전에 생성한 인증서입니다.\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_0.png)\n\n2. Pipelines로 이동하여 `새 파이프라인 생성` 을 클릭하세요.\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_1.png)\n\n<div class=\"content-ad\"></div>\n\n2. 옵션으로 \"전통적인 편집기 사용\"을 선택합니다\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_2.png)\n\n3. Azure 저장소를 선택합니다\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_3.png)\n\n<div class=\"content-ad\"></div>\n\n4. \"빈 작업\"을 선택합니다.\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_4.png)\n\n5. \"+\" 버튼을 클릭하고 파이프라인에 다음과 같은 라이트 그레이 작업을 추가하고 각 작업의 세부 정보를 모두 입력합니다. 아래의 YAML 파일을 참조로 사용해주세요.\n\n- 에이전트에서 실행을 선택하고 에이전트 풀을 \"Azure Pipelines\"로 지정하고 에이전트 사양을 \"macos-latest\"로 지정합니다.\n- 파이프라인을 준비한 후에 \"저장 및 대기열\"을 클릭하여 파이프라인을 트리거합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_5.png)\n\n아래는 참고용 yaml 코드입니다.\n\n```js\npool:\n  name: Azure Pipelines\n  demands: xcode\n\nsteps:\n- task: JavaToolInstaller@0\n  displayName: 'Java 11 사용'\n  inputs:\n    versionSpec: 11\n    jdkArchitectureOption: x64\n    jdkSourceOption: PreInstalled\n\n- task: InstallAppleCertificate@2\n  displayName: 'P12 인증서 설치'\n  inputs:\n    certSecureFile: '<인증서_파일>'\n    certPwd: '<비밀번호>'\n    setUpPartitionIdACLForPrivateKey: false\n\n- task: InstallAppleProvisioningProfile@1\n  displayName: '프로비저닝 프로필 설치'\n  inputs:\n    provProfileSecureFile: '<프로비저닝_파일>'\n\n- task: Hey24sheep.flutter.flutter-install.FlutterInstall@0\n  displayName: 'Flutter 설치'\n  inputs:\n    version: custom\n    customVersion: 3.7.9\n\n- task: Hey24sheep.flutter.flutter-command.FlutterCommand@0\n  displayName: 'Flutter Clean'\n  inputs:\n    arguments: clean\n\n- task: Hey24sheep.flutter.flutter-build.FlutterBuild@0\n  displayName: 'Flutter iOS 빌드'\n  inputs:\n    target: ios\n    buildFlavour: prod\n    buildNumber: '$(Build.BuildNumber)'\n    entryPoint: 'lib/main_prod.dart'\n    iosCodesign: false\n\n- task: Xcode@5\n  displayName: 'Xcode 빌드 prod'\n  inputs:\n    configuration: 'Release-prod'\n    sdk: iphoneos\n    xcWorkspacePath: '**/Runner.xcworkspace'\n    scheme: prod\n    packageApp: true\n    archivePath: ./build/ios/iphoneos/Runner.xcarchive\n    exportPath: ./build/ios/iphoneos/Runner.ipa\n    exportOptions: plist\n    exportOptionsPlist: ./ios/ExportOptions.plist\n    signingOption: manual\n    signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'\n    provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'\n\n- task: CopyFiles@2\n  displayName: '파일 복사'\n  inputs:\n    SourceFolder: .\n    Contents: '**/*.ipa'\n    TargetFolder: '$(Build.ArtifactStagingDirectory)'\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Prod Artifact 게시'\n  inputs:\n    ArtifactName: 'ios ipa'\n```\n\n상기 파이프라인은 여러분의 파이프라인 내에서 아티팩트를 게시하며, 이를 이후 배포 파이프라인에서 사용할 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_6.png)\n\n# Azure 서비스 연결 생성하기\n\nAzure 앱 스토어 익스텐션을 사용하려면 앱 스토어에 앱을 게시할 수 있는 액세스 권한이 있는 서비스 자격 증명이 필요합니다. 계정에는 '앱 관리자 또는 관리자' 역할이 설정되어야 합니다.\n\n- DevOps 프로젝트에서 프로젝트 설정으로 이동합니다.\n- 서비스 연결 탭을 선택합니다.\n- 새 서비스 연결을 추가하고 Apple App Store를 선택합니다.\n- 새 연결에 이름을 지정하고 Apple 계정의 자격 증명을 입력합니다.\n- 앱별 패스워드를 제공합니다 (계정이 2단계 인증을 사용 중인 경우). 계정이 2단계 인증을 사용하지 않는 경우 이 값을 전달할 필요가 없습니다.\n\n\n<div class=\"content-ad\"></div>\n\n이 서비스 연결 이름은 파이프라인 릴리스 단계에서 사용할 수 있습니다.\n\n## 이중 인증 프로세스\n\n게시 계정에서 특정 응용 프로그램 비밀번호를 만들어야 합니다.\n\n- http://appleid.apple.com/account/manage에 방문\n- 새로운 응용 프로그램별 비밀번호를 생성\n- 위 단계에서 사용할 이 비밀번호를 메모하세요\n\n<div class=\"content-ad\"></div>\n\n# 앱 스토어 릴리스 파이프라인 설정\n\n- Azure DevOps 프로젝트에서 파이프라인으로 이동하여 `릴리스` 새 릴리스 파이프라인을 만들고 템플릿을 \"빈 작업\"으로 선택합니다.\n- \"아티팩트 추가\"를 선택한 다음 위에서 만든 파이프라인을 선택합니다. (이 아티팩트는 App Store Connect에 업로드하는 데 사용됩니다)\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_7.png)\n\n- 스테이지에 빈 작업을 추가하고 아래의 작업 \"Apple App Store 릴리스\"를 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n- 에이전트에서 실행을 선택하고 에이전트 풀을 \"Azure 파이프라인\"으로 지정하고 에이전트 사양을 \"macos-latest\"로 지정합니다.\n- 위에서 만든 서비스 연결을 선택합니다.\n- 작업에서 빌드 처리 대기를 건너뜁니다.\n- 앱 정보 내부에있는 번들 ID 및 App 특정 Apple ID를 추가합니다. 번들 ID 및 App 특정 Apple ID는 https://appstoreconnect.apple.com/ 에서 찾을 수 있습니다.\n- 세 점을 클릭하여 아티팩트의 이진 경로를 선택합니다.\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_8.png)\n\n4. 새 릴리스를 생성하면 로그에서 다음과 같은 성공 메시지가 표시됩니다. 이것은 아티팩트가 앱 스토어 커넥트 'Test Flight'에 업로드되었음을 확인합니다.\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_9.png)\n\n<div class=\"content-ad\"></div>\n\n# 앱 스토어 테스트 플라이트 확인\n\n![이미지](/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_10.png)\n\n그리고 이것으로 iOS 앱을 위한 CI/CD를 구현하는 시작부터 끝까지의 가이드를 마무리합니다! 제 경험을 경험하면서 유용한 통찰을 얻을 수 있기를 바랍니다. 개발 단계에서 적용할 수 있도록 도움이 되기를 바랍니다.","ogImage":{"url":"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_0.png"},"coverImage":"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>인디 소프트웨어 개발자로서, 내 Flutter 앱을 App Store에 고객에게 제공하는 것은 불가능한 일처럼 보였어요. 인증서를 관리하고, App Store Connect를 탐색하고, 테스트 릴리스를 구성하는 사이에, 진전이 없이 몇 일 동안 좌절했죠.</p>\n<p>Azure 파이프라인을 활용하여, 제가 iOS 배포를 위한 신뢰할 수 있고 반복 가능한 CI/CD 워크플로우를 설정할 수 있었어요. 더 이상 주말을 낭비하여 앱 업데이트를 수동으로 빌드, 테스트, 발행할 필요가 없어요.</p>\n<p>이제 매번 커밋이 자동 빌드와 테스트 통과, 그리고 TestFlight로 피드백을 받는 릴리스를 발생시켜요.</p>\n<p>이 가이드는 얻어온 경험, 시행착오, 여러 번의 반복을 토대로 작성했어요. 제 목표는 동료 iOS 개발자들이 겪은 고통을 덜어드리는 거예요. 여기서 상세하고 실행 가능한 단계를 제시함으로써, 여러분은 iOS 애플리케이션을 위한 간소화된 CI/CD 파이프라인을 세우는 데 필요한 도구를 갖추게 될 거예요.</p>\n<h1>전제 조건</h1>\n<ul>\n<li>활성화된 Apple 개발자 계정과 ​​App Store Connect 액세스</li>\n<li>XCode에서의 iOS 앱 프로젝트</li>\n<li>Azure DevOps 조직에 대한 액세스</li>\n<li>IOS 앱 서명 프로세스를 시작하기 위한 p12 및 모바일 Provisional 인증서에 대한 액세스</li>\n</ul>\n<p>Azure DevOps Marketplace</p>\n<ul>\n<li>Apple App Store 확장 프로그램<a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vsclient.app-store%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">https://marketplace.visualstudio.com/items?itemName=ms-vsclient.app-store을</a> 설치하십시오. 이를 통해 App Store API와 통합할 수 있습니다.</li>\n<li>Azure DevOps Marketplace에서 Flutter <a href=\"https://marketplace.visualstudio.com/items?itemName=Hey24sheep.flutter\" rel=\"nofollow\" target=\"_blank\">https://marketplace.visualstudio.com/items?itemName=Hey24sheep.flutter</a> 확장 프로그램을 설치하십시오. 이를 통해 Flutter 앱을 빌드할 수 있습니다.</li>\n</ul>\n<h1>iOS 서명 인증서 설정하기</h1>\n<p>P12 인증서 생성하기</p>\n<p>iOS 앱에 서명하기 위해 필요한 P12 인증서를 생성하는 방법에 대한 자세한 설명은 다음 문서를 활용해주세요: <a href=\"https://www.cheapsslsecurity.com\" rel=\"nofollow\" target=\"_blank\">iOS 앱을 서명하기 위한 CSR 및 P12 인증서 생성 방법</a>.</p>\n<p>해당 문서는 iOS 앱을 서명하기 위해 필요한 p12 인증서를 생성하는 방법에 대한 상세한 지침을 제공합니다.</p>\n<p>프로비저닝 프로필 생성하기</p>\n<p>애플 개발자 페이지에서 Certificates, Identifiers &#x26; Profiles(<code>아이덴티파이어</code>) 섹션으로 이동하세요.</p>\n<ul>\n<li>Profiles에서 새 프로필을 추가하려면 클릭하세요.</li>\n<li>앱을 앱 스토어에 제출하기 위한 배포용 프로비저닝 프로필을 생성하려면 App Store를 선택하세요.</li>\n<li>계속해서 <code>Your_APP_ID</code> 앱 식별자를 선택하세요.</li>\n<li>계속해서 프로비저닝 프로필을 생성하고 저장하고 다운로드하세요.</li>\n</ul>\n<h1>Azure 파이프라인 설정하기</h1>\n<ul>\n<li>Azure DevOps 프로젝트에서, 파이프라인 <code>라이브러리</code> 보안 파일로 이동해 \"mobileProvisional\" 및 \"p12\" 인증서를 추가하세요. 이전에 생성한 인증서입니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_0.png\" alt=\"이미지\"></p>\n<ol start=\"2\">\n<li>Pipelines로 이동하여 <code>새 파이프라인 생성</code> 을 클릭하세요.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_1.png\" alt=\"이미지\"></p>\n<ol start=\"2\">\n<li>옵션으로 \"전통적인 편집기 사용\"을 선택합니다</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_2.png\" alt=\"이미지\"></p>\n<ol start=\"3\">\n<li>Azure 저장소를 선택합니다</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_3.png\" alt=\"이미지\"></p>\n<ol start=\"4\">\n<li>\"빈 작업\"을 선택합니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_4.png\" alt=\"이미지\"></p>\n<ol start=\"5\">\n<li>\"+\" 버튼을 클릭하고 파이프라인에 다음과 같은 라이트 그레이 작업을 추가하고 각 작업의 세부 정보를 모두 입력합니다. 아래의 YAML 파일을 참조로 사용해주세요.</li>\n</ol>\n<ul>\n<li>에이전트에서 실행을 선택하고 에이전트 풀을 \"Azure Pipelines\"로 지정하고 에이전트 사양을 \"macos-latest\"로 지정합니다.</li>\n<li>파이프라인을 준비한 후에 \"저장 및 대기열\"을 클릭하여 파이프라인을 트리거합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_5.png\" alt=\"이미지\"></p>\n<p>아래는 참고용 yaml 코드입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">pool</span>:\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">Azure</span> <span class=\"hljs-title class_\">Pipelines</span>\n  <span class=\"hljs-attr\">demands</span>: xcode\n\n<span class=\"hljs-attr\">steps</span>:\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">JavaToolInstaller</span>@<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'Java 11 사용'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">versionSpec</span>: <span class=\"hljs-number\">11</span>\n    <span class=\"hljs-attr\">jdkArchitectureOption</span>: x64\n    <span class=\"hljs-attr\">jdkSourceOption</span>: <span class=\"hljs-title class_\">PreInstalled</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">InstallAppleCertificate</span>@<span class=\"hljs-number\">2</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'P12 인증서 설치'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">certSecureFile</span>: <span class=\"hljs-string\">'&#x3C;인증서_파일>'</span>\n    <span class=\"hljs-attr\">certPwd</span>: <span class=\"hljs-string\">'&#x3C;비밀번호>'</span>\n    <span class=\"hljs-attr\">setUpPartitionIdACLForPrivateKey</span>: <span class=\"hljs-literal\">false</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">InstallAppleProvisioningProfile</span>@<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'프로비저닝 프로필 설치'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">provProfileSecureFile</span>: <span class=\"hljs-string\">'&#x3C;프로비저닝_파일>'</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Hey24</span>sheep.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">flutter</span>-install.<span class=\"hljs-property\">FlutterInstall</span>@<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'Flutter 설치'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">version</span>: custom\n    <span class=\"hljs-attr\">customVersion</span>: <span class=\"hljs-number\">3.7</span><span class=\"hljs-number\">.9</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Hey24</span>sheep.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">flutter</span>-command.<span class=\"hljs-property\">FlutterCommand</span>@<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'Flutter Clean'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">arguments</span>: clean\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Hey24</span>sheep.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">flutter</span>-build.<span class=\"hljs-property\">FlutterBuild</span>@<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'Flutter iOS 빌드'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">target</span>: ios\n    <span class=\"hljs-attr\">buildFlavour</span>: prod\n    <span class=\"hljs-attr\">buildNumber</span>: <span class=\"hljs-string\">'$(Build.BuildNumber)'</span>\n    <span class=\"hljs-attr\">entryPoint</span>: <span class=\"hljs-string\">'lib/main_prod.dart'</span>\n    <span class=\"hljs-attr\">iosCodesign</span>: <span class=\"hljs-literal\">false</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">Xcode</span>@<span class=\"hljs-number\">5</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'Xcode 빌드 prod'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-attr\">configuration</span>: <span class=\"hljs-string\">'Release-prod'</span>\n    <span class=\"hljs-attr\">sdk</span>: iphoneos\n    <span class=\"hljs-attr\">xcWorkspacePath</span>: <span class=\"hljs-string\">'**/Runner.xcworkspace'</span>\n    <span class=\"hljs-attr\">scheme</span>: prod\n    <span class=\"hljs-attr\">packageApp</span>: <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">archivePath</span>: ./build/ios/iphoneos/<span class=\"hljs-title class_\">Runner</span>.<span class=\"hljs-property\">xcarchive</span>\n    <span class=\"hljs-attr\">exportPath</span>: ./build/ios/iphoneos/<span class=\"hljs-title class_\">Runner</span>.<span class=\"hljs-property\">ipa</span>\n    <span class=\"hljs-attr\">exportOptions</span>: plist\n    <span class=\"hljs-attr\">exportOptionsPlist</span>: ./ios/<span class=\"hljs-title class_\">ExportOptions</span>.<span class=\"hljs-property\">plist</span>\n    <span class=\"hljs-attr\">signingOption</span>: manual\n    <span class=\"hljs-attr\">signingIdentity</span>: <span class=\"hljs-string\">'$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'</span>\n    <span class=\"hljs-attr\">provisioningProfileUuid</span>: <span class=\"hljs-string\">'$(APPLE_PROV_PROFILE_UUID)'</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">CopyFiles</span>@<span class=\"hljs-number\">2</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'파일 복사'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-title class_\">SourceFolder</span>: .\n    <span class=\"hljs-title class_\">Contents</span>: <span class=\"hljs-string\">'**/*.ipa'</span>\n    <span class=\"hljs-title class_\">TargetFolder</span>: <span class=\"hljs-string\">'$(Build.ArtifactStagingDirectory)'</span>\n\n- <span class=\"hljs-attr\">task</span>: <span class=\"hljs-title class_\">PublishBuildArtifacts</span>@<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'Prod Artifact 게시'</span>\n  <span class=\"hljs-attr\">inputs</span>:\n    <span class=\"hljs-title class_\">ArtifactName</span>: <span class=\"hljs-string\">'ios ipa'</span>\n</code></pre>\n<p>상기 파이프라인은 여러분의 파이프라인 내에서 아티팩트를 게시하며, 이를 이후 배포 파이프라인에서 사용할 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_6.png\" alt=\"image\"></p>\n<h1>Azure 서비스 연결 생성하기</h1>\n<p>Azure 앱 스토어 익스텐션을 사용하려면 앱 스토어에 앱을 게시할 수 있는 액세스 권한이 있는 서비스 자격 증명이 필요합니다. 계정에는 '앱 관리자 또는 관리자' 역할이 설정되어야 합니다.</p>\n<ul>\n<li>DevOps 프로젝트에서 프로젝트 설정으로 이동합니다.</li>\n<li>서비스 연결 탭을 선택합니다.</li>\n<li>새 서비스 연결을 추가하고 Apple App Store를 선택합니다.</li>\n<li>새 연결에 이름을 지정하고 Apple 계정의 자격 증명을 입력합니다.</li>\n<li>앱별 패스워드를 제공합니다 (계정이 2단계 인증을 사용 중인 경우). 계정이 2단계 인증을 사용하지 않는 경우 이 값을 전달할 필요가 없습니다.</li>\n</ul>\n<p>이 서비스 연결 이름은 파이프라인 릴리스 단계에서 사용할 수 있습니다.</p>\n<h2>이중 인증 프로세스</h2>\n<p>게시 계정에서 특정 응용 프로그램 비밀번호를 만들어야 합니다.</p>\n<ul>\n<li><a href=\"http://appleid.apple.com/account/manage%EC%97%90\" rel=\"nofollow\" target=\"_blank\">http://appleid.apple.com/account/manage에</a> 방문</li>\n<li>새로운 응용 프로그램별 비밀번호를 생성</li>\n<li>위 단계에서 사용할 이 비밀번호를 메모하세요</li>\n</ul>\n<h1>앱 스토어 릴리스 파이프라인 설정</h1>\n<ul>\n<li>Azure DevOps 프로젝트에서 파이프라인으로 이동하여 <code>릴리스</code> 새 릴리스 파이프라인을 만들고 템플릿을 \"빈 작업\"으로 선택합니다.</li>\n<li>\"아티팩트 추가\"를 선택한 다음 위에서 만든 파이프라인을 선택합니다. (이 아티팩트는 App Store Connect에 업로드하는 데 사용됩니다)</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_7.png\" alt=\"이미지\"></p>\n<ul>\n<li>스테이지에 빈 작업을 추가하고 아래의 작업 \"Apple App Store 릴리스\"를 추가합니다.</li>\n</ul>\n<ul>\n<li>에이전트에서 실행을 선택하고 에이전트 풀을 \"Azure 파이프라인\"으로 지정하고 에이전트 사양을 \"macos-latest\"로 지정합니다.</li>\n<li>위에서 만든 서비스 연결을 선택합니다.</li>\n<li>작업에서 빌드 처리 대기를 건너뜁니다.</li>\n<li>앱 정보 내부에있는 번들 ID 및 App 특정 Apple ID를 추가합니다. 번들 ID 및 App 특정 Apple ID는 <a href=\"https://appstoreconnect.apple.com/\" rel=\"nofollow\" target=\"_blank\">https://appstoreconnect.apple.com/</a> 에서 찾을 수 있습니다.</li>\n<li>세 점을 클릭하여 아티팩트의 이진 경로를 선택합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_8.png\" alt=\"이미지\"></p>\n<ol start=\"4\">\n<li>새 릴리스를 생성하면 로그에서 다음과 같은 성공 메시지가 표시됩니다. 이것은 아티팩트가 앱 스토어 커넥트 'Test Flight'에 업로드되었음을 확인합니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_9.png\" alt=\"이미지\"></p>\n<h1>앱 스토어 테스트 플라이트 확인</h1>\n<p><img src=\"/assets/img/2024-06-21-BuildandDeployCICDforFlutteriOSAppReleasewithAzureDevOpsPipelines_10.png\" alt=\"이미지\"></p>\n<p>그리고 이것으로 iOS 앱을 위한 CI/CD를 구현하는 시작부터 끝까지의 가이드를 마무리합니다! 제 경험을 경험하면서 유용한 통찰을 얻을 수 있기를 바랍니다. 개발 단계에서 적용할 수 있도록 도움이 되기를 바랍니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}