{"pageProps":{"post":{"title":"Flutter 레이아웃 치트 시트 완벽 가이드","description":"","date":"2024-06-22 15:45","slug":"2024-06-22-FlutterLayoutCheatSheet","content":"\n플러터를 위한 간단한 레이아웃 샘플이 필요하신가요?\n제가 마련한 플러터 레이아웃 코드 조각을 소개합니다. 시각적 예시를 풍부하고 간결하게 제시할 거에요.\n아직은 작업 중이라 샘플 목록은 계속 늘어날 거예요. 플러터 위젯의 활용에 더 초점을 맞출 거라 구성요소를 보여주는 것보다는 (플러터 갤러리가 그런 부분에 뛰어나거든요!)\n플러터 레이아웃에 문제가 있거나 다른 사람들과 코드 조각을 공유하고 싶다면 말씀해주세요!\n\n이 기사는 다음 언어로도 제공됩니다:\n\n- Eddy에 의해 포르투갈어\n\n애니메이션에 관한 유사한 기사가 궁금하시다면, Flutter Animations Cheat Sheet를 확인해보세요.\n\n<div class=\"content-ad\"></div>\n\n# 목차\n\n- 행 및 열\n- 내재 너비 및 내재 높이\n- 쌓기\n- 확장\n- 제약 상자\n- 정렬\n- 컨테이너\n  - 장식: BoxDecoration\n    - 이미지: DecorationImage\n    - 테두리: Border\n    - 경계 반지름: BorderRadius\n    - 모양: BoxShape\n    - 그림자: BoxShadow 목록\n    - 그라데이션: RadialGradient\n    - 배경 혼합 모드: BlendMode\n- 재료\n  - 모양: BeveledRectangleBorder\n- 슬리버\n  - SliverFillRemaining\n- SizedBox\n- 안전 영역\n\n# 행 및 열\n\n## 주축 정렬\n\n<div class=\"content-ad\"></div>\n\n```js\nRow /*또는 Column*/(\n  mainAxisAlignment: MainAxisAlignment.start,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n```js\nRow /*또는 Column*/(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n```js\nRow /*또는 Column*/(\n  mainAxisAlignment: MainAxisAlignment.end,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n```js\nRow /*또는 Column*/(\n  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n<div class=\"content-ad\"></div>\n\n표태그를 다음과 같이 Markdown 형식으로 변경하십시오.\n\n```js\nRow /*or Column*/(\n  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n```js\nRow /*or Column*/(\n  mainAxisAlignment: MainAxisAlignment.spaceAround,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_0.png\" />\n\n다른 텍스트의 기준선을 정렬해야 한다면 CrossAxisAlignment.baseline을 사용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\nRow(\ncrossAxisAlignment: CrossAxisAlignment.baseline,\ntextBaseline: TextBaseline.alphabetic,\nchildren: <Widget>[\nText(\n'Baseline',\nstyle: Theme.of(context).textTheme.display3,\n),\nText(\n'Baseline',\nstyle: Theme.of(context).textTheme.body1,\n),\n],\n),\n\n## CrossAxisAlignment\n\nRow /_or Column_/(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: <Widget>[\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 200),\nIcon(Icons.star, size: 50),\n],\n),\n\nRow /_or Column_/(\ncrossAxisAlignment: CrossAxisAlignment.center,\nchildren: <Widget>[\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 200),\nIcon(Icons.star, size: 50),\n],\n),\n\n<div class=\"content-ad\"></div>\n\n```js\nRow /*또는 Column*/(\n  crossAxisAlignment: CrossAxisAlignment.end,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 200),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n```js\nRow /*또는 Column*/(\n  crossAxisAlignment: CrossAxisAlignment.stretch,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 200),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n## MainAxisSize\n\n```js\nRow /*또는 Column*/(\n  mainAxisSize: MainAxisSize.max,\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n<div class=\"content-ad\"></div>\n\nRow /_or Column_/(\nmainAxisSize: MainAxisSize.min,\nchildren: <Widget>[\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 50),\n],\n),\n\n# IntrinsicWidth and IntrinsicHeight\n\nWant all the widgets inside Row or Column to be as tall/wide as the tallest/widest widget? Search no more!\n\nIn case you have this kind of layout:\n\n<div class=\"content-ad\"></div>\n\n```js\n위젯 build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('IntrinsicWidth')),\n    body: Center(\n      child: Column(\n        children: <Widget>[\n          RaisedButton(\n            onPressed: () {},\n            child: Text('Short'),\n          ),\n          RaisedButton(\n            onPressed: () {},\n            child: Text('A bit Longer'),\n          ),\n          RaisedButton(\n            onPressed: () {},\n            child: Text('The Longest text button'),\n          ),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n만약 모든 버튼을 가장 넓은 것처럼 넓게 만들고 싶다면 IntrinsicWidth를 사용하세요:\n\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_2.png\" />\n\n<div class=\"content-ad\"></div>\n\n```js\n위젯 build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('IntrinsicWidth')),\n    body: Center(\n      child: IntrinsicWidth(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: <Widget>[\n            RaisedButton(\n              onPressed: () {},\n              child: Text('Short'),\n            ),\n            RaisedButton(\n              onPressed: () {},\n              child: Text('A bit Longer'),\n            ),\n            RaisedButton(\n              onPressed: () {},\n              child: Text('The Longest text button'),\n            ),\n          ],\n        ),\n      ),\n    ),\n  );\n}\n\n비슷한 문제가 있지만 위젯을 가장 큰 높이에 맞추고 싶다면 IntrinsicHeight와 Row 위젯의 조합을 사용하면 됩니다.\n\n# Stack\n\n위젯을 서로 겹쳐 놓을 때 사용합니다.\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n@override\nWidget build(BuildContext context) {\n  Widget main = Scaffold(\n    appBar: AppBar(title: Text('Stack')),\n  );\n\n  return Stack(\n    fit: StackFit.expand,\n    children: <Widget>[\n      main,\n      Banner(\n        message: \"Top Start\",\n        location: BannerLocation.topStart,\n      ),\n      Banner(\n        message: \"Top End\",\n        location: BannerLocation.topEnd,\n      ),\n      Banner(\n        message: \"Bottom Start\",\n        location: BannerLocation.bottomStart,\n      ),\n      Banner(\n        message: \"Bottom End\",\n        location: BannerLocation.bottomEnd,\n      ),\n    ],\n  );\n}\n```\n\n자체 위젯을 사용하려면 Positioned 위젯에 배치하셔야 합니다.\n\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n```js\n위젯 build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('Stack')),\n    body: Stack(\n      fit: StackFit.expand,\n      children: <Widget>[\n        Material(color: Colors.yellowAccent),\n        Positioned(\n          top: 0,\n          left: 0,\n          child: Icon(Icons.star, size: 50),\n        ),\n        Positioned(\n          top: 340,\n          left: 250,\n          child: Icon(Icons.call, size: 50),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n만약 상하값을 추측하기 싫다면 LayoutBuilder를 사용하여 값을 가져올 수 있어요\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_5.png)\n\n```js\nWidget build(BuildContext context) {\n  const iconSize = 50;\n  return Scaffold(\n    appBar: AppBar(title: Text('Stack with LayoutBuilder')),\n    body: LayoutBuilder(\n      builder: (context, constraints) =>\n        Stack(\n          fit: StackFit.expand,\n          children: <Widget>[\n            Material(color: Colors.yellowAccent),\n            Positioned(\n              top: 0,\n              child: Icon(Icons.star, size: iconSize),\n            ),\n            Positioned(\n              top: constraints.maxHeight - iconSize,\n              left: constraints.maxWidth - iconSize,\n              child: Icon(Icons.call, size: iconSize),\n            ),\n          ],\n        ),\n    ),\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 확장된\n\n확장된은 Flexbox 레이아웃과 함께 작동하며 여러 항목 간의 공간을 효율적으로 분배하는 데 좋습니다.\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_6.png)\n\n```js\nRow(\n  children: <Widget>[\n    Expanded(\n      child: Container(\n        decoration: const BoxDecoration(color: Colors.red),\n      ),\n      flex: 3,\n    ),\n    Expanded(\n      child: Container(\n        decoration: const BoxDecoration(color: Colors.green),\n      ),\n      flex: 2,\n    ),\n    Expanded(\n      child: Container(\n        decoration: const BoxDecoration(color: Colors.blue),\n      ),\n      flex: 1,\n    ),\n  ],\n),\n```\n\n<div class=\"content-ad\"></div>\n\n# ConstrainedBox\n\n기본적으로 대부분의 위젯은 가능한 한 적은 공간을 사용합니다:\n\n![ConstrainedBox Example](/assets/img/2024-06-22-FlutterLayoutCheatSheet_7.png)\n\n```js\nCard(child: const Text('Hello World!'), color: Colors.yellow)\n```\n\n<div class=\"content-ad\"></div>\n\nConstrainedBox 위젯을 사용하면 원하는 대로 남은 공간을 활용할 수 있어요.\n\n![ConstrainedBox Example](/assets/img/2024-06-22-FlutterLayoutCheatSheet_8.png)\n\n```js\nConstrainedBox(\n  constraints: BoxConstraints.expand(),\n  child: const Card(\n    child: const Text('Hello World!'),\n    color: Colors.yellow,\n  ),\n),\n```\n\nBoxConstraints를 사용하면 위젯이 차지할 수 있는 공간의 양을 지정할 수 있어요. 높이와 너비의 최소 및 최대 값을 지정해요.\n\n<div class=\"content-ad\"></div>\n\n다음은 BoxConstraints.expand을 사용할 때의 동작입니다:\n\n![image](/assets/img/2024-06-22-FlutterLayoutCheatSheet_9.png)\n\n```js\nConstrainedBox(\n  constraints: BoxConstraints.expand(height: 300),\n  child: const Card(\n    child: const Text('Hello World!'),\n    color: Colors.yellow,\n  ),\n),\n```\n\n이것은 다음과 동일합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nConstrainedBox(\n  constraints: BoxConstraints(\n    minWidth: double.infinity,\n    maxWidth: double.infinity,\n    minHeight: 300,\n    maxHeight: 300,\n  ),\n  child: const Card(\n    child: const Text('Hello World!'),\n    color: Colors.yellow,\n  ),\n),\n```\n\n# Align\n\n때때로 위젯을 적절한 크기로 설정하는 데 어려움을 겪을 때가 있습니다. 예를 들어, 원치 않는 스트레칭이 계속 발생하는 경우가 있습니다:\n\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_10.png\" />\n\n<div class=\"content-ad\"></div>\n\n위와 같은 상황이 발생하는 예시는 Column에 CrossAxisAlignment.stretch를 가진 경우이며, 버튼만 늘어지지 않도록 원할 때 발생합니다:\n\n![image](/assets/img/2024-06-22-FlutterLayoutCheatSheet_11.png)\n\n```js\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('Align: without Align')),\n    body: Column(\n      crossAxisAlignment: CrossAxisAlignment.stretch,\n      children: <Widget>[\n        Align(\n          child: RaisedButton(\n            onPressed: () {},\n            child: const Text('Button'),\n          ),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n위젯이 설정한 제약을 수용하지 않을 때는 첫 번째로 Align으로 감싸 보세요.\n\n<div class=\"content-ad\"></div>\n\n# 컨테이너\n\n가장 많이 사용되는 위젯 중 하나입니다! 그리고 그 이유가 있어요:\n\n## 레이아웃 도구로서의 컨테이너\n\n컨테이너의 높이와 너비를 지정하지 않으면, 자식 요소의 크기에 맞추게 됩니다\n\n<div class=\"content-ad\"></div>\n\n![Flutter Layout Cheat Sheet](/assets/img/2024-06-22-FlutterLayoutCheatSheet_12.png)\n\n```js\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('Container as a layout')),\n    body: Container(\n      color: Colors.yellowAccent,\n      child: Text(\"Hi\"),\n    ),\n  );\n}\n```\n\nIf you want to stretch the Container to match its parent, use `double.infinity` for the `height` and `width` properties\n\n![Flutter Layout Cheat Sheet](/assets/img/2024-06-22-FlutterLayoutCheatSheet_13.png)\n\n<div class=\"content-ad\"></div>\n\n```js\n위젯 build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(title: Text('Container를 레이아웃으로 사용하기')),\n        body: Container(\n            height: double.infinity,\n            width: double.infinity,\n            color: Colors.yellowAccent,\n            child: Text(\"안녕하세요\"),\n        ),\n    );\n}\n```\n\n## Decoration으로 Container 스타일링\n\nContainer의 배경에 영향을 주기 위해 color 속성을 사용할 수 있습니다. 그러나 decoration 및 foregroundDecoration을 사용할 수도 있습니다. (이 두 속성을 사용하면 Container의 전체적인 모양을 완전히 바꿀 수 있지만 이후에 다른 스타일에 대해 이야기할 것입니다. 그것은 꽤 큰 주제이기 때문에!)\ndecoration은 항상 자식 위에 배치되지만, foregroundDecoration은 자식 위에 배치됩니다.\n\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_14.png\" />\n\n<div class=\"content-ad\"></div>\n\n```js\n위젯 빌드(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('Container.decoration')),\n    body: Container(\n      height: double.infinity,\n      width: double.infinity,\n      decoration: BoxDecoration(color: Colors.yellowAccent),\n      child: Text(\"안녕하세요\"),\n    ),\n  );\n}\n```\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_15.png)\n\n```js\n위젯 빌드(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('Container.foregroundDecoration')),\n    body: Container(\n      height: double.infinity,\n      width: double.infinity,\n      decoration: BoxDecoration(color: Colors.yellowAccent),\n      foregroundDecoration: BoxDecoration(\n        color: Colors.red.withOpacity(0.5),\n      ),\n      child: Text(\"안녕하세요\"),\n    ),\n  );\n}\n```\n\n## Transform으로서의 Container\n\n<div class=\"content-ad\"></div>\n\n만약 레이아웃을 변경하기 위해 Transform 위젯을 사용하고 싶지 않다면, Container에서 직접 transform 속성을 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_16.png)\n\n```js\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text('Container.transform')),\n    body: Container(\n      height: 300,\n      width: 300,\n      transform: Matrix4.rotationZ(pi / 4),\n      decoration: BoxDecoration(color: Colors.yellowAccent),\n      child: Text(\n        \"안녕\",\n        textAlign: TextAlign.center,\n      ),\n    ),\n  );\n}\n```\n\n# BoxDecoration\n\n<div class=\"content-ad\"></div>\n\n일반적으로 장식은 컨테이너 위젯에 사용되어 컨테이너가 어떻게 보이는지를 변경합니다.\n\n### 이미지: DecorationImage\n\n배경으로 이미지를 넣습니다:\n\n![image](/assets/img/2024-06-22-FlutterLayoutCheatSheet_17.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('image: DecorationImage')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        color: Colors.yellow,\n        image: DecorationImage(\n          fit: BoxFit.fitWidth,\n          image: NetworkImage(\n            'https://flutter.io/images/catalog-widget-placeholder.png',\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n## border: Border\n\nContainer의 테두리가 어떻게 보일지를 지정합니다.\n\n![image](/assets/img/2024-06-22-FlutterLayoutCheatSheet_18.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('border: Border')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        color: Colors.yellow,\n        border: Border.all(color: Colors.black, width: 3),\n      ),\n    ),\n  ),\n);\n```\n\n## borderRadius: BorderRadius\n\n모서리를 둥글게 만듭니다.\n\ndecoration의 모양이 BoxShape.circle인 경우 borderRadius는 작동하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('borderRadius: BorderRadius')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        color: Colors.yellow,\n        border: Border.all(color: Colors.black, width: 3),\n        borderRadius: BorderRadius.all(Radius.circular(18)),\n      ),\n    ),\n  ),\n);\n```\n\n## shape: BoxShape\n\n박스의 장식은 사각형/정사각형 또는 타원/원이 될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다른 모양을 사용하려면 BoxDecoration 대신 ShapeDecoration을 사용할 수 있습니다.\n\n![ShapeDecoration](/assets/img/2024-06-22-FlutterLayoutCheatSheet_20.png)\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('shape: BoxShape')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: ShapeDecoration(\n        color: Colors.yellow,\n        shape: BoxShape.circle,\n      ),\n    ),\n  ),\n);\n```\n\n## boxShadow: List`BoxShadow`\n\n<div class=\"content-ad\"></div>\n\n아래는 Container에 그림자를 추가한 코드입니다.\n\n이 매개변수는 여러 가지 그림자를 지정하고 병합할 수 있으므로 목록 형태로 제공됩니다.\n\n![그림자 추가](/assets/img/2024-06-22-FlutterLayoutCheatSheet_21.png)\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('boxShadow: List<BoxShadow>')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        color: Colors.yellow,\n        boxShadow: const [\n          BoxShadow(blurRadius: 10),\n        ],\n      ),\n    ),\n  ),\n);\n```\n\n<div class=\"content-ad\"></div>\n\n## 그라데이션\n\n그라데이션에는 선형 그라데이션(LinearGradient), 원형 그라데이션(RadialGradient) 및 스윕 그라데이션(SweepGradient) 세 가지 유형이 있습니다.\n\n![Gradient](/assets/img/2024-06-22-FlutterLayoutCheatSheet_22.png)\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('gradient: LinearGradient')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          colors: const [\n            Colors.red,\n            Colors.blue,\n          ],\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n<div class=\"content-ad\"></div>\n\n![Flutter Layout Cheat Sheet 23](/assets/img/2024-06-22-FlutterLayoutCheatSheet_23.png)\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('gradient: RadialGradient')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        gradient: RadialGradient(\n          colors: const [Colors.yellow, Colors.blue],\n          stops: const [0.4, 1.0],\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n![Flutter Layout Cheat Sheet 24](/assets/img/2024-06-22-FlutterLayoutCheatSheet_24.png)\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('gradient: SweepGradient')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      decoration: BoxDecoration(\n        gradient: SweepGradient(\n          colors: const [\n            Colors.blue,\n            Colors.green,\n            Colors.yellow,\n            Colors.red,\n            Colors.blue,\n          ],\n          stops: const [0.0, 0.25, 0.5, 0.75, 1.0],\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n<div class=\"content-ad\"></div>\n\n## backgroundBlendMode\n\n`backgroundBlendMode`은 BoxDecoration의 가장 복잡한 속성입니다.\n이 속성은 BoxDecoration의 색상/그라데이션을 섞고, BoxDecoration이 위에 있는 것과 혼합하는 역할을 합니다.\n\n`backgroundBlendMode`를 사용하면 `BlendMode` 열거형에서 지정된 다양한 알고리즘을 사용할 수 있습니다.\n\n먼저, `backgroundBlendMode`를 사용하여 Container의 자식 위에 그려지는 `foregroundDecoration`을 BoxDecoration으로 설정해 봅시다. (반면 decoration은 자식 뒤에 그려집니다)\n\n<div class=\"content-ad\"></div>\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('backgroundBlendMode')),\n  body: Center(\n    child: Container(\n      height: 200,\n      width: 200,\n      foregroundDecoration: BoxDecoration(\n        backgroundBlendMode: BlendMode.exclusion,\n        gradient: LinearGradient(\n          colors: const [\n            Colors.red,\n            Colors.blue,\n          ],\n        ),\n      ),\n      child: Image.network(\n        'https://flutter.io/images/catalog-widget-placeholder.png',\n      ),\n    ),\n  ),\n);\n```\n\n`backgroundBlendMode`은 해당 Container에만 영향을 미치는 것이 아닙니다.\n\n`backgroundBlendMode`은 Container에서 상위 위젯 트리에 올라가 있는 모든 색상을 변경합니다.\n아래 코드는 이미지를 그리는 부모 Container와 `backgroundBlendMode`를 사용하는 자식 Container가 있지만, 이전과 동일한 효과를 얻을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('backgroundBlendMode')),\n  body: Center(\n    child: Container(\n      decoration: BoxDecoration(\n        image: DecorationImage(\n          image: NetworkImage(\n            'https://flutter.io/images/catalog-widget-placeholder.png',\n          ),\n        ),\n      ),\n      child: Container(\n        height: 200,\n        width: 200,\n        foregroundDecoration: BoxDecoration(\n          backgroundBlendMode: BlendMode.exclusion,\n          gradient: LinearGradient(\n            colors: const [\n              Colors.red,\n              Colors.blue,\n            ],\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n# Material\n\nBorder with cut corners\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_27.png\" />\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('shape: BeveledRectangleBorder')),\n  body: Center(\n    child: Material(\n      shape: const BeveledRectangleBorder(\n        borderRadius: BorderRadius.all(Radius.circular(20)),\n        side: BorderSide(color: Colors.black, width: 4),\n      ),\n      color: Colors.yellow,\n      child: Container(\n        height: 200,\n        width: 200,\n      ),\n    ),\n  ),\n);\n```\n\n# Slivers\n\n# SliverFillRemaining\n\n<div class=\"content-ad\"></div>\n\n이 위젯은 콘텐츠를 중앙 정렬하고 싶을 때 공간이 충분하지 않은 경우에 교체할 수 없습니다. 대화형 예제 있어요!\n\n![FlutterLayoutCheatSheet_28](/assets/img/2024-06-22-FlutterLayoutCheatSheet_28.png)\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('SliverFillRemaining')),\n  body: CustomScrollView(\n    slivers: [\n      SliverFillRemaining(\n        hasScrollBody: false,\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: const [\n            FlutterLogo(size: 200),\n            Text(\n              '로고와 함께 중앙 정렬되어야 하는 가장 긴 텍스트입니다',\n              textAlign: TextAlign.center,\n            ),\n          ],\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n중앙 정렬된 콘텐츠에 공간이 충분하지 않은 경우 SliverFillRemaining이 스크롤 가능해집니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_29.png)\n\n만약 SliverFillRemaining이 없었다면 컨텐츠가 이렇게 오버플로될 것입니다:\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_30.png)\n\n## 남은 공간 채우기\n\n<div class=\"content-ad\"></div>\n\n내용을 가운데 정렬하는 데 유용한 SliverFillRemaining은 뷰포트의 여유 공간을 채웁니다. 이 위젯을 사용하려면 CustomScrollView에 배치되어야하며 마지막 슬리버여야합니다.\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_31.png)\n\n공간이 충분하지 않은 경우 위젯은 스크롤 가능해집니다.\n\n![이미지](/assets/img/2024-06-22-FlutterLayoutCheatSheet_32.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nScaffold(\n  appBar: AppBar(title: Text('SliverFillRemaining')),\n  body: CustomScrollView(\n    slivers: [\n      SliverList(\n        delegate: SliverChildListDelegate(const [\n          ListTile(title: Text('First item')),\n          ListTile(title: Text('Second item')),\n          ListTile(title: Text('Third item')),\n          ListTile(title: Text('Fourth item')),\n        ]),\n      ),\n      SliverFillRemaining(\n        hasScrollBody: false,\n        child: Container(\n          color: Colors.yellowAccent,\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: const [\n              FlutterLogo(size: 200),\n              Text(\n                'This is some longest text that should be centered'\n                'together with the logo',\n                textAlign: TextAlign.center,\n              ),\n            ],\n          ),\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n## SizedBox\n\n가장 간단하지만 가장 유용한 위젯 중 하나입니다\n\n### ConstrainedBox로서의 SizedBox\n\n<div class=\"content-ad\"></div>\n\nSizedBox는 ConstrainedBox와 비슷한 방식으로 작동할 수 있어요.\n\n![image](/assets/img/2024-06-22-FlutterLayoutCheatSheet_33.png)\n\n```js\nSizedBox.expand(\n  child: Card(\n    child: Text('Hello World!'),\n    color: Colors.yellowAccent,\n  ),\n),\n```\n\n## SizedBox를 패딩으로 사용하기\n\n<div class=\"content-ad\"></div>\n\n여백이나 여백을 추가해야 할 때는 Padding 또는 Container 위젯을 선택할 수 있습니다. 그러나 이러한 방식은 Sizedbox를 추가하는 것보다 더 길고 가독성이 떨어질 수 있습니다.\n\n![FlutterLayoutCheatSheet_34](/assets/img/2024-06-22-FlutterLayoutCheatSheet_34.png)\n\n```js\nColumn(\n  children: <Widget>[\n    Icon(Icons.star, size: 50),\n    const SizedBox(height: 100),\n    Icon(Icons.star, size: 50),\n    Icon(Icons.star, size: 50),\n  ],\n),\n```\n\n## SizedBox를 사용한 보이지 않는 객체\n\n<div class=\"content-ad\"></div>\n\n많은 시간에 따라 위젯을 숨기거나 표시하고 싶을 때가 많습니다.\n\n```js\nWidget build(BuildContext context) {\n  bool isVisible = ...\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('isVisible = $isVisible'),\n    ),\n    body: isVisible\n      ? Icon(Icons.star, size: 150)\n      : const SizedBox(),\n  );\n}\n```\n\nSizedBox에는 const 생성자가 있으므로 const SizedBox()를 사용하는 것이 정말 저렴합니다\\*\\*.\n\n\\*\\*보다 저렴한 해결책은 Opacity 위젯을 사용하고 투명도 값을 0.0으로 변경하는 것입니다. 이 해결책의 단점은 주어진 위젯이 보이지 않을 뿐 아직 공간을 차지할 것이라는 점입니다.\n\n<div class=\"content-ad\"></div>\n\n# SafeArea\n\n다양한 플랫폼에서 안드로이드의 상태 바(Status Bar)나 아이폰 X의 노치(Notch)와 같은 특별한 영역이 있습니다.\n\n이러한 영역 아래에는 그리기를 피할 필요가 있습니다.\n\n이 문제의 해결책은 SafeArea 위젯입니다 (SafeArea를 사용한 예시).\n\n```js\nWidget build(BuildContext context) {\n  return Material(\n    color: Colors.blue,\n    child: SafeArea(\n      child: SizedBox.expand(\n        child: Card(color: Colors.yellowAccent),\n      ),\n    ),\n  );\n}\n```\n\n<div class=\"content-ad\"></div>\n\n중요한 질문이 있으시면 놓치지 않으려면 트위터에서 저에게 개인 메시지를 보내주세요!\n","ogImage":{"url":"/assets/img/2024-06-22-FlutterLayoutCheatSheet_0.png"},"coverImage":"/assets/img/2024-06-22-FlutterLayoutCheatSheet_0.png","tag":["Tech"],"readingTime":24},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>플러터를 위한 간단한 레이아웃 샘플이 필요하신가요?\n제가 마련한 플러터 레이아웃 코드 조각을 소개합니다. 시각적 예시를 풍부하고 간결하게 제시할 거에요.\n아직은 작업 중이라 샘플 목록은 계속 늘어날 거예요. 플러터 위젯의 활용에 더 초점을 맞출 거라 구성요소를 보여주는 것보다는 (플러터 갤러리가 그런 부분에 뛰어나거든요!)\n플러터 레이아웃에 문제가 있거나 다른 사람들과 코드 조각을 공유하고 싶다면 말씀해주세요!</p>\n<p>이 기사는 다음 언어로도 제공됩니다:</p>\n<ul>\n<li>Eddy에 의해 포르투갈어</li>\n</ul>\n<p>애니메이션에 관한 유사한 기사가 궁금하시다면, Flutter Animations Cheat Sheet를 확인해보세요.</p>\n<div class=\"content-ad\"></div>\n<h1>목차</h1>\n<ul>\n<li>행 및 열</li>\n<li>내재 너비 및 내재 높이</li>\n<li>쌓기</li>\n<li>확장</li>\n<li>제약 상자</li>\n<li>정렬</li>\n<li>컨테이너\n<ul>\n<li>장식: BoxDecoration\n<ul>\n<li>이미지: DecorationImage</li>\n<li>테두리: Border</li>\n<li>경계 반지름: BorderRadius</li>\n<li>모양: BoxShape</li>\n<li>그림자: BoxShadow 목록</li>\n<li>그라데이션: RadialGradient</li>\n<li>배경 혼합 모드: BlendMode</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>재료\n<ul>\n<li>모양: BeveledRectangleBorder</li>\n</ul>\n</li>\n<li>슬리버\n<ul>\n<li>SliverFillRemaining</li>\n</ul>\n</li>\n<li>SizedBox</li>\n<li>안전 영역</li>\n</ul>\n<h1>행 및 열</h1>\n<h2>주축 정렬</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">start</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">end</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">spaceBetween</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>표태그를 다음과 같이 Markdown 형식으로 변경하십시오.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*or Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">spaceEvenly</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*or Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">spaceAround</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_0.png\">\n<p>다른 텍스트의 기준선을 정렬해야 한다면 CrossAxisAlignment.baseline을 사용해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>Row(\ncrossAxisAlignment: CrossAxisAlignment.baseline,\ntextBaseline: TextBaseline.alphabetic,\nchildren: <widget>[\nText(\n'Baseline',\nstyle: Theme.of(context).textTheme.display3,\n),\nText(\n'Baseline',\nstyle: Theme.of(context).textTheme.body1,\n),\n],\n),</widget></p>\n<h2>CrossAxisAlignment</h2>\n<p>Row /<em>or Column</em>/(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: <widget>[\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 200),\nIcon(Icons.star, size: 50),\n],\n),</widget></p>\n<p>Row /<em>or Column</em>/(\ncrossAxisAlignment: CrossAxisAlignment.center,\nchildren: <widget>[\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 200),\nIcon(Icons.star, size: 50),\n],\n),</widget></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">crossAxisAlignment</span>: <span class=\"hljs-title class_\">CrossAxisAlignment</span>.<span class=\"hljs-property\">end</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">200</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">crossAxisAlignment</span>: <span class=\"hljs-title class_\">CrossAxisAlignment</span>.<span class=\"hljs-property\">stretch</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">200</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<h2>MainAxisSize</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> <span class=\"hljs-comment\">/*또는 Column*/</span>(\n  <span class=\"hljs-attr\">mainAxisSize</span>: <span class=\"hljs-title class_\">MainAxisSize</span>.<span class=\"hljs-property\">max</span>,\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Row /<em>or Column</em>/(\nmainAxisSize: MainAxisSize.min,\nchildren: <widget>[\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 50),\nIcon(Icons.star, size: 50),\n],\n),</widget></p>\n<h1>IntrinsicWidth and IntrinsicHeight</h1>\n<p>Want all the widgets inside Row or Column to be as tall/wide as the tallest/widest widget? Search no more!</p>\n<p>In case you have this kind of layout:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">위젯 <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'IntrinsicWidth'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n        <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n          <span class=\"hljs-title class_\">RaisedButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: () {},\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Short'</span>),\n          ),\n          <span class=\"hljs-title class_\">RaisedButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: () {},\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'A bit Longer'</span>),\n          ),\n          <span class=\"hljs-title class_\">RaisedButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: () {},\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'The Longest text button'</span>),\n          ),\n        ],\n      ),\n    ),\n  );\n}\n</code></pre>\n<p>만약 모든 버튼을 가장 넓은 것처럼 넓게 만들고 싶다면 IntrinsicWidth를 사용하세요:</p>\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_2.png\">\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">위젯 <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'IntrinsicWidth'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">IntrinsicWidth</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">crossAxisAlignment</span>: <span class=\"hljs-title class_\">CrossAxisAlignment</span>.<span class=\"hljs-property\">stretch</span>,\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-title class_\">RaisedButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: () {},\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Short'</span>),\n            ),\n            <span class=\"hljs-title class_\">RaisedButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: () {},\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'A bit Longer'</span>),\n            ),\n            <span class=\"hljs-title class_\">RaisedButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: () {},\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'The Longest text button'</span>),\n            ),\n          ],\n        ),\n      ),\n    ),\n  );\n}\n\n비슷한 문제가 있지만 위젯을 가장 큰 높이에 맞추고 싶다면 <span class=\"hljs-title class_\">IntrinsicHeight</span>와 <span class=\"hljs-title class_\">Row</span> 위젯의 조합을 사용하면 됩니다.\n\n# <span class=\"hljs-title class_\">Stack</span>\n\n위젯을 서로 겹쳐 놓을 때 사용합니다.\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">@override\n<span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-title class_\">Widget</span> main = <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Stack'</span>)),\n  );\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Stack</span>(\n    <span class=\"hljs-attr\">fit</span>: <span class=\"hljs-title class_\">StackFit</span>.<span class=\"hljs-property\">expand</span>,\n    <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n      main,\n      <span class=\"hljs-title class_\">Banner</span>(\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Top Start\"</span>,\n        <span class=\"hljs-attr\">location</span>: <span class=\"hljs-title class_\">BannerLocation</span>.<span class=\"hljs-property\">topStart</span>,\n      ),\n      <span class=\"hljs-title class_\">Banner</span>(\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Top End\"</span>,\n        <span class=\"hljs-attr\">location</span>: <span class=\"hljs-title class_\">BannerLocation</span>.<span class=\"hljs-property\">topEnd</span>,\n      ),\n      <span class=\"hljs-title class_\">Banner</span>(\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Bottom Start\"</span>,\n        <span class=\"hljs-attr\">location</span>: <span class=\"hljs-title class_\">BannerLocation</span>.<span class=\"hljs-property\">bottomStart</span>,\n      ),\n      <span class=\"hljs-title class_\">Banner</span>(\n        <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Bottom End\"</span>,\n        <span class=\"hljs-attr\">location</span>: <span class=\"hljs-title class_\">BannerLocation</span>.<span class=\"hljs-property\">bottomEnd</span>,\n      ),\n    ],\n  );\n}\n</code></pre>\n<p>자체 위젯을 사용하려면 Positioned 위젯에 배치하셔야 합니다.</p>\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_4.png\">\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">위젯 <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Stack'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Stack</span>(\n      <span class=\"hljs-attr\">fit</span>: <span class=\"hljs-title class_\">StackFit</span>.<span class=\"hljs-property\">expand</span>,\n      <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n        <span class=\"hljs-title class_\">Material</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>),\n        <span class=\"hljs-title class_\">Positioned</span>(\n          <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n        ),\n        <span class=\"hljs-title class_\">Positioned</span>(\n          <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">340</span>,\n          <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">250</span>,\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">call</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n        ),\n      ],\n    ),\n  );\n}\n</code></pre>\n<p>만약 상하값을 추측하기 싫다면 LayoutBuilder를 사용하여 값을 가져올 수 있어요</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_5.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">const</span> iconSize = <span class=\"hljs-number\">50</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Stack with LayoutBuilder'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">LayoutBuilder</span>(\n      <span class=\"hljs-attr\">builder</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context, constraints</span>) =></span>\n        <span class=\"hljs-title class_\">Stack</span>(\n          <span class=\"hljs-attr\">fit</span>: <span class=\"hljs-title class_\">StackFit</span>.<span class=\"hljs-property\">expand</span>,\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-title class_\">Material</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>),\n            <span class=\"hljs-title class_\">Positioned</span>(\n              <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span>,\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: iconSize),\n            ),\n            <span class=\"hljs-title class_\">Positioned</span>(\n              <span class=\"hljs-attr\">top</span>: constraints.<span class=\"hljs-property\">maxHeight</span> - iconSize,\n              <span class=\"hljs-attr\">left</span>: constraints.<span class=\"hljs-property\">maxWidth</span> - iconSize,\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">call</span>, <span class=\"hljs-attr\">size</span>: iconSize),\n            ),\n          ],\n        ),\n    ),\n  );\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>확장된</h1>\n<p>확장된은 Flexbox 레이아웃과 함께 작동하며 여러 항목 간의 공간을 효율적으로 분배하는 데 좋습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_6.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span>(\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Expanded</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n        <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BoxDecoration</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>),\n      ),\n      <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">3</span>,\n    ),\n    <span class=\"hljs-title class_\">Expanded</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n        <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BoxDecoration</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">green</span>),\n      ),\n      <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">2</span>,\n    ),\n    <span class=\"hljs-title class_\">Expanded</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n        <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BoxDecoration</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>),\n      ),\n      <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    ),\n  ],\n),\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>ConstrainedBox</h1>\n<p>기본적으로 대부분의 위젯은 가능한 한 적은 공간을 사용합니다:</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_7.png\" alt=\"ConstrainedBox Example\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(<span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Hello World!'</span>), <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>ConstrainedBox 위젯을 사용하면 원하는 대로 남은 공간을 활용할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_8.png\" alt=\"ConstrainedBox Example\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ConstrainedBox</span>(\n  <span class=\"hljs-attr\">constraints</span>: <span class=\"hljs-title class_\">BoxConstraints</span>.<span class=\"hljs-title function_\">expand</span>(),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Card</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Hello World!'</span>),\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n  ),\n),\n</code></pre>\n<p>BoxConstraints를 사용하면 위젯이 차지할 수 있는 공간의 양을 지정할 수 있어요. 높이와 너비의 최소 및 최대 값을 지정해요.</p>\n<div class=\"content-ad\"></div>\n<p>다음은 BoxConstraints.expand을 사용할 때의 동작입니다:</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_9.png\" alt=\"image\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ConstrainedBox</span>(\n  <span class=\"hljs-attr\">constraints</span>: <span class=\"hljs-title class_\">BoxConstraints</span>.<span class=\"hljs-title function_\">expand</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">300</span>),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Card</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Hello World!'</span>),\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n  ),\n),\n</code></pre>\n<p>이것은 다음과 동일합니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ConstrainedBox</span>(\n  <span class=\"hljs-attr\">constraints</span>: <span class=\"hljs-title class_\">BoxConstraints</span>(\n    <span class=\"hljs-attr\">minWidth</span>: double.<span class=\"hljs-property\">infinity</span>,\n    <span class=\"hljs-attr\">maxWidth</span>: double.<span class=\"hljs-property\">infinity</span>,\n    <span class=\"hljs-attr\">minHeight</span>: <span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">maxHeight</span>: <span class=\"hljs-number\">300</span>,\n  ),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Card</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Hello World!'</span>),\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n  ),\n),\n</code></pre>\n<h1>Align</h1>\n<p>때때로 위젯을 적절한 크기로 설정하는 데 어려움을 겪을 때가 있습니다. 예를 들어, 원치 않는 스트레칭이 계속 발생하는 경우가 있습니다:</p>\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_10.png\">\n<div class=\"content-ad\"></div>\n<p>위와 같은 상황이 발생하는 예시는 Column에 CrossAxisAlignment.stretch를 가진 경우이며, 버튼만 늘어지지 않도록 원할 때 발생합니다:</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_11.png\" alt=\"image\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Align: without Align'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Column</span>(\n      <span class=\"hljs-attr\">crossAxisAlignment</span>: <span class=\"hljs-title class_\">CrossAxisAlignment</span>.<span class=\"hljs-property\">stretch</span>,\n      <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n        <span class=\"hljs-title class_\">Align</span>(\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">RaisedButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: () {},\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Button'</span>),\n          ),\n        ),\n      ],\n    ),\n  );\n}\n</code></pre>\n<p>위젯이 설정한 제약을 수용하지 않을 때는 첫 번째로 Align으로 감싸 보세요.</p>\n<div class=\"content-ad\"></div>\n<h1>컨테이너</h1>\n<p>가장 많이 사용되는 위젯 중 하나입니다! 그리고 그 이유가 있어요:</p>\n<h2>레이아웃 도구로서의 컨테이너</h2>\n<p>컨테이너의 높이와 너비를 지정하지 않으면, 자식 요소의 크기에 맞추게 됩니다</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_12.png\" alt=\"Flutter Layout Cheat Sheet\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Container as a layout'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>,\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Hi\"</span>),\n    ),\n  );\n}\n</code></pre>\n<p>If you want to stretch the Container to match its parent, use <code>double.infinity</code> for the <code>height</code> and <code>width</code> properties</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_13.png\" alt=\"Flutter Layout Cheat Sheet\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">위젯 <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n        <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Container를 레이아웃으로 사용하기'</span>)),\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Container</span>(\n            <span class=\"hljs-attr\">height</span>: double.<span class=\"hljs-property\">infinity</span>,\n            <span class=\"hljs-attr\">width</span>: double.<span class=\"hljs-property\">infinity</span>,\n            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>,\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"안녕하세요\"</span>),\n        ),\n    );\n}\n</code></pre>\n<h2>Decoration으로 Container 스타일링</h2>\n<p>Container의 배경에 영향을 주기 위해 color 속성을 사용할 수 있습니다. 그러나 decoration 및 foregroundDecoration을 사용할 수도 있습니다. (이 두 속성을 사용하면 Container의 전체적인 모양을 완전히 바꿀 수 있지만 이후에 다른 스타일에 대해 이야기할 것입니다. 그것은 꽤 큰 주제이기 때문에!)\ndecoration은 항상 자식 위에 배치되지만, foregroundDecoration은 자식 위에 배치됩니다.</p>\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_14.png\">\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">위젯 빌드(<span class=\"hljs-title class_\">BuildContext</span> context) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Container.decoration'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: double.<span class=\"hljs-property\">infinity</span>,\n      <span class=\"hljs-attr\">width</span>: double.<span class=\"hljs-property\">infinity</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>),\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"안녕하세요\"</span>),\n    ),\n  );\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_15.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\">위젯 빌드(<span class=\"hljs-title class_\">BuildContext</span> context) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Container.foregroundDecoration'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: double.<span class=\"hljs-property\">infinity</span>,\n      <span class=\"hljs-attr\">width</span>: double.<span class=\"hljs-property\">infinity</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>),\n      <span class=\"hljs-attr\">foregroundDecoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>.<span class=\"hljs-title function_\">withOpacity</span>(<span class=\"hljs-number\">0.5</span>),\n      ),\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"안녕하세요\"</span>),\n    ),\n  );\n}\n</code></pre>\n<h2>Transform으로서의 Container</h2>\n<div class=\"content-ad\"></div>\n<p>만약 레이아웃을 변경하기 위해 Transform 위젯을 사용하고 싶지 않다면, Container에서 직접 transform 속성을 사용할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_16.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Container.transform'</span>)),\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">300</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">300</span>,\n      <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title class_\">Matrix4</span>.<span class=\"hljs-title function_\">rotationZ</span>(pi / <span class=\"hljs-number\">4</span>),\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>),\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(\n        <span class=\"hljs-string\">\"안녕\"</span>,\n        <span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-title class_\">TextAlign</span>.<span class=\"hljs-property\">center</span>,\n      ),\n    ),\n  );\n}\n</code></pre>\n<h1>BoxDecoration</h1>\n<div class=\"content-ad\"></div>\n<p>일반적으로 장식은 컨테이너 위젯에 사용되어 컨테이너가 어떻게 보이는지를 변경합니다.</p>\n<h3>이미지: DecorationImage</h3>\n<p>배경으로 이미지를 넣습니다:</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_17.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'image: DecorationImage'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n        <span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">DecorationImage</span>(\n          <span class=\"hljs-attr\">fit</span>: <span class=\"hljs-title class_\">BoxFit</span>.<span class=\"hljs-property\">fitWidth</span>,\n          <span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">NetworkImage</span>(\n            <span class=\"hljs-string\">'https://flutter.io/images/catalog-widget-placeholder.png'</span>,\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<h2>border: Border</h2>\n<p>Container의 테두리가 어떻게 보일지를 지정합니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_18.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'border: Border'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n        <span class=\"hljs-attr\">border</span>: <span class=\"hljs-title class_\">Border</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">black</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">3</span>),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<h2>borderRadius: BorderRadius</h2>\n<p>모서리를 둥글게 만듭니다.</p>\n<p>decoration의 모양이 BoxShape.circle인 경우 borderRadius는 작동하지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'borderRadius: BorderRadius'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n        <span class=\"hljs-attr\">border</span>: <span class=\"hljs-title class_\">Border</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">black</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">3</span>),\n        <span class=\"hljs-attr\">borderRadius</span>: <span class=\"hljs-title class_\">BorderRadius</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-title class_\">Radius</span>.<span class=\"hljs-title function_\">circular</span>(<span class=\"hljs-number\">18</span>)),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<h2>shape: BoxShape</h2>\n<p>박스의 장식은 사각형/정사각형 또는 타원/원이 될 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>다른 모양을 사용하려면 BoxDecoration 대신 ShapeDecoration을 사용할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_20.png\" alt=\"ShapeDecoration\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'shape: BoxShape'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">ShapeDecoration</span>(\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n        <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-title class_\">BoxShape</span>.<span class=\"hljs-property\">circle</span>,\n      ),\n    ),\n  ),\n);\n</code></pre>\n<h2>boxShadow: List<code>BoxShadow</code></h2>\n<div class=\"content-ad\"></div>\n<p>아래는 Container에 그림자를 추가한 코드입니다.</p>\n<p>이 매개변수는 여러 가지 그림자를 지정하고 병합할 수 있으므로 목록 형태로 제공됩니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_21.png\" alt=\"그림자 추가\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'boxShadow: List&#x3C;BoxShadow>'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n        <span class=\"hljs-attr\">boxShadow</span>: <span class=\"hljs-keyword\">const</span> [\n          <span class=\"hljs-title class_\">BoxShadow</span>(<span class=\"hljs-attr\">blurRadius</span>: <span class=\"hljs-number\">10</span>),\n        ],\n      ),\n    ),\n  ),\n);\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>그라데이션</h2>\n<p>그라데이션에는 선형 그라데이션(LinearGradient), 원형 그라데이션(RadialGradient) 및 스윕 그라데이션(SweepGradient) 세 가지 유형이 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_22.png\" alt=\"Gradient\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'gradient: LinearGradient'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">gradient</span>: <span class=\"hljs-title class_\">LinearGradient</span>(\n          <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-keyword\">const</span> [\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>,\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n          ],\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_23.png\" alt=\"Flutter Layout Cheat Sheet 23\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'gradient: RadialGradient'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">gradient</span>: <span class=\"hljs-title class_\">RadialGradient</span>(\n          <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-keyword\">const</span> [<span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>, <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>],\n          <span class=\"hljs-attr\">stops</span>: <span class=\"hljs-keyword\">const</span> [<span class=\"hljs-number\">0.4</span>, <span class=\"hljs-number\">1.0</span>],\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_24.png\" alt=\"Flutter Layout Cheat Sheet 24\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'gradient: SweepGradient'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">gradient</span>: <span class=\"hljs-title class_\">SweepGradient</span>(\n          <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-keyword\">const</span> [\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">green</span>,\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>,\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n          ],\n          <span class=\"hljs-attr\">stops</span>: <span class=\"hljs-keyword\">const</span> [<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.25</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.75</span>, <span class=\"hljs-number\">1.0</span>],\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>backgroundBlendMode</h2>\n<p><code>backgroundBlendMode</code>은 BoxDecoration의 가장 복잡한 속성입니다.\n이 속성은 BoxDecoration의 색상/그라데이션을 섞고, BoxDecoration이 위에 있는 것과 혼합하는 역할을 합니다.</p>\n<p><code>backgroundBlendMode</code>를 사용하면 <code>BlendMode</code> 열거형에서 지정된 다양한 알고리즘을 사용할 수 있습니다.</p>\n<p>먼저, <code>backgroundBlendMode</code>를 사용하여 Container의 자식 위에 그려지는 <code>foregroundDecoration</code>을 BoxDecoration으로 설정해 봅시다. (반면 decoration은 자식 뒤에 그려집니다)</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'backgroundBlendMode'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      <span class=\"hljs-attr\">foregroundDecoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">backgroundBlendMode</span>: <span class=\"hljs-title class_\">BlendMode</span>.<span class=\"hljs-property\">exclusion</span>,\n        <span class=\"hljs-attr\">gradient</span>: <span class=\"hljs-title class_\">LinearGradient</span>(\n          <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-keyword\">const</span> [\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>,\n            <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n          ],\n        ),\n      ),\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Image</span>.<span class=\"hljs-title function_\">network</span>(\n        <span class=\"hljs-string\">'https://flutter.io/images/catalog-widget-placeholder.png'</span>,\n      ),\n    ),\n  ),\n);\n</code></pre>\n<p><code>backgroundBlendMode</code>은 해당 Container에만 영향을 미치는 것이 아닙니다.</p>\n<p><code>backgroundBlendMode</code>은 Container에서 상위 위젯 트리에 올라가 있는 모든 색상을 변경합니다.\n아래 코드는 이미지를 그리는 부모 Container와 <code>backgroundBlendMode</code>를 사용하는 자식 Container가 있지만, 이전과 동일한 효과를 얻을 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'backgroundBlendMode'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n        <span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">DecorationImage</span>(\n          <span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">NetworkImage</span>(\n            <span class=\"hljs-string\">'https://flutter.io/images/catalog-widget-placeholder.png'</span>,\n          ),\n        ),\n      ),\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n        <span class=\"hljs-attr\">foregroundDecoration</span>: <span class=\"hljs-title class_\">BoxDecoration</span>(\n          <span class=\"hljs-attr\">backgroundBlendMode</span>: <span class=\"hljs-title class_\">BlendMode</span>.<span class=\"hljs-property\">exclusion</span>,\n          <span class=\"hljs-attr\">gradient</span>: <span class=\"hljs-title class_\">LinearGradient</span>(\n            <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-keyword\">const</span> [\n              <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>,\n              <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n            ],\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n</code></pre>\n<h1>Material</h1>\n<p>Border with cut corners</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_27.png\">\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'shape: BeveledRectangleBorder'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Material</span>(\n      <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BeveledRectangleBorder</span>(\n        <span class=\"hljs-attr\">borderRadius</span>: <span class=\"hljs-title class_\">BorderRadius</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-title class_\">Radius</span>.<span class=\"hljs-title function_\">circular</span>(<span class=\"hljs-number\">20</span>)),\n        <span class=\"hljs-attr\">side</span>: <span class=\"hljs-title class_\">BorderSide</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">black</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">4</span>),\n      ),\n      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellow</span>,\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n      ),\n    ),\n  ),\n);\n</code></pre>\n<h1>Slivers</h1>\n<h1>SliverFillRemaining</h1>\n<div class=\"content-ad\"></div>\n<p>이 위젯은 콘텐츠를 중앙 정렬하고 싶을 때 공간이 충분하지 않은 경우에 교체할 수 없습니다. 대화형 예제 있어요!</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_28.png\" alt=\"FlutterLayoutCheatSheet_28\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'SliverFillRemaining'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">CustomScrollView</span>(\n    <span class=\"hljs-attr\">slivers</span>: [\n      <span class=\"hljs-title class_\">SliverFillRemaining</span>(\n        <span class=\"hljs-attr\">hasScrollBody</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n          <span class=\"hljs-attr\">children</span>: <span class=\"hljs-keyword\">const</span> [\n            <span class=\"hljs-title class_\">FlutterLogo</span>(<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">200</span>),\n            <span class=\"hljs-title class_\">Text</span>(\n              <span class=\"hljs-string\">'로고와 함께 중앙 정렬되어야 하는 가장 긴 텍스트입니다'</span>,\n              <span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-title class_\">TextAlign</span>.<span class=\"hljs-property\">center</span>,\n            ),\n          ],\n        ),\n      ),\n    ],\n  ),\n);\n</code></pre>\n<p>중앙 정렬된 콘텐츠에 공간이 충분하지 않은 경우 SliverFillRemaining이 스크롤 가능해집니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_29.png\" alt=\"이미지\"></p>\n<p>만약 SliverFillRemaining이 없었다면 컨텐츠가 이렇게 오버플로될 것입니다:</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_30.png\" alt=\"이미지\"></p>\n<h2>남은 공간 채우기</h2>\n<div class=\"content-ad\"></div>\n<p>내용을 가운데 정렬하는 데 유용한 SliverFillRemaining은 뷰포트의 여유 공간을 채웁니다. 이 위젯을 사용하려면 CustomScrollView에 배치되어야하며 마지막 슬리버여야합니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_31.png\" alt=\"이미지\"></p>\n<p>공간이 충분하지 않은 경우 위젯은 스크롤 가능해집니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_32.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Scaffold</span>(\n  <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'SliverFillRemaining'</span>)),\n  <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">CustomScrollView</span>(\n    <span class=\"hljs-attr\">slivers</span>: [\n      <span class=\"hljs-title class_\">SliverList</span>(\n        <span class=\"hljs-attr\">delegate</span>: <span class=\"hljs-title class_\">SliverChildListDelegate</span>(<span class=\"hljs-keyword\">const</span> [\n          <span class=\"hljs-title class_\">ListTile</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'First item'</span>)),\n          <span class=\"hljs-title class_\">ListTile</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Second item'</span>)),\n          <span class=\"hljs-title class_\">ListTile</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Third item'</span>)),\n          <span class=\"hljs-title class_\">ListTile</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Fourth item'</span>)),\n        ]),\n      ),\n      <span class=\"hljs-title class_\">SliverFillRemaining</span>(\n        <span class=\"hljs-attr\">hasScrollBody</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n          <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>,\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n            <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n            <span class=\"hljs-attr\">children</span>: <span class=\"hljs-keyword\">const</span> [\n              <span class=\"hljs-title class_\">FlutterLogo</span>(<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">200</span>),\n              <span class=\"hljs-title class_\">Text</span>(\n                <span class=\"hljs-string\">'This is some longest text that should be centered'</span>\n                <span class=\"hljs-string\">'together with the logo'</span>,\n                <span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-title class_\">TextAlign</span>.<span class=\"hljs-property\">center</span>,\n              ),\n            ],\n          ),\n        ),\n      ),\n    ],\n  ),\n);\n</code></pre>\n<h2>SizedBox</h2>\n<p>가장 간단하지만 가장 유용한 위젯 중 하나입니다</p>\n<h3>ConstrainedBox로서의 SizedBox</h3>\n<div class=\"content-ad\"></div>\n<p>SizedBox는 ConstrainedBox와 비슷한 방식으로 작동할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_33.png\" alt=\"image\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">SizedBox</span>.<span class=\"hljs-title function_\">expand</span>(\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Card</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Hello World!'</span>),\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>,\n  ),\n),\n</code></pre>\n<h2>SizedBox를 패딩으로 사용하기</h2>\n<div class=\"content-ad\"></div>\n<p>여백이나 여백을 추가해야 할 때는 Padding 또는 Container 위젯을 선택할 수 있습니다. 그러나 이러한 방식은 Sizedbox를 추가하는 것보다 더 길고 가독성이 떨어질 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-FlutterLayoutCheatSheet_34.png\" alt=\"FlutterLayoutCheatSheet_34\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Column</span>(\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n    <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">50</span>),\n  ],\n),\n</code></pre>\n<h2>SizedBox를 사용한 보이지 않는 객체</h2>\n<div class=\"content-ad\"></div>\n<p>많은 시간에 따라 위젯을 숨기거나 표시하고 싶을 때가 많습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  bool isVisible = ...\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n    <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'isVisible = $isVisible'</span>),\n    ),\n    <span class=\"hljs-attr\">body</span>: isVisible\n      ? <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">star</span>, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">150</span>)\n      : <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizedBox</span>(),\n  );\n}\n</code></pre>\n<p>SizedBox에는 const 생성자가 있으므로 const SizedBox()를 사용하는 것이 정말 저렴합니다**.</p>\n<p>**보다 저렴한 해결책은 Opacity 위젯을 사용하고 투명도 값을 0.0으로 변경하는 것입니다. 이 해결책의 단점은 주어진 위젯이 보이지 않을 뿐 아직 공간을 차지할 것이라는 점입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>SafeArea</h1>\n<p>다양한 플랫폼에서 안드로이드의 상태 바(Status Bar)나 아이폰 X의 노치(Notch)와 같은 특별한 영역이 있습니다.</p>\n<p>이러한 영역 아래에는 그리기를 피할 필요가 있습니다.</p>\n<p>이 문제의 해결책은 SafeArea 위젯입니다 (SafeArea를 사용한 예시).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Material</span>(\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">SafeArea</span>(\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">SizedBox</span>.<span class=\"hljs-title function_\">expand</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Card</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">yellowAccent</span>),\n      ),\n    ),\n  );\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>중요한 질문이 있으시면 놓치지 않으려면 트위터에서 저에게 개인 메시지를 보내주세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}