{"pageProps":{"post":{"title":"Flutter에서 위젯 크기를 동적으로 측정하는 방법","description":"","date":"2024-06-21 20:09","slug":"2024-06-21-HowtoDynamicallyMeasureWidgetSizeinFlutter","content":"\n\n<img src=\"/assets/img/2024-06-21-HowtoDynamicallyMeasureWidgetSizeinFlutter_0.png\" />\n\n플러터 개발에서 흔한 도전 과제 중 하나는 위젯이 렌더링된 후에 해당 위젯의 동적 크기를 결정하는 것입니다. 이는 다양한 레이아웃 조정 및 애니메이션에 중요할 수 있습니다. 이 포스트에서는 사용자 지정 위젯을 사용하여 위젯의 크기를 측정하는 간단하고 효율적인 방법을 보여 드리겠습니다.\n\n# SizeMeasureWidget\n\n해결책의 핵심은 모든 위젯을 감싸고 렌더링된 후에 크기를 제공하는 사용자 지정 SizeMeasureWidget입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport 'package:flutter/material.dart';\n\nclass SizeMeasureWidget extends StatefulWidget {\n  final Widget child;\n  final ValueChanged<Size> onSizeMeasured;\n\n  const SizeMeasureWidget({\n    Key? key,\n    required this.onSizeMeasured,\n    required this.child,\n  }) : super(key: key);\n\n  @override\n  _SizeMeasureWidgetState createState() => _SizeMeasureWidgetState();\n}\n\nclass _SizeMeasureWidgetState extends State<SizeMeasureWidget> {\n  final GlobalKey _sizeKey = GlobalKey();\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      key: _sizeKey,\n      child: widget.child,\n    );\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      _getSize();\n    });\n  }\n\n  void _getSize() {\n    RenderBox renderBox = _sizeKey.currentContext!.findRenderObject() as RenderBox;\n    Size size = renderBox.size;\n    widget.onSizeMeasured(size);\n  }\n}\n```\n\n## 작동 방식\n\n- Stateful Widget: SizeMeasureWidget은 자식 위젯과 onSizeMeasured 콜백 함수를 가져오는 상태를 가진 위젯입니다.\n- GlobalKey: 위젯을 고유하게 식별하고 해당 컨텍스트를 얻기 위해 GlobalKey를 사용합니다.\n- Post Frame Callback: initState에서 WidgetsBinding.instance.addPostFrameCallback를 사용하여 위젯 트리가 레이아웃 된 후에 코드를 실행할 콜백을 등록합니다.\n- RenderBox: GlobalKey를 사용하여 위젯의 RenderBox를 가져와서 해당 크기를 가져옵니다.\n- Callback: 마지막으로 위젯의 크기와 함께 onSizeMeasured 콜백을 호출합니다.\n\n# SizeMeasureWidget 사용 방법  \n\n<div class=\"content-ad\"></div>\n\n여기는 귀하의 응용 프로그램에서 SizeMeasureWidget을 사용하는 방법입니다:\n\n```js\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Dynamic Size Measurement')),\n        body: Center(\n          child: SizeMeasureWidget(\n            onSizeMeasured: (size) {\n              print(\"Widget size: $size\");\n            },\n            child: Container(\n              color: Colors.blue,\n              height: 200,\n              width: 200,\n              child: Center(child: Text('Measure my size!')),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n# 설명\n\n이 예제에서:\n\n<div class=\"content-ad\"></div>\n\n- SizeMeasureWidget 안에 Container를 감쌉니다.\n- onSizeMeasured 콜백은 Container의 크기를 콘솔에 출력합니다.\n\n# 장점\n\n- 다이나믹한 레이아웃 조정: 위젯의 크기에 따라 레이아웃을 동적으로 조정할 수 있습니다.\n- 애니메이션: 요소의 크기를 알고 있을 때 더 복잡한 애니메이션을 만들 수 있습니다.\n- 반응형 디자인: 더 반응형이고 적응형인 UI를 구축할 수 있습니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\nSizeMeasureWidget을 사용하면 Flutter에서 어떤 위젯의 동적 크기를 측정하고 반응하는 것이 쉽습니다. 이 기술은 유연하고 반응적인 레이아웃을 만드는 데 귀중합니다. 여러분의 프로젝트에서 시도해보고 레이아웃 로직을 얼마나 간단하게 만드는지 확인해보세요!","ogImage":{"url":"/assets/img/2024-06-21-HowtoDynamicallyMeasureWidgetSizeinFlutter_0.png"},"coverImage":"/assets/img/2024-06-21-HowtoDynamicallyMeasureWidgetSizeinFlutter_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-21-HowtoDynamicallyMeasureWidgetSizeinFlutter_0.png\">\n<p>플러터 개발에서 흔한 도전 과제 중 하나는 위젯이 렌더링된 후에 해당 위젯의 동적 크기를 결정하는 것입니다. 이는 다양한 레이아웃 조정 및 애니메이션에 중요할 수 있습니다. 이 포스트에서는 사용자 지정 위젯을 사용하여 위젯의 크기를 측정하는 간단하고 효율적인 방법을 보여 드리겠습니다.</p>\n<h1>SizeMeasureWidget</h1>\n<p>해결책의 핵심은 모든 위젯을 감싸고 렌더링된 후에 크기를 제공하는 사용자 지정 SizeMeasureWidget입니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SizeMeasureWidget</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  final <span class=\"hljs-title class_\">Widget</span> child;\n  final <span class=\"hljs-title class_\">ValueChanged</span>&#x3C;<span class=\"hljs-title class_\">Size</span>> onSizeMeasured;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizeMeasureWidget</span>({\n    <span class=\"hljs-title class_\">Key</span>? key,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onSizeMeasured</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">child</span>,\n  }) : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-attr\">key</span>: key);\n\n  @override\n  _SizeMeasureWidgetState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_SizeMeasureWidgetState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_SizeMeasureWidgetState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">SizeMeasureWidget</span>> {\n  final <span class=\"hljs-title class_\">GlobalKey</span> _sizeKey = <span class=\"hljs-title class_\">GlobalKey</span>();\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Container</span>(\n      <span class=\"hljs-attr\">key</span>: _sizeKey,\n      <span class=\"hljs-attr\">child</span>: widget.<span class=\"hljs-property\">child</span>,\n    );\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n    <span class=\"hljs-title class_\">WidgetsBinding</span>.<span class=\"hljs-property\">instance</span>.<span class=\"hljs-title function_\">addPostFrameCallback</span>((_) {\n      <span class=\"hljs-title function_\">_getSize</span>();\n    });\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_getSize</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title class_\">RenderBox</span> renderBox = _sizeKey.<span class=\"hljs-property\">currentContext</span>!.<span class=\"hljs-title function_\">findRenderObject</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">RenderBox</span>;\n    <span class=\"hljs-title class_\">Size</span> size = renderBox.<span class=\"hljs-property\">size</span>;\n    widget.<span class=\"hljs-title function_\">onSizeMeasured</span>(size);\n  }\n}\n</code></pre>\n<h2>작동 방식</h2>\n<ul>\n<li>Stateful Widget: SizeMeasureWidget은 자식 위젯과 onSizeMeasured 콜백 함수를 가져오는 상태를 가진 위젯입니다.</li>\n<li>GlobalKey: 위젯을 고유하게 식별하고 해당 컨텍스트를 얻기 위해 GlobalKey를 사용합니다.</li>\n<li>Post Frame Callback: initState에서 WidgetsBinding.instance.addPostFrameCallback를 사용하여 위젯 트리가 레이아웃 된 후에 코드를 실행할 콜백을 등록합니다.</li>\n<li>RenderBox: GlobalKey를 사용하여 위젯의 RenderBox를 가져와서 해당 크기를 가져옵니다.</li>\n<li>Callback: 마지막으로 위젯의 크기와 함께 onSizeMeasured 콜백을 호출합니다.</li>\n</ul>\n<h1>SizeMeasureWidget 사용 방법</h1>\n<div class=\"content-ad\"></div>\n<p>여기는 귀하의 응용 프로그램에서 SizeMeasureWidget을 사용하는 방법입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-title class_\">MyApp</span>());\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>(\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n        <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Dynamic Size Measurement'</span>)),\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">SizeMeasureWidget</span>(\n            <span class=\"hljs-attr\">onSizeMeasured</span>: (size) {\n              <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Widget size: $size\"</span>);\n            },\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n              <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n              <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>,\n              <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>,\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Center</span>(<span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Measure my size!'</span>)),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h1>설명</h1>\n<p>이 예제에서:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>SizeMeasureWidget 안에 Container를 감쌉니다.</li>\n<li>onSizeMeasured 콜백은 Container의 크기를 콘솔에 출력합니다.</li>\n</ul>\n<h1>장점</h1>\n<ul>\n<li>다이나믹한 레이아웃 조정: 위젯의 크기에 따라 레이아웃을 동적으로 조정할 수 있습니다.</li>\n<li>애니메이션: 요소의 크기를 알고 있을 때 더 복잡한 애니메이션을 만들 수 있습니다.</li>\n<li>반응형 디자인: 더 반응형이고 적응형인 UI를 구축할 수 있습니다.</li>\n</ul>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>SizeMeasureWidget을 사용하면 Flutter에서 어떤 위젯의 동적 크기를 측정하고 반응하는 것이 쉽습니다. 이 기술은 유연하고 반응적인 레이아웃을 만드는 데 귀중합니다. 여러분의 프로젝트에서 시도해보고 레이아웃 로직을 얼마나 간단하게 만드는지 확인해보세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}