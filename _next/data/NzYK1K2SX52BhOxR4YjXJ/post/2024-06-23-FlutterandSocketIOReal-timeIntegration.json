{"pageProps":{"post":{"title":"Flutter와 SocketIO 실시간 통합 방법","description":"","date":"2024-06-23 14:53","slug":"2024-06-23-FlutterandSocketIOReal-timeIntegration","content":"\n![Socket.IO package for Flutter](/assets/img/2024-06-23-FlutterandSocketIOReal-timeIntegration_0.png)\n\n## Socket.IO는 무엇인가요?\n\nSocket.IO는 실시간 이중방향 및 이벤트 주도 통신을 가능하게 하는 JavaScript 라이브러리입니다. 모든 플랫폼, 브라우저 또는 디바이스에서 작동하여 클라이언트와 서버 간의 원활한 연결을 보장합니다. Socket.IO는 WebSocket 프로토콜을 기반으로 작동하지만 다시 연결 지원, 멀티플렉싱 및 채널 지원과 같은 추가 기능을 제공합니다. 이는 즉각적인 데이터 업데이트 및 동적 상호작용이 필요한 애플리케이션에 이상적인 선택이 됩니다.\n\n<div class=\"content-ad\"></div>\n\nSocket.IO를 Flutter와 통합하기 위해서는, 개발자들이 socket_io_client 패키지를 활용합니다. 이 패키지는 Socket.IO 클라이언트의 Dart 구현을 제공하여 Flutter 애플리케이션이 Socket.IO 서버와 원활하게 연결할 수 있도록 합니다.\n\n# Flutter 프로젝트 설정하기:\n\n- 의존성 추가: pubspec.yaml 파일을 열고 다음 종속성을 추가하세요:\n\n```yaml\ndependencies:\n  socket_io_client: ^2.0.3+1\n```\n\n<div class=\"content-ad\"></div>\n\n# 로컬호스트에 연결하기:\n\n- 로컬에서 Socket.IO 서버가 실행 중인지 확인하세요.\n- `socketUrl` 함수는 에뮬레이터(IOS 또는 Android)에 적합한 로컬호스트 URL을 반환합니다.\n\n```js\nString socketUrl() {\n  if (Platform.isAndroid) {\n    return \"http://10.0.2.2:3000\";  // 안드로이드 에뮬레이터의 기본 IP 주소\n  } else {\n    return \"http://localhost:3000\"; // iOS 시뮬레이터용\n  }\n}\n```\n\n# 온라인 서버에 연결하기:\n\n<div class=\"content-ad\"></div>\n\n온라인 Socket.IO 서버에 연결하려면:\n\n- Socket.IO 서버를 온라인으로 배포하거나 기존 서버를 사용합니다.\n- socketUrl 함수를 업데이트하여 온라인 서버 URL을 반환하세요.\n\n```js\nString socketUrl() {\n  return \"https://your-online-server-url.com\";\n}\n```\n\n사용자가 HomeScreen을 열자마자 소켓 서버에 연결을 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n@override\nvoid initState() {\n  super.initState();\n\n  // 소켓 서버에 연결\n  socket = IO.io(socketUrl(), <String, dynamic>{\n    'transports': ['websocket'],\n  });\n\n  // 'connect' 이벤트에 대한 이벤트 리스너\n  socket.on('connect', (_) {\n    print('서버에 연결되었습니다');\n  });\n\n  // 서버로부터 메시지 수신\n  socket.on('message', (data) {\n    _streamController.add(data);\n  });\n}\n```\n\n## 메시지 전송:\n\n```js\nvoid sendMessage(String message) {\n  socket.emit('sendMessage', message);\n}\n```\n\nsendMessage 메서드는 제공된 메시지와 함께 `sendMessage` 이벤트를 서버로 전송합니다.\n\n<div class=\"content-ad\"></div>\n\n## 정리 작업 시 Dispose:\n\n```js\n@override\nvoid dispose() {\n  socket.disconnect();\n  _streamController.close();\n  super.dispose();\n}\n```\n\n- dispose()은 위젯이 제거될 때 호출되며, 소켓을 연결 해제하고 스트림을 닫습니다.\n\n# 출력:\n\n<div class=\"content-ad\"></div>\n\n![Socket.IO Flutter Demo](https://miro.medium.com/v2/resize:fit:1200/1*fdjqKbSJXfSqS_13uHvy9g.gif)\n\n# 전체 코드:\n\n```js\nimport 'dart:async';\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:socket_io_client/socket_io_client.dart' as IO;\n\nclass HomeScreen extends StatefulWidget {\n  const HomeScreen({Key? key});\n\n  @override\n  HomeScreenState createState() => HomeScreenState();\n}\n\nclass HomeScreenState extends State<HomeScreen> {\n  late IO.Socket socket;\n  final StreamController<String> _streamController = StreamController<String>();\n  Stream<String> get messagesStream => _streamController.stream;\n\n  TextEditingController controller = TextEditingController();\n\n  //This will give platofrm specific url for ios and android emulator\n  String socketUrl() {\n    if (Platform.isAndroid) {\n      return \"http://10.0.2.2:3000\";\n    } else {\n      return \"http://localhost:3000\";\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    // Connect to the Socket.IO server\n    socket = IO.io(socketUrl(), <String, dynamic>{\n      'transports': ['websocket'],\n    });\n\n    socket.on('connect', (_) {\n      print('Connected to server');\n    });\n\n    // Listen for messages from the server\n    socket.on('message', (data) {\n      _streamController.add(data);\n    });\n  }\n\n  @override\n  void dispose() {\n    // Disconnect from the Socket.IO server when the app is disposed\n    socket.disconnect();\n\n    //close stream\n    _streamController.close();\n    super.dispose();\n  }\n\n  void sendMessage(String message) {\n    // Send a message to the server\n    socket.emit('sendMessage', message);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Socket.IO Flutter Demo'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 40),\n              child: TextFormField(\n                onChanged: (value) {\n                  if (socket.connected) {\n                    sendMessage(value);\n                  }\n                },\n                controller: controller,\n                decoration: const InputDecoration(hintText: \"Enter Message\"),\n              ),\n            ),\n            const SizedBox(height: 40),\n            StreamBuilder<String>(\n              stream: messagesStream,\n              builder: (context, snapshot) {\n                if (snapshot.hasError) {\n                  return Text('Error: ${snapshot.error}');\n                }\n                return Padding(\n                  padding: const EdgeInsets.symmetric(horizontal: 25),\n                  child: ListTile(\n                    title: Text(\"Received Message: ${snapshot.data ?? \"\"}\"),\n                  ),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n","ogImage":{"url":"/assets/img/2024-06-23-FlutterandSocketIOReal-timeIntegration_0.png"},"coverImage":"/assets/img/2024-06-23-FlutterandSocketIOReal-timeIntegration_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-FlutterandSocketIOReal-timeIntegration_0.png\" alt=\"Socket.IO package for Flutter\"></p>\n<h2>Socket.IO는 무엇인가요?</h2>\n<p>Socket.IO는 실시간 이중방향 및 이벤트 주도 통신을 가능하게 하는 JavaScript 라이브러리입니다. 모든 플랫폼, 브라우저 또는 디바이스에서 작동하여 클라이언트와 서버 간의 원활한 연결을 보장합니다. Socket.IO는 WebSocket 프로토콜을 기반으로 작동하지만 다시 연결 지원, 멀티플렉싱 및 채널 지원과 같은 추가 기능을 제공합니다. 이는 즉각적인 데이터 업데이트 및 동적 상호작용이 필요한 애플리케이션에 이상적인 선택이 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>Socket.IO를 Flutter와 통합하기 위해서는, 개발자들이 socket_io_client 패키지를 활용합니다. 이 패키지는 Socket.IO 클라이언트의 Dart 구현을 제공하여 Flutter 애플리케이션이 Socket.IO 서버와 원활하게 연결할 수 있도록 합니다.</p>\n<h1>Flutter 프로젝트 설정하기:</h1>\n<ul>\n<li>의존성 추가: pubspec.yaml 파일을 열고 다음 종속성을 추가하세요:</li>\n</ul>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">socket_io_client:</span> <span class=\"hljs-string\">^2.0.3+1</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>로컬호스트에 연결하기:</h1>\n<ul>\n<li>로컬에서 Socket.IO 서버가 실행 중인지 확인하세요.</li>\n<li><code>socketUrl</code> 함수는 에뮬레이터(IOS 또는 Android)에 적합한 로컬호스트 URL을 반환합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">socketUrl</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Platform</span>.<span class=\"hljs-property\">isAndroid</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"http://10.0.2.2:3000\"</span>;  <span class=\"hljs-comment\">// 안드로이드 에뮬레이터의 기본 IP 주소</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"http://localhost:3000\"</span>; <span class=\"hljs-comment\">// iOS 시뮬레이터용</span>\n  }\n}\n</code></pre>\n<h1>온라인 서버에 연결하기:</h1>\n<div class=\"content-ad\"></div>\n<p>온라인 Socket.IO 서버에 연결하려면:</p>\n<ul>\n<li>Socket.IO 서버를 온라인으로 배포하거나 기존 서버를 사용합니다.</li>\n<li>socketUrl 함수를 업데이트하여 온라인 서버 URL을 반환하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">socketUrl</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"https://your-online-server-url.com\"</span>;\n}\n</code></pre>\n<p>사용자가 HomeScreen을 열자마자 소켓 서버에 연결을 설정하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">@override\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n\n  <span class=\"hljs-comment\">// 소켓 서버에 연결</span>\n  socket = <span class=\"hljs-variable constant_\">IO</span>.<span class=\"hljs-title function_\">io</span>(<span class=\"hljs-title function_\">socketUrl</span>(), &#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>{\n    <span class=\"hljs-string\">'transports'</span>: [<span class=\"hljs-string\">'websocket'</span>],\n  });\n\n  <span class=\"hljs-comment\">// 'connect' 이벤트에 대한 이벤트 리스너</span>\n  socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'connect'</span>, (_) {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'서버에 연결되었습니다'</span>);\n  });\n\n  <span class=\"hljs-comment\">// 서버로부터 메시지 수신</span>\n  socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'message'</span>, (data) {\n    _streamController.<span class=\"hljs-title function_\">add</span>(data);\n  });\n}\n</code></pre>\n<h2>메시지 전송:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> message</span>) {\n  socket.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'sendMessage'</span>, message);\n}\n</code></pre>\n<p>sendMessage 메서드는 제공된 메시지와 함께 <code>sendMessage</code> 이벤트를 서버로 전송합니다.</p>\n<div class=\"content-ad\"></div>\n<h2>정리 작업 시 Dispose:</h2>\n<pre><code class=\"hljs language-js\">@override\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-params\"></span>) {\n  socket.<span class=\"hljs-title function_\">disconnect</span>();\n  _streamController.<span class=\"hljs-title function_\">close</span>();\n  <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">dispose</span>();\n}\n</code></pre>\n<ul>\n<li>dispose()은 위젯이 제거될 때 호출되며, 소켓을 연결 해제하고 스트림을 닫습니다.</li>\n</ul>\n<h1>출력:</h1>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*fdjqKbSJXfSqS_13uHvy9g.gif\" alt=\"Socket.IO Flutter Demo\"></p>\n<h1>전체 코드:</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:async'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:io'</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:socket_io_client/socket_io_client.dart'</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable constant_\">IO</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HomeScreen</span>({<span class=\"hljs-title class_\">Key</span>? key});\n\n  @override\n  <span class=\"hljs-title class_\">HomeScreenState</span> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title class_\">HomeScreenState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeScreenState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">HomeScreen</span>> {\n  late <span class=\"hljs-variable constant_\">IO</span>.<span class=\"hljs-property\">Socket</span> socket;\n  final <span class=\"hljs-title class_\">StreamController</span>&#x3C;<span class=\"hljs-title class_\">String</span>> _streamController = <span class=\"hljs-title class_\">StreamController</span>&#x3C;<span class=\"hljs-title class_\">String</span>>();\n  <span class=\"hljs-title class_\">Stream</span>&#x3C;<span class=\"hljs-title class_\">String</span>> get messagesStream => _streamController.<span class=\"hljs-property\">stream</span>;\n\n  <span class=\"hljs-title class_\">TextEditingController</span> controller = <span class=\"hljs-title class_\">TextEditingController</span>();\n\n  <span class=\"hljs-comment\">//This will give platofrm specific url for ios and android emulator</span>\n  <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">socketUrl</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Platform</span>.<span class=\"hljs-property\">isAndroid</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"http://10.0.2.2:3000\"</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"http://localhost:3000\"</span>;\n    }\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">initState</span>();\n    <span class=\"hljs-comment\">// Connect to the Socket.IO server</span>\n    socket = <span class=\"hljs-variable constant_\">IO</span>.<span class=\"hljs-title function_\">io</span>(<span class=\"hljs-title function_\">socketUrl</span>(), &#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>{\n      <span class=\"hljs-string\">'transports'</span>: [<span class=\"hljs-string\">'websocket'</span>],\n    });\n\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'connect'</span>, (_) {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Connected to server'</span>);\n    });\n\n    <span class=\"hljs-comment\">// Listen for messages from the server</span>\n    socket.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'message'</span>, (data) {\n      _streamController.<span class=\"hljs-title function_\">add</span>(data);\n    });\n  }\n\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dispose</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Disconnect from the Socket.IO server when the app is disposed</span>\n    socket.<span class=\"hljs-title function_\">disconnect</span>();\n\n    <span class=\"hljs-comment\">//close stream</span>\n    _streamController.<span class=\"hljs-title function_\">close</span>();\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">dispose</span>();\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> message</span>) {\n    <span class=\"hljs-comment\">// Send a message to the server</span>\n    socket.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">'sendMessage'</span>, message);\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Socket.IO Flutter Demo'</span>),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-title class_\">Padding</span>(\n              <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">symmetric</span>(<span class=\"hljs-attr\">horizontal</span>: <span class=\"hljs-number\">40</span>),\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">TextFormField</span>(\n                <span class=\"hljs-attr\">onChanged</span>: (value) {\n                  <span class=\"hljs-keyword\">if</span> (socket.<span class=\"hljs-property\">connected</span>) {\n                    <span class=\"hljs-title function_\">sendMessage</span>(value);\n                  }\n                },\n                <span class=\"hljs-attr\">controller</span>: controller,\n                <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">InputDecoration</span>(<span class=\"hljs-attr\">hintText</span>: <span class=\"hljs-string\">\"Enter Message\"</span>),\n              ),\n            ),\n            <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">40</span>),\n            <span class=\"hljs-title class_\">StreamBuilder</span>&#x3C;<span class=\"hljs-title class_\">String</span>>(\n              <span class=\"hljs-attr\">stream</span>: messagesStream,\n              <span class=\"hljs-attr\">builder</span>: (context, snapshot) {\n                <span class=\"hljs-keyword\">if</span> (snapshot.<span class=\"hljs-property\">hasError</span>) {\n                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Error: ${snapshot.error}'</span>);\n                }\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Padding</span>(\n                  <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">symmetric</span>(<span class=\"hljs-attr\">horizontal</span>: <span class=\"hljs-number\">25</span>),\n                  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">ListTile</span>(\n                    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Received Message: ${snapshot.data ?? \"</span><span class=\"hljs-string\">\"}\"</span>),\n                  ),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}