{"pageProps":{"post":{"title":"플러터에서 빌드 변형 설정하기 포괄적인 안내","description":"","date":"2024-06-20 13:52","slug":"2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide","content":"\n현대 앱 개발에서는 다양한 빌드 변형을 관리하는 것이 중요합니다. 플러터(Flutter)에서 빌드 변형은 개발, 스테이징 및 프로덕션과 같이 여러 버전의 앱을 구성할 수 있도록 해줍니다. 각각이 API 엔드포인트, 기능 플래그 및 기타 환경별 설정과 같은 고유의 구성을 가지고 있습니다. 이 안내서에서는 플러터 프로젝트에서 빌드 변형을 설정하는 방법을 안내해 드릴 예정입니다.\n\n# 단계 1: 구성 파일 만들기\n\n첫 번째 단계는 각 빌드 변형을 위한 별도의 구성 파일을 만드는 것입니다. 이러한 파일에는 환경별 설정이 포함됩니다.\n\n- 플러터 프로젝트의 루트에 config 디렉토리를 생성합니다.\n- 각 빌드 변형을 위해 config 디렉토리 내에 JSON 구성 파일을 추가합니다:\n\n<div class=\"content-ad\"></div>\n\n- config/development.json\n- config/staging.json\n- config/production.json\n\n각 구성 파일은 다음과 같을 수 있습니다:\n\n![이미지](/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_0.png)\n\n# 단계 2: 구성 로더 생성\n\n<div class=\"content-ad\"></div>\n\n다음으로, 빌드 변형에 따라 적절한 구성 파일을 로드할 클래스를 만들어보겠습니다.\n\n- lib/config_loader.dart라는 새 파일을 생성하세요:\n\n```js\nimport 'dart:convert';\nimport 'package:flutter/services.dart';\n\nclass ConfigLoader {\n  final String environment;\n\n  ConfigLoader({required this.environment});\n\n  Future<Map<String, dynamic>> load() async {\n    final String configString = await rootBundle.loadString('config/$environment.json');\n    return json.decode(configString);\n  }\n}\n```\n\n2. lib/config.dart 파일을 생성하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nclass Config {\n  final String apiBaseUrl;\n  final bool debug;\n\n  Config({required this.apiBaseUrl, required this.debug});\n\n  factory Config.fromJson(Map<String, dynamic> json) {\n    return Config(\n      apiBaseUrl: json['apiBaseUrl'],\n      debug: json['debug'],\n    );\n  }\n}\n```\n\n![Setting up build variants in Flutter](/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_1.png)\n\n# 단계 3: 설정을 사용하도록 메인 파일 수정\n\n빌드 변형에 기반하여 구성 파일을 로드하도록 메인.dart 파일을 수정하세요.\n\n<div class=\"content-ad\"></div>\n\n- 구성을로드하도록 main.dart를 아래와 같이 편집하세요\n\n```js\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  String envFile = \"development\";\n\n  const flavor = String.fromEnvironment('FLAVOR');\n\n  switch (flavor) {\n    case 'development':\n      envFile = \"development\";\n      break;\n    case 'staging':\n      envFile = \"staging\";\n      break;\n    case 'production':\n      envFile = \"release\";\n      break;\n  }\n\n  // 구성로드\n  final configLoader = ConfigLoader(environment: envFile); // 환경에 따라 변경\n  final config = await configLoader.load();\n\n  print(config.apiBaseUrl);\n  runApp(const MyApp());\n}\n```\n\n# 단계 4: build.gradle (Android)에서 빌드 변형 정의\n\nandroid/app/build.gradle 파일에 build variants를 정의하십시오. 이렇게하면 환경 변수를 Dart 코드로 전달할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- 안드로이드 앱의 build.gradle 파일을 편집하세요:\n\n```js\nandroid {\n    ...\n\n    flavorDimensions \"env\"\n    productFlavors {\n        dev {\n            dimension \"env\"\n            buildConfigField \"String\", \"ENV\", \"\\\"development\\\"\"\n        }\n        staging {\n            dimension \"env\"\n            buildConfigField \"String\", \"ENV\", \"\\\"staging\\\"\"\n        }\n        prod {\n            dimension \"env\"\n            buildConfigField \"String\", \"ENV\", \"\\\"production\\\"\"\n        }\n    }\n}\n```\n\n# 단계 5: (iOS)에서 빌드 변형 정의하기\n\n## 설정 구성:\n\n<div class=\"content-ad\"></div>\n\n- 워크스페이스 파일 열기:\n\n프로젝트를 .xcodeproj 파일이 아닌 .xcworkspace 파일을 사용하여 열어야 합니다. 워크스페이스 파일에는 CocoaPods나 기타 도구로 관리되는 프로젝트와 종속성에 대한 참조가 포함되어 있습니다.\n\n2. 프로젝트 설정으로 이동:\n\n- Xcode에서 프로젝트 네비게이터(일반적으로 왼쪽에 위치)에서 프로젝트를 선택합니다.\n- 이렇게 하면 다양한 설정을 구성할 수 있는 프로젝트 편집기가 열립니다.\n\n<div class=\"content-ad\"></div>\n\n3. 환경 설정 관리:\n\n- 프로젝트 네비게이터 상단에 있는 프로젝트 이름을 클릭하여 프로젝트 설정에 액세스합니다.\n- 다른 빌드 설정을 구성하려는 대상을 선택합니다 (예: Runner).\n\n4. 환경 설정 추가 또는 편집:\n\n- 정보 탭을 클릭합니다.\n- Debug 및 Release와 같은 다양한 빌드 구성을 관리할 수 있는 환경 설정 섹션을 볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- 버튼을 클릭하고 \"Debug\"을 복제하거나 \"Release\"를 복사하여 사용자 정의 구성물을 추가할 수 있어요. 그리고 나서 그 구성물을 원하는 대로 (예: Debug-staging, Debug-production) 이름을 바꿔주세요.\n\n5. 빌드 설정 구성:\n\n- 새로 생성된 구성물을 선택합니다.\n- 필요에 따라 빌드 설정을 조정합니다. 일반적으로 API 엔드포인트, 환경 변수 또는 각 구성에 특정한 번들 식별자와 같은 설정이 포함됩니다.\n\n6. 변경 사항을 저장하세요.\n\n<div class=\"content-ad\"></div>\n\n- 변경을 저장하려면 파일 ` 저장 또는 Cmd + S를 클릭하세요.\n\n## 설정 체계:\n\n- 체계 수정:\n\n- Xcode에서 툴바에 있는 일반적으로 중지 버튼 옆의 체계 드롭다운을 클릭합니다.\n- 체계 수정...을 선택합니다.\n\n<div class=\"content-ad\"></div>\n\n### 2. 스킴 구성 관리:\n\n- 스킴 편집기에서 동작 목록을 볼 수 있습니다 (예: 실행, 테스트, 프로파일 등).\n- 각 동작에는 고유한 구성이 있습니다 (예: 실행 동작의 디버그).\n- 기존 구성 (예: 디버그)을 복제하여 새로운 구성 (예: 릴리스, 스테이징)을 만들 수 있습니다.\n\n### 3. 스킴별 빌드 구성 설정:\n\n- 각 동작 (예: 실행)에 대해 드롭다운에서 적절한 빌드 구성 (디버그, 릴리스 또는 사용자 정의 구성)을 선택하세요.\n\n<div class=\"content-ad\"></div>\n\n4. 실행 대상 구성하기:\n\n- 동일한 Scheme 편집기에서 앱이 실행될 대상을 구성할 수 있습니다 (예: 시뮬레이터 장치 유형, 연결된 장치).\n\n- Scheme 변경 사항 저장하기:\n\n- Scheme 변경 사항을 저장하려면 확인을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_2.png)\n\n# 단계 6. 다른 플레이버 실행/빌드하기\n\n명령줄을 사용하여 원하는 플레이버로 앱을 실행하세요. --flavor 플래그와 -t 플래그를 사용하여 빌드 플레이버와 대상 파일을 지정합니다.\n\n터미널에서 아래의 주석을 사용하세요\n\n<div class=\"content-ad\"></div>\n\nflutter run --flavor development -t lib/main.dart // 개발용\n\nflutter run --flavor staging -t lib/main.dart // 스테이징용\n\nflutter run --flavor production -t lib/main.dart // 프로덕션 또는 릴리스용\n\nAndroid 빌드하려면 터미널에서 다음 주석을 사용하세요\n\nflutter build apk --flavor development -t lib/main.dart\n\nflutter build apk --flavor staging -t lib/main.dart\n\nflutter build apk --flavor production -t lib/main.dart\n\niOS 빌드하려면 터미널에서 다음 주석을 사용하세요\n\n<div class=\"content-ad\"></div>\n\n```js\nflutter build ios --flavor development -t lib/main.dart\n\nflutter build ios --flavor staging -t lib/main.dart\n\nflutter build ios --flavor production -t lib/main.dart\n```\n\n# 단계 6: 또한 안드로이드 스튜디오에서 실행 구성 설정을 설정할 수 있습니다\n\n- 실행/디버그 구성을 엽니다:\n\n- 안드로이드 스튜디오에서 Run ` Edit Configurations...`로 이동합니다.\n\n<div class=\"content-ad\"></div>\n\n2. 새로운 Flutter 구성 만들기:\n\n- 새 구성을 추가하려면 + 버튼을 클릭합니다.\n- 목록에서 Flutter를 선택합니다.\n\n3. 개발 플레이버 구성하기:\n\n- 구성 이름을 Flutter 개발과 같이 지정합니다.\n- 대상을 main.dart로 설정합니다.\n- 추가 실행 인수 필드에서 다트 정의로 플레이버를 추가합니다: --dart-define=FLAVOR=development.\n- 선택적으로 빌드 섹션 아래에서 개발을 빌드 플레이버 필드로 설정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n4. 스테이징 플레이버 구성:\n\n- 다른 구성을 만들기 위해 위 단계를 반복합니다.\n- 이름을 플러터 스테이징으로 지정합니다.\n- 타겟을 main.dart로 설정합니다.\n- 추가 실행 인수 필드에 Dart Define으로 플레이버를 추가합니다: --dart-define=FLAVOR=staging.\n- 빌드 플레이버 필드를 스테이징으로 설정합니다.\n\n5. 프로덕션 플레이버 구성:\n\n- 다른 구성을 만들기 위해 단계를 반복합니다.\n- 이름을 플러터 프로덕션으로 지정합니다.\n- 타겟을 main.dart로 설정합니다.\n- 추가 실행 인수 필드에 Dart Define으로 플레이버를 추가합니다: --dart-define=FLAVOR=production.\n- 빌드 플레이버 필드를 프로덕션으로 설정합니다.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_3.png)\n\n# 결론\n\n위의 단계를 따라가면, 플러터 앱에서 여러 빌드 변형을 효율적으로 관리하여 개발, 테스트 및 프로덕션을 위한 다른 환경을 유지하기 쉬워집니다. 이 설정을 통해 각 빌드 변형이 자체 구성 및 리소스를 가질 수 있도록하여 개발 및 배포 프로세스를 더 효율적으로 할 수 있습니다.\n\n의문이나 질문이 있으면 언제든지 연락해 주세요. LinkTree를 통해 저에게 연락할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n행복한 코딩하세요! :)\n","ogImage":{"url":"/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>현대 앱 개발에서는 다양한 빌드 변형을 관리하는 것이 중요합니다. 플러터(Flutter)에서 빌드 변형은 개발, 스테이징 및 프로덕션과 같이 여러 버전의 앱을 구성할 수 있도록 해줍니다. 각각이 API 엔드포인트, 기능 플래그 및 기타 환경별 설정과 같은 고유의 구성을 가지고 있습니다. 이 안내서에서는 플러터 프로젝트에서 빌드 변형을 설정하는 방법을 안내해 드릴 예정입니다.</p>\n<h1>단계 1: 구성 파일 만들기</h1>\n<p>첫 번째 단계는 각 빌드 변형을 위한 별도의 구성 파일을 만드는 것입니다. 이러한 파일에는 환경별 설정이 포함됩니다.</p>\n<ul>\n<li>플러터 프로젝트의 루트에 config 디렉토리를 생성합니다.</li>\n<li>각 빌드 변형을 위해 config 디렉토리 내에 JSON 구성 파일을 추가합니다:</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ul>\n<li>config/development.json</li>\n<li>config/staging.json</li>\n<li>config/production.json</li>\n</ul>\n<p>각 구성 파일은 다음과 같을 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_0.png\" alt=\"이미지\"></p>\n<h1>단계 2: 구성 로더 생성</h1>\n<div class=\"content-ad\"></div>\n<p>다음으로, 빌드 변형에 따라 적절한 구성 파일을 로드할 클래스를 만들어보겠습니다.</p>\n<ul>\n<li>lib/config_loader.dart라는 새 파일을 생성하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:convert'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/services.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConfigLoader</span> {\n  final <span class=\"hljs-title class_\">String</span> environment;\n\n  <span class=\"hljs-title class_\">ConfigLoader</span>({required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">environment</span>});\n\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>> <span class=\"hljs-title function_\">load</span>() <span class=\"hljs-keyword\">async</span> {\n    final <span class=\"hljs-title class_\">String</span> configString = <span class=\"hljs-keyword\">await</span> rootBundle.<span class=\"hljs-title function_\">loadString</span>(<span class=\"hljs-string\">'config/$environment.json'</span>);\n    <span class=\"hljs-keyword\">return</span> json.<span class=\"hljs-title function_\">decode</span>(configString);\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>lib/config.dart 파일을 생성하세요.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Config</span> {\n  final <span class=\"hljs-title class_\">String</span> apiBaseUrl;\n  final bool debug;\n\n  <span class=\"hljs-title class_\">Config</span>({required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">apiBaseUrl</span>, required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">debug</span>});\n\n  factory <span class=\"hljs-title class_\">Config</span>.<span class=\"hljs-title function_\">fromJson</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">Map</span>&#x3C;<span class=\"hljs-built_in\">String</span>, dynamic> json</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Config</span>(\n      <span class=\"hljs-attr\">apiBaseUrl</span>: json[<span class=\"hljs-string\">'apiBaseUrl'</span>],\n      <span class=\"hljs-attr\">debug</span>: json[<span class=\"hljs-string\">'debug'</span>],\n    );\n  }\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_1.png\" alt=\"Setting up build variants in Flutter\"></p>\n<h1>단계 3: 설정을 사용하도록 메인 파일 수정</h1>\n<p>빌드 변형에 기반하여 구성 파일을 로드하도록 메인.dart 파일을 수정하세요.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>구성을로드하도록 main.dart를 아래와 같이 편집하세요</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\n  <span class=\"hljs-title class_\">String</span> envFile = <span class=\"hljs-string\">\"development\"</span>;\n\n  <span class=\"hljs-keyword\">const</span> flavor = <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromEnvironment</span>(<span class=\"hljs-string\">'FLAVOR'</span>);\n\n  <span class=\"hljs-keyword\">switch</span> (flavor) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'development'</span>:\n      envFile = <span class=\"hljs-string\">\"development\"</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'staging'</span>:\n      envFile = <span class=\"hljs-string\">\"staging\"</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'production'</span>:\n      envFile = <span class=\"hljs-string\">\"release\"</span>;\n      <span class=\"hljs-keyword\">break</span>;\n  }\n\n  <span class=\"hljs-comment\">// 구성로드</span>\n  final configLoader = <span class=\"hljs-title class_\">ConfigLoader</span>(<span class=\"hljs-attr\">environment</span>: envFile); <span class=\"hljs-comment\">// 환경에 따라 변경</span>\n  final config = <span class=\"hljs-keyword\">await</span> configLoader.<span class=\"hljs-title function_\">load</span>();\n\n  <span class=\"hljs-title function_\">print</span>(config.<span class=\"hljs-property\">apiBaseUrl</span>);\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>());\n}\n</code></pre>\n<h1>단계 4: build.gradle (Android)에서 빌드 변형 정의</h1>\n<p>android/app/build.gradle 파일에 build variants를 정의하십시오. 이렇게하면 환경 변수를 Dart 코드로 전달할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>안드로이드 앱의 build.gradle 파일을 편집하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">android {\n    ...\n\n    flavorDimensions <span class=\"hljs-string\">\"env\"</span>\n    productFlavors {\n        dev {\n            dimension <span class=\"hljs-string\">\"env\"</span>\n            buildConfigField <span class=\"hljs-string\">\"String\"</span>, <span class=\"hljs-string\">\"ENV\"</span>, <span class=\"hljs-string\">\"\\\"development\\\"\"</span>\n        }\n        staging {\n            dimension <span class=\"hljs-string\">\"env\"</span>\n            buildConfigField <span class=\"hljs-string\">\"String\"</span>, <span class=\"hljs-string\">\"ENV\"</span>, <span class=\"hljs-string\">\"\\\"staging\\\"\"</span>\n        }\n        prod {\n            dimension <span class=\"hljs-string\">\"env\"</span>\n            buildConfigField <span class=\"hljs-string\">\"String\"</span>, <span class=\"hljs-string\">\"ENV\"</span>, <span class=\"hljs-string\">\"\\\"production\\\"\"</span>\n        }\n    }\n}\n</code></pre>\n<h1>단계 5: (iOS)에서 빌드 변형 정의하기</h1>\n<h2>설정 구성:</h2>\n<div class=\"content-ad\"></div>\n<ul>\n<li>워크스페이스 파일 열기:</li>\n</ul>\n<p>프로젝트를 .xcodeproj 파일이 아닌 .xcworkspace 파일을 사용하여 열어야 합니다. 워크스페이스 파일에는 CocoaPods나 기타 도구로 관리되는 프로젝트와 종속성에 대한 참조가 포함되어 있습니다.</p>\n<ol start=\"2\">\n<li>프로젝트 설정으로 이동:</li>\n</ol>\n<ul>\n<li>Xcode에서 프로젝트 네비게이터(일반적으로 왼쪽에 위치)에서 프로젝트를 선택합니다.</li>\n<li>이렇게 하면 다양한 설정을 구성할 수 있는 프로젝트 편집기가 열립니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ol start=\"3\">\n<li>환경 설정 관리:</li>\n</ol>\n<ul>\n<li>프로젝트 네비게이터 상단에 있는 프로젝트 이름을 클릭하여 프로젝트 설정에 액세스합니다.</li>\n<li>다른 빌드 설정을 구성하려는 대상을 선택합니다 (예: Runner).</li>\n</ul>\n<ol start=\"4\">\n<li>환경 설정 추가 또는 편집:</li>\n</ol>\n<ul>\n<li>정보 탭을 클릭합니다.</li>\n<li>Debug 및 Release와 같은 다양한 빌드 구성을 관리할 수 있는 환경 설정 섹션을 볼 수 있습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ul>\n<li>버튼을 클릭하고 \"Debug\"을 복제하거나 \"Release\"를 복사하여 사용자 정의 구성물을 추가할 수 있어요. 그리고 나서 그 구성물을 원하는 대로 (예: Debug-staging, Debug-production) 이름을 바꿔주세요.</li>\n</ul>\n<ol start=\"5\">\n<li>빌드 설정 구성:</li>\n</ol>\n<ul>\n<li>새로 생성된 구성물을 선택합니다.</li>\n<li>필요에 따라 빌드 설정을 조정합니다. 일반적으로 API 엔드포인트, 환경 변수 또는 각 구성에 특정한 번들 식별자와 같은 설정이 포함됩니다.</li>\n</ul>\n<ol start=\"6\">\n<li>변경 사항을 저장하세요.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ul>\n<li>변경을 저장하려면 파일 ` 저장 또는 Cmd + S를 클릭하세요.</li>\n</ul>\n<h2>설정 체계:</h2>\n<ul>\n<li>\n<p>체계 수정:</p>\n</li>\n<li>\n<p>Xcode에서 툴바에 있는 일반적으로 중지 버튼 옆의 체계 드롭다운을 클릭합니다.</p>\n</li>\n<li>\n<p>체계 수정...을 선택합니다.</p>\n</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h3>2. 스킴 구성 관리:</h3>\n<ul>\n<li>스킴 편집기에서 동작 목록을 볼 수 있습니다 (예: 실행, 테스트, 프로파일 등).</li>\n<li>각 동작에는 고유한 구성이 있습니다 (예: 실행 동작의 디버그).</li>\n<li>기존 구성 (예: 디버그)을 복제하여 새로운 구성 (예: 릴리스, 스테이징)을 만들 수 있습니다.</li>\n</ul>\n<h3>3. 스킴별 빌드 구성 설정:</h3>\n<ul>\n<li>각 동작 (예: 실행)에 대해 드롭다운에서 적절한 빌드 구성 (디버그, 릴리스 또는 사용자 정의 구성)을 선택하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>실행 대상 구성하기:</li>\n</ol>\n<ul>\n<li>\n<p>동일한 Scheme 편집기에서 앱이 실행될 대상을 구성할 수 있습니다 (예: 시뮬레이터 장치 유형, 연결된 장치).</p>\n</li>\n<li>\n<p>Scheme 변경 사항 저장하기:</p>\n</li>\n<li>\n<p>Scheme 변경 사항을 저장하려면 확인을 클릭하세요.</p>\n</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_2.png\" alt=\"이미지\"></p>\n<h1>단계 6. 다른 플레이버 실행/빌드하기</h1>\n<p>명령줄을 사용하여 원하는 플레이버로 앱을 실행하세요. --flavor 플래그와 -t 플래그를 사용하여 빌드 플레이버와 대상 파일을 지정합니다.</p>\n<p>터미널에서 아래의 주석을 사용하세요</p>\n<div class=\"content-ad\"></div>\n<p>flutter run --flavor development -t lib/main.dart // 개발용</p>\n<p>flutter run --flavor staging -t lib/main.dart // 스테이징용</p>\n<p>flutter run --flavor production -t lib/main.dart // 프로덕션 또는 릴리스용</p>\n<p>Android 빌드하려면 터미널에서 다음 주석을 사용하세요</p>\n<p>flutter build apk --flavor development -t lib/main.dart</p>\n<p>flutter build apk --flavor staging -t lib/main.dart</p>\n<p>flutter build apk --flavor production -t lib/main.dart</p>\n<p>iOS 빌드하려면 터미널에서 다음 주석을 사용하세요</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">flutter build ios --flavor development -t lib/main.<span class=\"hljs-property\">dart</span>\n\nflutter build ios --flavor staging -t lib/main.<span class=\"hljs-property\">dart</span>\n\nflutter build ios --flavor production -t lib/main.<span class=\"hljs-property\">dart</span>\n</code></pre>\n<h1>단계 6: 또한 안드로이드 스튜디오에서 실행 구성 설정을 설정할 수 있습니다</h1>\n<ul>\n<li>\n<p>실행/디버그 구성을 엽니다:</p>\n</li>\n<li>\n<p>안드로이드 스튜디오에서 Run <code> Edit Configurations...</code>로 이동합니다.</p>\n</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>새로운 Flutter 구성 만들기:</li>\n</ol>\n<ul>\n<li>새 구성을 추가하려면 + 버튼을 클릭합니다.</li>\n<li>목록에서 Flutter를 선택합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>개발 플레이버 구성하기:</li>\n</ol>\n<ul>\n<li>구성 이름을 Flutter 개발과 같이 지정합니다.</li>\n<li>대상을 main.dart로 설정합니다.</li>\n<li>추가 실행 인수 필드에서 다트 정의로 플레이버를 추가합니다: --dart-define=FLAVOR=development.</li>\n<li>선택적으로 빌드 섹션 아래에서 개발을 빌드 플레이버 필드로 설정할 수 있습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>스테이징 플레이버 구성:</li>\n</ol>\n<ul>\n<li>다른 구성을 만들기 위해 위 단계를 반복합니다.</li>\n<li>이름을 플러터 스테이징으로 지정합니다.</li>\n<li>타겟을 main.dart로 설정합니다.</li>\n<li>추가 실행 인수 필드에 Dart Define으로 플레이버를 추가합니다: --dart-define=FLAVOR=staging.</li>\n<li>빌드 플레이버 필드를 스테이징으로 설정합니다.</li>\n</ul>\n<ol start=\"5\">\n<li>프로덕션 플레이버 구성:</li>\n</ol>\n<ul>\n<li>다른 구성을 만들기 위해 단계를 반복합니다.</li>\n<li>이름을 플러터 프로덕션으로 지정합니다.</li>\n<li>타겟을 main.dart로 설정합니다.</li>\n<li>추가 실행 인수 필드에 Dart Define으로 플레이버를 추가합니다: --dart-define=FLAVOR=production.</li>\n<li>빌드 플레이버 필드를 프로덕션으로 설정합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-20-SettingUpBuildVariantsinFlutterAComprehensiveGuide_3.png\" alt=\"image\"></p>\n<h1>결론</h1>\n<p>위의 단계를 따라가면, 플러터 앱에서 여러 빌드 변형을 효율적으로 관리하여 개발, 테스트 및 프로덕션을 위한 다른 환경을 유지하기 쉬워집니다. 이 설정을 통해 각 빌드 변형이 자체 구성 및 리소스를 가질 수 있도록하여 개발 및 배포 프로세스를 더 효율적으로 할 수 있습니다.</p>\n<p>의문이나 질문이 있으면 언제든지 연락해 주세요. LinkTree를 통해 저에게 연락할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>행복한 코딩하세요! :)</p>\n</body>\n</html>\n"},"__N_SSG":true}