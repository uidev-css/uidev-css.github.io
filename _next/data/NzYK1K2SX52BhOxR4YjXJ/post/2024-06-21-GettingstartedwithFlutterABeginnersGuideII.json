{"pageProps":{"post":{"title":"처음 시작하는 Flutter 초보자를 위한 가이드 II","description":"","date":"2024-06-21 20:07","slug":"2024-06-21-GettingstartedwithFlutterABeginnersGuideII","content":"\n내가 만든 플러터 개발 시리즈의 두 번째 부분에 다시 오신 것을 환영합니다. 첫 번째 부분에서는 Flutter의 이점, 설치, 그리고 프로젝트 설정에 대해 이야기했습니다. 이제 플러터 여정에서 중요한 구성 요소들에 대해 자세히 살펴보겠습니다. 이 글에서는 다음 주제를 다룰 것입니다.\n\n1. Flutter에서의 널 안전성\n\n2. 위젯 만들기\n\n3. 위젯 트리 이해하기\n\n<div class=\"content-ad\"></div>\n\n4. 자료 App\n\n5. 빌드 컨텍스트/컨텍스트\n\n6. 스캐폴드\n\n7. 컨테이너\n\n<div class=\"content-ad\"></div>\n\n8. 행과 열\n\n![Image](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_0.png)\n\n# 플러터에서의 널 안전성\n\n널 안전성은 Dart에 존재하는 기능으로, 실행 시간 오류를 최소화하는 것을 목표로 합니다. 이는 플러터 프로젝트에 대한 더 큰 견고성과 신뢰성을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n널 안전성을 활성화하려면 SDK가 pubspec.yaml 파일에서 널 안전 Dart 버전으로 설정되어 있는지 확인하세요.\n\n![image](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_1.png)\n\n널 변수: 값이 할당되지 않은 변수를 정의할 수 없습니다. 필요한 경우 아래 예제처럼 물음표를 추가해야 합니다.\n\n예:\n\n<div class=\"content-ad\"></div>\n\n```js\nString? name;  //name은 널 가능성이 있음\n```\n\n# 위젯 만들기\n\n위젯을 만드는 방법은 3가지가 있습니다. 상태가 없는 위젯, 상태가 있는 위젯 및 클래스 내의 메소드가 있습니다. 각각은 생성 중인 구성 요소의 특정 요구 사항에 따라 사용됩니다.\n\n- 상태가 없는 위젯\n\n<div class=\"content-ad\"></div>\n\nStateless 위젯은 변경할 수 없습니다. 생성되면 변경할 수 없습니다. 정적 정보나 구성 요소를 표시하는 데 이상적입니다.\n\n사용 시기,\n\n- 어떠한 상태 변화에도 의존하지 않는 UI 요소입니다.\n\n![Getting Started with Flutter: A Beginner's Guide](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_2.png)\n\n<div class=\"content-ad\"></div>\n\n2. Stateful widgets\n\n상태를 가지는 위젯(Stateful widgets)은 변할 수 있으며 사용자 상호작용이나 다른 요소에 따라 변할 수 있습니다.\n\n사용 시기:\n\n- 동적으로 변경해야 하는 UI 요소들.\n\n<div class=\"content-ad\"></div>\n\n`<img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_3.png\" />`\n\n3. In-class method widgets\n\n클래스 내에서 메소드를 사용하여 위젯을 생성하면 코드를 단순화하고 작은 재사용 가능한 구성 요소로 변환할 수 있습니다.\n\n언제 사용해야 하는지,\n\n<div class=\"content-ad\"></div>\n\n- 대규모 위젯 트리 다루기.\n\n![image](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_4.png)\n\n## 위젯 트리 이해하기\n\n위젯 트리는 Flutter 프로젝트의 계층적 표현입니다. 트리는 루트 위젯에서 시작되고 가지에는 하위 위젯들이 포함됩니다.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_5.png)\n\nEx:\n\n![image](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_6.png)\n\n# Material App\n\n<div class=\"content-ad\"></div>\n\n매터리얼 앱은 Flutter 프로젝트를 위한 기본 구조를 제공합니다. 매터리얼 앱의 속성을 사용하여 앱에 필요한 것들을 조정할 수 있어요.\n\n여기서 매터리얼 앱의 주요 속성 중 일부를 소개했어요.\n\n- Home: 첫 화면을 표시합니다.\n- Theme: 앱의 색상, 폰트 및 기타 요소를 정의합니다.\n- Route: 한 페이지에서 다른 페이지로 이동합니다.\n- Locale: 여러 언어를 지원합니다.\n\n# 빌드 컨텍스트/컨텍스트\n\n<div class=\"content-ad\"></div>\n\nBuild context는 Flutter의 위젯 시스템의 중요한 부분입니다. 이는 앱 위젯 간의 관계에 대한 정보를 보유합니다.\n\n예시:\n\n![이미지](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_7.png)\n\n# Scaffold\n\n<div class=\"content-ad\"></div>\n\n스캐폴드는 Material Design 앱의 기본 시각적 레이아웃 구조를 제공합니다. 앱 바, 본문, 배경 서랍 등과 같은 구성 요소가 포함됩니다.\n\n![이미지](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_8.png)\n\n# 컨테이너\n\n컨테이너는 레이아웃 및 스타일링을 위해 일반적으로 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n프로퍼티: child, width, height, padding, margin, color 등 다양한 속성이 있습니다.\n\n![이미지](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_9.png)\n\n```javascript\nContainer(\n  width: 100,\n  height: 100,\n  color: Colors.blue,\n  child: Center(child: Text('첫 번째 앱')),\n);\n```\n\n# 행과 열\n\n<div class=\"content-ad\"></div>\n\n플러터에서 행과 열은 기본 레이아웃 위젯입니다. 이를 사용하면 위젯을 수평으로 (행) 또는 수직으로 (열) 배열할 수 있어요.\n\n행:\n\n![Row](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_10.png)\n\n```js\nRow(\n  children: [\n    Text(\"텍스트 1\"),\n    Text(\"텍스트 2\"),\n    Text(\"텍스트 3\"),\n  ],\n);\n```\n\n<div class=\"content-ad\"></div>\n\n컬럼:\n\n![이미지](/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_11.png)\n\n```js\nColumn(\n  children: [\n    Text(\"텍스트 1\"),\n    Text(\"텍스트 2\"),\n    Text(\"텍스트 3\"),\n  ],\n);\n```\n\n이 블로그 포스트에서는 플러터 애플리케이션을 구축하는 데 필수적인 주요 개념과 구성 요소를 탐색했습니다. 널 안전성을 이해하고 위젯을 생성하며 MaterialApp, BuildContext, Scaffold, Container, Rows 및 Columns을 활용하는 방법을 다루었습니다. 이제 당신은 견고하고 동적인 UI를 구축하기 위한 지식을 갖추었습니다.\n\n<div class=\"content-ad\"></div>\n\n다음 플러터 개발 시리즈에서 더 많은 통찰과 고급 기술을 기대해 주세요! 🥳👏\n","ogImage":{"url":"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_0.png"},"coverImage":"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>내가 만든 플러터 개발 시리즈의 두 번째 부분에 다시 오신 것을 환영합니다. 첫 번째 부분에서는 Flutter의 이점, 설치, 그리고 프로젝트 설정에 대해 이야기했습니다. 이제 플러터 여정에서 중요한 구성 요소들에 대해 자세히 살펴보겠습니다. 이 글에서는 다음 주제를 다룰 것입니다.</p>\n<ol>\n<li>\n<p>Flutter에서의 널 안전성</p>\n</li>\n<li>\n<p>위젯 만들기</p>\n</li>\n<li>\n<p>위젯 트리 이해하기</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>\n<p>자료 App</p>\n</li>\n<li>\n<p>빌드 컨텍스트/컨텍스트</p>\n</li>\n<li>\n<p>스캐폴드</p>\n</li>\n<li>\n<p>컨테이너</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"8\">\n<li>행과 열</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_0.png\" alt=\"Image\"></p>\n<h1>플러터에서의 널 안전성</h1>\n<p>널 안전성은 Dart에 존재하는 기능으로, 실행 시간 오류를 최소화하는 것을 목표로 합니다. 이는 플러터 프로젝트에 대한 더 큰 견고성과 신뢰성을 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<p>널 안전성을 활성화하려면 SDK가 pubspec.yaml 파일에서 널 안전 Dart 버전으로 설정되어 있는지 확인하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_1.png\" alt=\"image\"></p>\n<p>널 변수: 값이 할당되지 않은 변수를 정의할 수 없습니다. 필요한 경우 아래 예제처럼 물음표를 추가해야 합니다.</p>\n<p>예:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">String</span>? name;  <span class=\"hljs-comment\">//name은 널 가능성이 있음</span>\n</code></pre>\n<h1>위젯 만들기</h1>\n<p>위젯을 만드는 방법은 3가지가 있습니다. 상태가 없는 위젯, 상태가 있는 위젯 및 클래스 내의 메소드가 있습니다. 각각은 생성 중인 구성 요소의 특정 요구 사항에 따라 사용됩니다.</p>\n<ul>\n<li>상태가 없는 위젯</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>Stateless 위젯은 변경할 수 없습니다. 생성되면 변경할 수 없습니다. 정적 정보나 구성 요소를 표시하는 데 이상적입니다.</p>\n<p>사용 시기,</p>\n<ul>\n<li>어떠한 상태 변화에도 의존하지 않는 UI 요소입니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_2.png\" alt=\"Getting Started with Flutter: A Beginner&#x27;s Guide\"></p>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>Stateful widgets</li>\n</ol>\n<p>상태를 가지는 위젯(Stateful widgets)은 변할 수 있으며 사용자 상호작용이나 다른 요소에 따라 변할 수 있습니다.</p>\n<p>사용 시기:</p>\n<ul>\n<li>동적으로 변경해야 하는 UI 요소들.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p><code>&#x3C;img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_3.png\" /></code></p>\n<ol start=\"3\">\n<li>In-class method widgets</li>\n</ol>\n<p>클래스 내에서 메소드를 사용하여 위젯을 생성하면 코드를 단순화하고 작은 재사용 가능한 구성 요소로 변환할 수 있습니다.</p>\n<p>언제 사용해야 하는지,</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>대규모 위젯 트리 다루기.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_4.png\" alt=\"image\"></p>\n<h2>위젯 트리 이해하기</h2>\n<p>위젯 트리는 Flutter 프로젝트의 계층적 표현입니다. 트리는 루트 위젯에서 시작되고 가지에는 하위 위젯들이 포함됩니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_5.png\" alt=\"image\"></p>\n<p>Ex:</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_6.png\" alt=\"image\"></p>\n<h1>Material App</h1>\n<div class=\"content-ad\"></div>\n<p>매터리얼 앱은 Flutter 프로젝트를 위한 기본 구조를 제공합니다. 매터리얼 앱의 속성을 사용하여 앱에 필요한 것들을 조정할 수 있어요.</p>\n<p>여기서 매터리얼 앱의 주요 속성 중 일부를 소개했어요.</p>\n<ul>\n<li>Home: 첫 화면을 표시합니다.</li>\n<li>Theme: 앱의 색상, 폰트 및 기타 요소를 정의합니다.</li>\n<li>Route: 한 페이지에서 다른 페이지로 이동합니다.</li>\n<li>Locale: 여러 언어를 지원합니다.</li>\n</ul>\n<h1>빌드 컨텍스트/컨텍스트</h1>\n<div class=\"content-ad\"></div>\n<p>Build context는 Flutter의 위젯 시스템의 중요한 부분입니다. 이는 앱 위젯 간의 관계에 대한 정보를 보유합니다.</p>\n<p>예시:</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_7.png\" alt=\"이미지\"></p>\n<h1>Scaffold</h1>\n<div class=\"content-ad\"></div>\n<p>스캐폴드는 Material Design 앱의 기본 시각적 레이아웃 구조를 제공합니다. 앱 바, 본문, 배경 서랍 등과 같은 구성 요소가 포함됩니다.</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_8.png\" alt=\"이미지\"></p>\n<h1>컨테이너</h1>\n<p>컨테이너는 레이아웃 및 스타일링을 위해 일반적으로 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>프로퍼티: child, width, height, padding, margin, color 등 다양한 속성이 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_9.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">Container</span>(\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>,\n  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>,\n  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Center</span>(<span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'첫 번째 앱'</span>)),\n);\n</code></pre>\n<h1>행과 열</h1>\n<div class=\"content-ad\"></div>\n<p>플러터에서 행과 열은 기본 레이아웃 위젯입니다. 이를 사용하면 위젯을 수평으로 (행) 또는 수직으로 (열) 배열할 수 있어요.</p>\n<p>행:</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_10.png\" alt=\"Row\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span>(\n  <span class=\"hljs-attr\">children</span>: [\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 1\"</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 2\"</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 3\"</span>),\n  ],\n);\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>컬럼:</p>\n<p><img src=\"/assets/img/2024-06-21-GettingstartedwithFlutterABeginnersGuideII_11.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Column</span>(\n  <span class=\"hljs-attr\">children</span>: [\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 1\"</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 2\"</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"텍스트 3\"</span>),\n  ],\n);\n</code></pre>\n<p>이 블로그 포스트에서는 플러터 애플리케이션을 구축하는 데 필수적인 주요 개념과 구성 요소를 탐색했습니다. 널 안전성을 이해하고 위젯을 생성하며 MaterialApp, BuildContext, Scaffold, Container, Rows 및 Columns을 활용하는 방법을 다루었습니다. 이제 당신은 견고하고 동적인 UI를 구축하기 위한 지식을 갖추었습니다.</p>\n<div class=\"content-ad\"></div>\n<p>다음 플러터 개발 시리즈에서 더 많은 통찰과 고급 기술을 기대해 주세요! 🥳👏</p>\n</body>\n</html>\n"},"__N_SSG":true}