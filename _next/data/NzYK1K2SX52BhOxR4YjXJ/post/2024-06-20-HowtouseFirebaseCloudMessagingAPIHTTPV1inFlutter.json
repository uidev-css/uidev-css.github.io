{"pageProps":{"post":{"title":"플러터에서 Firebase Cloud Messaging API HTTP V1를 사용하는 방법","description":"","date":"2024-06-20 13:52","slug":"2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter","content":"\n만약 해당 이야기가 유용하다고 생각되면 왼쪽에 50개의 박수를 주세요.\n\n최근 Firebase Messages가 HTTP V1으로 이주되었습니다. Flutter 콘솔에서는 다음과 같이 보입니다.\n\n![image](/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_0.png)\n\n본 문서에서는 새 API로 이주하는 과정을 설명하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# 단계 1. 발신자 ID 수집하기\n\n`프로젝트 설정`에서` 클라우드 메시징`으로 이동하여 발신자 ID를 복사하고, 나중에 사용할 겁니다.\n\n페이지로 이동: [이 링크](https://console.firebase.google.com/u/0/project/PROJECT_NAME/settings/cloudmessaging)\n\n![이미지](/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_1.png)\n\n<div class=\"content-ad\"></div>\n\n# 단계 2. Firebase Messaging 클라이언트용 키 수집\n\n1. Firebase 콘솔에서 발신자 ID 옆의 `Manage Service Accounts` 버튼을 클릭합니다. 이 버튼을 클릭하면 https://console.cloud.google.com/iam-admin/serviceaccounts로 이동됩니다.\n\n페이지는 다음과 같이 보여야 합니다:\n\n![이미지](/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_2.png)\n\n<div class=\"content-ad\"></div>\n\n2. 어카운트를 클릭하고 'KEYS' 탭을 선택한 후 키를 추가하세요. 그러면 컴퓨터로 키가 담긴 JSON 파일이 다운로드됩니다.\n\n![이미지](/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_3.png)\n\n이를 리포지토리에 복사하여 붙여넣기하세요 (이 예시에서는 'data/your-key-from-cloud-console.json'에). pubspec.yaml에 에셋 경로를 추가하는 것을 잊지 마세요.\n\n# 단계 3. 구글 API Auth 라이브러리 설치\n\n<div class=\"content-ad\"></div>\n\n```js\nflutter pub add googleapis_auth\n```\n\n# 단계 4. 코드\n\n기존의 HTTP 요청은 다음과 같았습니다:\n\n```js\n// 더 이상 유효하지 않은 코드:\n\nhttp.post(\n  Uri.parse('https://fcm.googleapis.com/fcm/send'),\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'key=$fcmServerToken',\n  },\n  body: body,\n)\n```\n\n<div class=\"content-ad\"></div>\n\n구글 API 인증 라이브러리를 사용해야 하는 새로운 유효한 코드입니다.\n\n```js\nimport 'package:googleapis_auth/auth_io.dart' as auth;\nimport 'dart:convert';\nimport 'package:flutter/services.dart';\nimport 'dart:developer' as devtools show log;\n\nFuture<bool> sendPushMessage({\n  required String recipientToken,\n  required String title,\n  required String body,\n}) async {\n  final jsonCredentials = await rootBundle\n      .loadString('data/your-key-from-cloud-console.json');\n  final creds = auth.ServiceAccountCredentials.fromJson(jsonCredentials);\n\n  final client = await auth.clientViaServiceAccount(\n    creds,\n    ['https://www.googleapis.com/auth/cloud-platform'],\n  );\n\n  final notificationData = {\n    'message': {\n      'token': recipientToken,\n      'notification': {'title': title, 'body': body}\n    },\n  };\n\n  const String senderId = '736705283357';\n  final response = await client.post(\n    Uri.parse('https://fcm.googleapis.com/v1/projects/$senderId/messages:send'),\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: jsonEncode(notificationData),\n  );\n\n  client.close();\n  if (response.statusCode == 200) {\n    return true; // Success!\n  }\n\n  devtools.log(\n      'Notification Sending Error Response status: ${response.statusCode}');\n  devtools.log('Notification Response body: ${response.body}');\n  return false;\n}\n```\n\n감사합니다! 이 스토리가 유용하다면 왼쪽에 50개의 박수를 남겨주세요.\n","ogImage":{"url":"/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_0.png"},"coverImage":"/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>만약 해당 이야기가 유용하다고 생각되면 왼쪽에 50개의 박수를 주세요.</p>\n<p>최근 Firebase Messages가 HTTP V1으로 이주되었습니다. Flutter 콘솔에서는 다음과 같이 보입니다.</p>\n<p><img src=\"/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_0.png\" alt=\"image\"></p>\n<p>본 문서에서는 새 API로 이주하는 과정을 설명하겠습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>단계 1. 발신자 ID 수집하기</h1>\n<p><code>프로젝트 설정</code>에서<code> 클라우드 메시징</code>으로 이동하여 발신자 ID를 복사하고, 나중에 사용할 겁니다.</p>\n<p>페이지로 이동: <a href=\"https://console.firebase.google.com/u/0/project/PROJECT_NAME/settings/cloudmessaging\" rel=\"nofollow\" target=\"_blank\">이 링크</a></p>\n<p><img src=\"/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h1>단계 2. Firebase Messaging 클라이언트용 키 수집</h1>\n<ol>\n<li>Firebase 콘솔에서 발신자 ID 옆의 <code>Manage Service Accounts</code> 버튼을 클릭합니다. 이 버튼을 클릭하면 <a href=\"https://console.cloud.google.com/iam-admin/serviceaccounts%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">https://console.cloud.google.com/iam-admin/serviceaccounts로</a> 이동됩니다.</li>\n</ol>\n<p>페이지는 다음과 같이 보여야 합니다:</p>\n<p><img src=\"/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_2.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>어카운트를 클릭하고 'KEYS' 탭을 선택한 후 키를 추가하세요. 그러면 컴퓨터로 키가 담긴 JSON 파일이 다운로드됩니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-20-HowtouseFirebaseCloudMessagingAPIHTTPV1inFlutter_3.png\" alt=\"이미지\"></p>\n<p>이를 리포지토리에 복사하여 붙여넣기하세요 (이 예시에서는 'data/your-key-from-cloud-console.json'에). pubspec.yaml에 에셋 경로를 추가하는 것을 잊지 마세요.</p>\n<h1>단계 3. 구글 API Auth 라이브러리 설치</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">flutter pub add googleapis_auth\n</code></pre>\n<h1>단계 4. 코드</h1>\n<p>기존의 HTTP 요청은 다음과 같았습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 더 이상 유효하지 않은 코드:</span>\n\nhttp.<span class=\"hljs-title function_\">post</span>(\n  <span class=\"hljs-title class_\">Uri</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-string\">'https://fcm.googleapis.com/fcm/send'</span>),\n  <span class=\"hljs-attr\">headers</span>: {\n    <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n    <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">'key=$fcmServerToken'</span>,\n  },\n  <span class=\"hljs-attr\">body</span>: body,\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>구글 API 인증 라이브러리를 사용해야 하는 새로운 유효한 코드입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:googleapis_auth/auth_io.dart'</span> <span class=\"hljs-keyword\">as</span> auth;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:convert'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/services.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:developer'</span> <span class=\"hljs-keyword\">as</span> devtools show log;\n\n<span class=\"hljs-title class_\">Future</span>&#x3C;bool> <span class=\"hljs-title function_\">sendPushMessage</span>({\n  required <span class=\"hljs-title class_\">String</span> recipientToken,\n  required <span class=\"hljs-title class_\">String</span> title,\n  required <span class=\"hljs-title class_\">String</span> body,\n}) <span class=\"hljs-keyword\">async</span> {\n  final jsonCredentials = <span class=\"hljs-keyword\">await</span> rootBundle\n      .<span class=\"hljs-title function_\">loadString</span>(<span class=\"hljs-string\">'data/your-key-from-cloud-console.json'</span>);\n  final creds = auth.<span class=\"hljs-property\">ServiceAccountCredentials</span>.<span class=\"hljs-title function_\">fromJson</span>(jsonCredentials);\n\n  final client = <span class=\"hljs-keyword\">await</span> auth.<span class=\"hljs-title function_\">clientViaServiceAccount</span>(\n    creds,\n    [<span class=\"hljs-string\">'https://www.googleapis.com/auth/cloud-platform'</span>],\n  );\n\n  final notificationData = {\n    <span class=\"hljs-string\">'message'</span>: {\n      <span class=\"hljs-string\">'token'</span>: recipientToken,\n      <span class=\"hljs-string\">'notification'</span>: {<span class=\"hljs-string\">'title'</span>: title, <span class=\"hljs-string\">'body'</span>: body}\n    },\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> senderId = <span class=\"hljs-string\">'736705283357'</span>;\n  final response = <span class=\"hljs-keyword\">await</span> client.<span class=\"hljs-title function_\">post</span>(\n    <span class=\"hljs-title class_\">Uri</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-string\">'https://fcm.googleapis.com/v1/projects/$senderId/messages:send'</span>),\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">'content-type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n    },\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title function_\">jsonEncode</span>(notificationData),\n  );\n\n  client.<span class=\"hljs-title function_\">close</span>();\n  <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-property\">statusCode</span> == <span class=\"hljs-number\">200</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Success!</span>\n  }\n\n  devtools.<span class=\"hljs-title function_\">log</span>(\n      <span class=\"hljs-string\">'Notification Sending Error Response status: ${response.statusCode}'</span>);\n  devtools.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Notification Response body: ${response.body}'</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<p>감사합니다! 이 스토리가 유용하다면 왼쪽에 50개의 박수를 남겨주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}