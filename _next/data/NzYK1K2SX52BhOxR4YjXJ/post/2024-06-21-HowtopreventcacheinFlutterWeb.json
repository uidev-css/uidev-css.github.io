{"pageProps":{"post":{"title":"Flutter 웹에서 캐시를 방지하는 방법","description":"","date":"2024-06-21 22:25","slug":"2024-06-21-HowtopreventcacheinFlutterWeb","content":"\n\n![이미지](/assets/img/2024-06-21-HowtopreventcacheinFlutterWeb_0.png)\n\n안녕하세요, 개발자님. 잘 지내시나요? 오늘의 주제는 조금 복잡할 수 있지만 걱정하지 마세요, 5분 안에 해결할 수 있을 거예요 :) 항상처럼 우리의 해결책은 간단하고 효과적입니다!\n\n## 질문 1: 캐시란 무엇이며 브라우저가 캐시를 저장하는 이유는 무엇인가요?\n\n- 브라우저 캐시는 웹 페이지, 이미지, 스크립트 등이 임시로 저장되는 장소로, 웹 브라우저가 여러분의 기기에 저장합니다. 웹 사이트를 방문하면 브라우저가 HTML, CSS, JavaScript 및 이미지와 같은 파일을 다운로드합니다. 매번 다운로드하는 대신 브라우저는 그 사본을 캐시에 저장합니다. 사이트를 재방문하면 브라우저가 파일 확인을 캐시에서 합니다. 그 파일들이 존재하고 유효 기간이 지나지 않았다면, 브라우저는 캐시에서 그 파일을 검색하여 페이지 로딩 속도를 높입니다.\n\n<div class=\"content-ad\"></div>\n\n## 질문 2: 사람들이 캐시를 막거나 비활성화하려는 이유는 무엇인가요?\n\n- 때로는 모든 콘텐츠(이미지 및 스타일 시트와 같은 리소스)가 매번 새로 고쳐져야 하는 중요성이 커질 수 있습니다. 놀랍게도 이러한 요소들은 특정 시나리오에서 중요할 수 있습니다.\n\n이제 캐시에 대해 알았으니, 이어서 Flutter Web의 해결책을 살펴보겠습니다.\n\n해결책은 간단합니다. Flutter Web에서 캐시 문제는 web/index.html 파일에 있는 main.dart.js라는 스크립트에서 발생합니다. 이를 해결하기 위해 이 스크립트 끝에 숫자나 변수를 추가하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n우연히 손으로 매번 값 변경하거나 증가시키는 것을 피하기 위해 플러터는 index.html 파일에 \"serviceWorkerVersion\"이라는 미리 정의된 값을 제공합니다. 이 값을 수동으로 수정하는 대신 이 값을 사용할 수 있습니다.\n\n플러터가 제공하는 \"serviceWorkerVersion\"을 사용하면 버전을 수동으로 갱신하는 대신 자동으로 증가되는 동적 해결책을 얻을 수 있습니다.\n\n먼저 프로젝트로 이동하여 web/index.html 파일을 찾아보세요. 파일을 찾았다면, 이 페이지로 돌아와 다음 중 하나의 해결책을 적용하세요.\n\n## Case 1: Flutter의 새로운 버전\n\n<div class=\"content-ad\"></div>\n\n만약 새로운 Flutter 버전에서 캐시 문제를 방지해야 한다면, 몇 가지 스크립트를 수정해야 합니다. \"main.dart.js\" 스크립트는 기본적으로 존재하지 않기 때문에 직접 추가해야 합니다.\n\n\" _flutter.loader.loadEntrypoint\"를 수정하고 추가 매개변수를 넣어야 합니다: \"entrypointUrl: \"main.dart.js?v=\" + serviceWorkerVersion\" \n\n최종적으로는 아래와 같이 스크립트 부분이 보여야 합니다:\n\n```js\n<script>\n    window.addEventListener('load', function (ev) {\n      // Download main.dart.js\n      _flutter.loader.loadEntrypoint({\n        entrypointUrl: \"main.dart.js?v=\" + serviceWorkerVersion,\n        serviceWorker: {\n          serviceWorkerVersion: serviceWorkerVersion,\n        }\n      }).then(function (engineInitializer) {\n        return engineInitializer.initializeEngine();\n      }).then(function (appRunner) {\n        return appRunner.runApp();\n      });\n    });\n  </script>\n```\n\n<div class=\"content-ad\"></div>\n\n이 작은 추가로 문제가 해결되었습니다! :)\n\n## 케이스 2: Flutter의 이전 버전\n\n이전 버전의 Flutter에서 캐시 문제를 방지해야하는 경우, web/index.html의 “scriptTag.src” 값이 다음과 같이 수정되어야 합니다: “scriptTag.src = ‘main.dart.js?v=’ + serviceWorkerVersion;”.\n\n결국, 스크립트 섹션은 다음과 같이 보여야 합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n<script>\n    var serviceWorkerVersion = null;\n    var scriptLoaded = false;\n    function loadMainDartJs() {\n      if (scriptLoaded) {\n        return;\n      }\n      scriptLoaded = true;\n      var scriptTag = document.createElement('script');\n      scriptTag.src = 'main.dart.js?v=' + serviceWorkerVersion;\n      scriptTag.type = 'application/javascript';\n      document.body.append(scriptTag);\n    }\n\n    if ('serviceWorker' in navigator) {\n      // Service workers are supported. Use them.\n      window.addEventListener('load', function () {\n        // Wait for registration to finish before dropping the <script> tag.\n        // Otherwise, the browser will load the script multiple times,\n        // potentially different versions.\n        var serviceWorkerUrl = 'flutter_service_worker.js?v=' + serviceWorkerVersion;\n        navigator.serviceWorker.register(serviceWorkerUrl)\n          .then((reg) => {\n            function waitForActivation(serviceWorker) {\n              serviceWorker.addEventListener('statechange', () => {\n                if (serviceWorker.state == 'activated') {\n                  console.log('Installed new service worker.');\n                  loadMainDartJs();\n                }\n              });\n            }\n            if (!reg.active && (reg.installing || reg.waiting)) {\n              // No active web worker and we have installed or are installing\n              // one for the first time. Simply wait for it to activate.\n              waitForActivation(reg.installing || reg.waiting);\n            } else if (!reg.active.scriptURL.endsWith(serviceWorkerVersion)) {\n              // When the app updates the serviceWorkerVersion changes, so we\n              // need to ask the service worker to update.\n              console.log('New service worker available.');\n              reg.update();\n              waitForActivation(reg.installing);\n            } else {\n              // Existing service worker is still good.\n              console.log('Loading app from service worker.');\n              loadMainDartJs();\n            }\n          });\n\n        // If service worker doesn't succeed in a reasonable amount of time,\n        // fallback to plaint <script> tag.\n        setTimeout(() => {\n          if (!scriptLoaded) {\n            console.warn(\n              'service worker disabled...',\n            );\n            loadMainDartJs();\n          }\n        }, 4000);\n      });\n    } else {\n      // Service workers not supported. Just drop the <script> tag.\n      loadMainDartJs();\n    }\n  </script>\n```\n\nWith this small change, the problem is solved! :)\n\nIn this way, we have seen how to prevent the \"Cache\" problem in Flutter with simple solutions. I hope these solutions have been helpful to you.\n\nIf you have read this article and would like to support me, don't be shy — buy me a coffee! :) ☕☕☕\n\n\n<div class=\"content-ad\"></div>\n\n커피 사줄래?\n\n제가 이 글을 쓰는 데 도움이 된 몇 가지 링크가 있어요. 꼭 확인해 보세요!\n\n- 문제 1 (반드시 확인해보세요!)\n- 스택 오버플로우 1\n- 스택 오버플로우 2\n- 스택 오버플로우 3\n\n이 글을 읽어 주셔서 감사합니다. 추가 질문이 있으시면 언제든지 댓글을 남겨 주세요. 그리고 박수 버튼 꾹 눌러주세요 :) 다음에 또 봐요, 개발자님 :)","ogImage":{"url":"/assets/img/2024-06-21-HowtopreventcacheinFlutterWeb_0.png"},"coverImage":"/assets/img/2024-06-21-HowtopreventcacheinFlutterWeb_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-HowtopreventcacheinFlutterWeb_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요, 개발자님. 잘 지내시나요? 오늘의 주제는 조금 복잡할 수 있지만 걱정하지 마세요, 5분 안에 해결할 수 있을 거예요 :) 항상처럼 우리의 해결책은 간단하고 효과적입니다!</p>\n<h2>질문 1: 캐시란 무엇이며 브라우저가 캐시를 저장하는 이유는 무엇인가요?</h2>\n<ul>\n<li>브라우저 캐시는 웹 페이지, 이미지, 스크립트 등이 임시로 저장되는 장소로, 웹 브라우저가 여러분의 기기에 저장합니다. 웹 사이트를 방문하면 브라우저가 HTML, CSS, JavaScript 및 이미지와 같은 파일을 다운로드합니다. 매번 다운로드하는 대신 브라우저는 그 사본을 캐시에 저장합니다. 사이트를 재방문하면 브라우저가 파일 확인을 캐시에서 합니다. 그 파일들이 존재하고 유효 기간이 지나지 않았다면, 브라우저는 캐시에서 그 파일을 검색하여 페이지 로딩 속도를 높입니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h2>질문 2: 사람들이 캐시를 막거나 비활성화하려는 이유는 무엇인가요?</h2>\n<ul>\n<li>때로는 모든 콘텐츠(이미지 및 스타일 시트와 같은 리소스)가 매번 새로 고쳐져야 하는 중요성이 커질 수 있습니다. 놀랍게도 이러한 요소들은 특정 시나리오에서 중요할 수 있습니다.</li>\n</ul>\n<p>이제 캐시에 대해 알았으니, 이어서 Flutter Web의 해결책을 살펴보겠습니다.</p>\n<p>해결책은 간단합니다. Flutter Web에서 캐시 문제는 web/index.html 파일에 있는 main.dart.js라는 스크립트에서 발생합니다. 이를 해결하기 위해 이 스크립트 끝에 숫자나 변수를 추가하면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>우연히 손으로 매번 값 변경하거나 증가시키는 것을 피하기 위해 플러터는 index.html 파일에 \"serviceWorkerVersion\"이라는 미리 정의된 값을 제공합니다. 이 값을 수동으로 수정하는 대신 이 값을 사용할 수 있습니다.</p>\n<p>플러터가 제공하는 \"serviceWorkerVersion\"을 사용하면 버전을 수동으로 갱신하는 대신 자동으로 증가되는 동적 해결책을 얻을 수 있습니다.</p>\n<p>먼저 프로젝트로 이동하여 web/index.html 파일을 찾아보세요. 파일을 찾았다면, 이 페이지로 돌아와 다음 중 하나의 해결책을 적용하세요.</p>\n<h2>Case 1: Flutter의 새로운 버전</h2>\n<div class=\"content-ad\"></div>\n<p>만약 새로운 Flutter 버전에서 캐시 문제를 방지해야 한다면, 몇 가지 스크립트를 수정해야 합니다. \"main.dart.js\" 스크립트는 기본적으로 존재하지 않기 때문에 직접 추가해야 합니다.</p>\n<p>\" _flutter.loader.loadEntrypoint\"를 수정하고 추가 매개변수를 넣어야 합니다: \"entrypointUrl: \"main.dart.js?v=\" + serviceWorkerVersion\"</p>\n<p>최종적으로는 아래와 같이 스크립트 부분이 보여야 합니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;script>\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ev</span>) {\n      <span class=\"hljs-comment\">// Download main.dart.js</span>\n      _flutter.<span class=\"hljs-property\">loader</span>.<span class=\"hljs-title function_\">loadEntrypoint</span>({\n        <span class=\"hljs-attr\">entrypointUrl</span>: <span class=\"hljs-string\">\"main.dart.js?v=\"</span> + serviceWorkerVersion,\n        <span class=\"hljs-attr\">serviceWorker</span>: {\n          <span class=\"hljs-attr\">serviceWorkerVersion</span>: serviceWorkerVersion,\n        }\n      }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">engineInitializer</span>) {\n        <span class=\"hljs-keyword\">return</span> engineInitializer.<span class=\"hljs-title function_\">initializeEngine</span>();\n      }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">appRunner</span>) {\n        <span class=\"hljs-keyword\">return</span> appRunner.<span class=\"hljs-title function_\">runApp</span>();\n      });\n    });\n  &#x3C;/script>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 작은 추가로 문제가 해결되었습니다! :)</p>\n<h2>케이스 2: Flutter의 이전 버전</h2>\n<p>이전 버전의 Flutter에서 캐시 문제를 방지해야하는 경우, web/index.html의 “scriptTag.src” 값이 다음과 같이 수정되어야 합니다: “scriptTag.src = ‘main.dart.js?v=’ + serviceWorkerVersion;”.</p>\n<p>결국, 스크립트 섹션은 다음과 같이 보여야 합니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">&#x3C;script>\n    <span class=\"hljs-keyword\">var</span> serviceWorkerVersion = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">var</span> scriptLoaded = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadMainDartJs</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">if</span> (scriptLoaded) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      scriptLoaded = <span class=\"hljs-literal\">true</span>;\n      <span class=\"hljs-keyword\">var</span> scriptTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\n      scriptTag.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">'main.dart.js?v='</span> + serviceWorkerVersion;\n      scriptTag.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">'application/javascript'</span>;\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">append</span>(scriptTag);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'serviceWorker'</span> <span class=\"hljs-keyword\">in</span> navigator) {\n      <span class=\"hljs-comment\">// Service workers are supported. Use them.</span>\n      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-comment\">// Wait for registration to finish before dropping the &#x3C;script> tag.</span>\n        <span class=\"hljs-comment\">// Otherwise, the browser will load the script multiple times,</span>\n        <span class=\"hljs-comment\">// potentially different versions.</span>\n        <span class=\"hljs-keyword\">var</span> serviceWorkerUrl = <span class=\"hljs-string\">'flutter_service_worker.js?v='</span> + serviceWorkerVersion;\n        navigator.<span class=\"hljs-property\">serviceWorker</span>.<span class=\"hljs-title function_\">register</span>(serviceWorkerUrl)\n          .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">reg</span>) =></span> {\n            <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">waitForActivation</span>(<span class=\"hljs-params\">serviceWorker</span>) {\n              serviceWorker.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'statechange'</span>, <span class=\"hljs-function\">() =></span> {\n                <span class=\"hljs-keyword\">if</span> (serviceWorker.<span class=\"hljs-property\">state</span> == <span class=\"hljs-string\">'activated'</span>) {\n                  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Installed new service worker.'</span>);\n                  <span class=\"hljs-title function_\">loadMainDartJs</span>();\n                }\n              });\n            }\n            <span class=\"hljs-keyword\">if</span> (!reg.<span class=\"hljs-property\">active</span> &#x26;&#x26; (reg.<span class=\"hljs-property\">installing</span> || reg.<span class=\"hljs-property\">waiting</span>)) {\n              <span class=\"hljs-comment\">// No active web worker and we have installed or are installing</span>\n              <span class=\"hljs-comment\">// one for the first time. Simply wait for it to activate.</span>\n              <span class=\"hljs-title function_\">waitForActivation</span>(reg.<span class=\"hljs-property\">installing</span> || reg.<span class=\"hljs-property\">waiting</span>);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!reg.<span class=\"hljs-property\">active</span>.<span class=\"hljs-property\">scriptURL</span>.<span class=\"hljs-title function_\">endsWith</span>(serviceWorkerVersion)) {\n              <span class=\"hljs-comment\">// When the app updates the serviceWorkerVersion changes, so we</span>\n              <span class=\"hljs-comment\">// need to ask the service worker to update.</span>\n              <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'New service worker available.'</span>);\n              reg.<span class=\"hljs-title function_\">update</span>();\n              <span class=\"hljs-title function_\">waitForActivation</span>(reg.<span class=\"hljs-property\">installing</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n              <span class=\"hljs-comment\">// Existing service worker is still good.</span>\n              <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'Loading app from service worker.'</span>);\n              <span class=\"hljs-title function_\">loadMainDartJs</span>();\n            }\n          });\n\n        <span class=\"hljs-comment\">// If service worker doesn't succeed in a reasonable amount of time,</span>\n        <span class=\"hljs-comment\">// fallback to plaint &#x3C;script> tag.</span>\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n          <span class=\"hljs-keyword\">if</span> (!scriptLoaded) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(\n              <span class=\"hljs-string\">'service worker disabled...'</span>,\n            );\n            <span class=\"hljs-title function_\">loadMainDartJs</span>();\n          }\n        }, <span class=\"hljs-number\">4000</span>);\n      });\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Service workers not supported. Just drop the &#x3C;script> tag.</span>\n      <span class=\"hljs-title function_\">loadMainDartJs</span>();\n    }\n  &#x3C;/script>\n</code></pre>\n<p>With this small change, the problem is solved! :)</p>\n<p>In this way, we have seen how to prevent the \"Cache\" problem in Flutter with simple solutions. I hope these solutions have been helpful to you.</p>\n<p>If you have read this article and would like to support me, don't be shy — buy me a coffee! :) ☕☕☕</p>\n<div class=\"content-ad\"></div>\n<p>커피 사줄래?</p>\n<p>제가 이 글을 쓰는 데 도움이 된 몇 가지 링크가 있어요. 꼭 확인해 보세요!</p>\n<ul>\n<li>문제 1 (반드시 확인해보세요!)</li>\n<li>스택 오버플로우 1</li>\n<li>스택 오버플로우 2</li>\n<li>스택 오버플로우 3</li>\n</ul>\n<p>이 글을 읽어 주셔서 감사합니다. 추가 질문이 있으시면 언제든지 댓글을 남겨 주세요. 그리고 박수 버튼 꾹 눌러주세요 :) 다음에 또 봐요, 개발자님 :)</p>\n</body>\n</html>\n"},"__N_SSG":true}