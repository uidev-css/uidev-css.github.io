{"pageProps":{"post":{"title":"Flutter iOS  다양한 Firebase 설정으로 Flavors 설정하는 방법","description":"","date":"2024-06-21 21:47","slug":"2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig","content":"\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png)\n\n플레이버의 목적은 무엇인가요? 플레이버는 개발 및 프로덕션을 포함한 다양한 맥락에 맞춰 응용 프로그램을 사용자 정의하는 수단으로 작용합니다. 아래 예시를 살펴보겠습니다:\n\n- 개발 단계에서는 앱이 https://dev.mobileapp.com/v1/에 위치한 API 호스트와 com.mobileapp.dev 프로젝트 ID를 사용하여 연결을 설정하기를 원할 수 있습니다.\n- 반면, 앱을 릴리스할 때에는 프로덕션 버전이 https://api.mobileapp.com/v1/에 위치한 API 호스트와 com.mobileapp.prod 프로젝트 ID를 사용하여 연결해야 합니다.\n\n이러한 값을 변수로 직접 코딩하고 각 환경에 대해 별도의 앱 빌드를 생성하는 대신 플레이버를 활용하는 것이 권장됩니다. 플레이버를 사용하면 이러한 값을 빌드 시간 구성으로 제공하여 프로세스를 간소화할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 튜토리얼에서는 \"dev\"와 \"prod\" 두 가지 플레이버를 가진 샘플 애플리케이션을 생성하는 방법을 안내합니다. 각 단계마다 샘플 앱에 커밋이 이루어지며 코드 차이를 검토하고 적용된 수정 사항을 파악할 수 있게 됩니다.\n\n추가로, 기존 앱에 이 지침을 간편하게 적용할 수 있도록 상세한 지침을 제공할 것이며, 사용자 친화적인 경험을 보장할 것입니다.\n\n단계 1: Flutter 애플리케이션 프로젝트 생성\n\n단계 2: Firebase와 통합하도록 애플리케이션 구성\n\n<div class=\"content-ad\"></div>\n\n먼저, 개발 및 프로덕션을 위해 두 개의 별도 Firebase 프로젝트를 설정하세요. Firebase 콘솔 내에서 각 프로젝트에 대한 Android 애플리케이션을 생성해주세요. 개발 앱은 com.mobileapp.dev ID를, 프로덕션 앱은 com.mobileapp.prod ID를 갖고 있다고 가정합니다. 각 애플리케이션에 대한 GoogleServices-Info.plist 파일을 다운로드해주세요. Firebase를 Flutter 프로젝트에 통합하는 자세한 지침은 Firebase Flutter 설정 가이드를 참고하세요.\n\n![image1](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_1.png)\n\n그다음, 개발 및 프로덕션 애플리케이션을 위한 GoogleServices-Info.plist 파일을 ios/config/ 디렉토리 내의 별도 폴더로 복사해주세요.\n\n![image2](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_2.png)\n\n<div class=\"content-ad\"></div>\n\nStep 3: 루트 프로젝트 디렉토리에 다른 API 엔드포인트를 가리키도록 하는 2개의 구성 파일을 생성하세요.\n\n![dev.json](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_3.png)\n\n![dev.json](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_4.png)\n\n<div class=\"content-ad\"></div>\n\nprod.json\n\n![Flutter iOS Setup Flavors with different Firebase Config](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_5.png)\n\nStep 4: Create multiple Runner on XCode\n\nXCode에서 여러 Runner를 생성하려면\n\nXCode에서 ios 폴더를 열어주세요. ios 폴더를 우클릭하고 \"Xcode에서 열기\" 옵션을 선택하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_6.png\" />\n\nXcode는 제품 플레이버와 상응하는 스키마와 빌드 구성 개념을 소개합니다. 안드로이드에서 제품 플레이버에 해당하는 사용자 정의 스키마를 만들어봅시다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*OE7e4r2CbOJ1mue4mzfMTg.gif\" />\n\n그런 다음, Debug-Dev, Release-Dev 및 Profile-Dev로 명명된 3가지 구성을 생성합시다.\n\n<div class=\"content-ad\"></div>\n\n![Image](https://miro.medium.com/v2/resize:fit:1200/1*5KlPoqD-amdcgurzjTVulA.gif)\n\nWe also need to rename for prod build configuration\n\n![Image](https://miro.medium.com/v2/resize:fit:1200/1*74RaOwzLGWilIM5LkzVi1A.gif)\n\nOk, now let’s set Dev schemes by Dev build configuration\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*9FqzXYzM4USJiBaFjf3dbA.gif\" />\n\n- 플레이버에 기반한 번들 ID 설정\n\n이제 두 개의 스키마가 각각의 빌드 구성과 연결되었습니다. 이는 우리가 각 스키마에 맞도록 사용자 정의를 할 수 있게 해 줍니다. 시작하려면 어플리케이션 번들 식별자를 두 스키마 각각에 대해 고유하게 설정해 보겠습니다.\n\n타겟 섹션의 Runner를 클릭하여 `Build Settings`로 이동하고, 오른쪽 상단의 필터 필드에서 Bundle을 입력하여 모든 제품 번들 식별자를 채워주세요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_7.png)\n\n- 플레이버에 따라 AppName 설정하기\n\n앱에 다른 디스플레이 이름을 사용하고 싶습니다. 그러나 빌드 설정의 대상에는 디스플레이 이름 매개변수가 없습니다. 해결책으로 사용자 정의 매개변수를 생성하고 이를 디스플레이 이름 매개변수 대신 사용할 수 있습니다.\n\nBuild Settings에서 `Info`를 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n번들 디스플레이 이름을 $(APP_DISPLAY_NAME)으로 설정하세요.\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_8.png)\n\n빌드 설정으로 이동해서 `추가 버튼 (+)`을 클릭하고 사용자 정의 설정을 추가한 다음 APP_DISPLAY_NAME을 입력하세요.\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_9.png)\n\n<div class=\"content-ad\"></div>\n\n그리고 다음과 같이 설정하세요\n\n![image](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_10.png)\n\n- Runner에 config 폴더 추가하기\n\n마지막으로, 빌드 구성에 따라 다른 GoogleServices-Info.plist 파일을 활용하는 해결책을 찾아야 합니다. 몇 가지 제안은 Firebase 초기화 시에 원하는 구성 파일을 명시적으로 지정하여 런타임에서 처리하는 것을 제안합니다 (Firebase 문서에서 언급됨: https://firebase.google.com/docs/projects/multiprojects). 그러나 다른 옵션으로 저는 빌드 시 적절한 파일을 기본 위치로 복사하는 방법을 선호합니다. 이렇게 하면 앱 번들이 생성될 때 자동으로 올바른 파일을 사용하게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n위 작업을 수행하기 위해 먼저 각 flavor에 대한 GoogleServices-Info.plist 파일을 별도 폴더에 정리하고, Runner에 추가합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*x4yGjohfV_JUafeoPOw1Aw.gif)\n\n![image](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_11.png)\n\n- 빌드 단계에서 GoogleService-info.plist를 복사하는 Runnner 스크립트를 추가합니다.\n\n<div class=\"content-ad\"></div>\n\n다음으로는 빌드 프로세스에 단계를 추가하여 해당 GoogleServices-Info.plist 파일이 Runner 디렉토리 내의 적절한 위치로 복사되도록 하는 방법을 결정해야 합니다. 이것은 새로운 Run script Build Phase를 대상에 추가함으로써 달성할 수 있습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*TFJl5ZZVrS0f1gIuB3zajQ.gif)\n\n```js\nenvironment=\"default\"\n\n# 빌드 구성에서 스킴 이름을 추출하기 위한 정규식\n# 빌드 구성을 Debug-dev, Debug-prod 등과 같이 지정했습니다.\n# 여기서 dev와 prod는 스킴 이름입니다. Flutter에서 플레이버가 작동하려면 이러한 유형의 이름이 필요합니다.\n# 우리는 XCode 빌드 환경에서 사용 가능한 $CONFIGURATION 변수를 사용하여 환경(또는 플레이버)를 추출합니다.\n# 예를 들어\n# CONFIGURATION=\"Debug-prod\"인 경우, 환경은 \"prod\"로 설정됩니다.\nif [[ $CONFIGURATION =~ -([^-]*)$ ]]; then\n    environment=${BASH_REMATCH[1]}\nfi\n\necho $environment\n\n# 복사하는 리소스의 이름과 경로\nGOOGLESERVICE_INFO_PLIST=GoogleService-Info.plist\nGOOGLESERVICE_INFO_FILE=${PROJECT_DIR}/config/${environment}/${GOOGLESERVICE_INFO_PLIST}\n\n# GoogleService-Info.plist 파일이 존재하는지 확인\necho \"${GOOGLESERVICE_INFO_PLIST} 파일이 ${GOOGLESERVICE_INFO_FILE}에서 확인 중\"\nif [ ! -f $GOOGLESERVICE_INFO_FILE ]; then\n    echo \"GoogleService-Info.plist 파일을 찾을 수 없습니다. 올바른 디렉토리에 있는지 확인하세요.\"\n    exit 1\nfi\n\n# GoogleService-Info.plist의 대상 위치에 대한 참조 얻기\n# Firebase init 코드가 GoogleServices-Info.plist 파일을 찾을 기본 위치입니다.\nPLIST_DESTINATION=${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app\necho \"${GOOGLESERVICE_INFO_PLIST} 파일을 최종 대상지인 ${PLIST_DESTINATION}에 복사합니다.\"\n\n# 릴리스 빌드용 prod GoogleService-Info.plist를 복사합니다.\ncp \"${GOOGLESERVICE_INFO_FILE}\" \"${PLIST_DESTINATION}\"\n```\n\nStep 5: 플레이버를 기반으로 한 설정을 처리하는 몇 개의 Dart 파일을 생성하세요.\n\n<div class=\"content-ad\"></div>\n\nlib/utils/environment.dart\n\n```js\nabstract class Environment {\n  static const dev = 'dev';\n  static const prod = 'prod';\n}\n```\n\nlib/utils/config_reader.dart\n\n```js\nimport 'dart:convert';\nimport 'package:flutter/services.dart';\n\nabstract class ConfigReader {\n  static Map<String, dynamic>? _config;\n  static bool _isDevMode = false;\n\n  static Future<void> initialize(String env) async {\n    var configString = '{}';\n\n    try {\n      configString = await rootBundle.loadString('config/$env.json');\n    } catch (_) {\n      configString = await rootBundle.loadString('config/dev.json');\n    }\n\n    _config = json.decode(configString) as Map<String, dynamic>;\n    _isDevMode = env == \"dev\";\n  }\n\n  static bool isDevMode() {\n    return _isDevMode;\n  }\n\n  static String getBaseUrl() {\n    return _config!['baseUrl'] as String;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n6단계: 플레이버를 관리하기 위해 3개의 다른 주요 Dart 파일을 만듭니다.\n\nlib/main_dev.dart\n\n```js\nFuture<void> main() async {\n  await mainCommon(Environment.dev);\n}\n```\n\nlib/main_prod.dart\n\n<div class=\"content-ad\"></div>\n\n```js\nFuture<void> main() async {\n  await mainCommon(Environment.prod);\n}\n```\n\nlib/main_common.dart\n\n```js\nFuture<void> mainCommon(String env) async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await ConfigReader.initialize(env);\n  runApp(const MyApp());\n}\n```\n\nStep 6: 플레이버에 기반한 변수 가져오기\n\n<div class=\"content-ad\"></div>\n\nconfig에서 변수를 다음과 같이 가져올 수 있어요\n\n```js\ndebugShowCheckedModeBanner: ConfigReader.isDevMode(),\n```\n\n또한 연결 클래스 파일에 대한 base_url을 다음과 같이 가져올 수 있어요\n\n```js\nclass HttpGetConnect extends GetConnect {\n  final _baseUrl = ConfigReader.getBaseUrl();\n  static HttpGetConnect? _instance;\n  HttpGetConnect._internal() {\n    _instance = this;\n    httpClient.baseUrl = _baseUrl;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n7단계: VS code 런처 설정 추가하기\n\n.vscode/lunch.json을 생성하세요.\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_12.png)\n\nlaunch.json을 다음 코드로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  // 가능한 속성에 대해 알아보려면 IntelliSense를 사용하세요.\n  // 기존 속성에 대한 설명을 보려면 가리킬 수 있어요.\n  // 더 많은 정보는 여기를 참조하세요: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"[Debug] Development App\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"program\": \"lib/main_dev.dart\",\n      \"args\": [\"--flavor\", \"Dev\"]\n    },\n    {\n      \"name\": \"[Debug] Production App\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"program\": \"lib/main_prod.dart\",\n      \"args\": [\"--flavor\", \"Prod\"]\n    },\n    {\n      \"name\": \"[Release] Production App\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"flutterMode\": \"release\",\n      \"program\": \"lib/main_prod.dart\",\n      \"args\": [\"--flavor\", \"Prod\"]\n    }\n  ]\n}\n```\n\n그리고 이제 개발 flavor 또는 프로덕션 flavor를 사용하여 앱을 실행할 수 있어요\n\n![Flutter iOS Setup Flavors](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_13.png)\n\n그리고 여기 결과가 있어요\n\n<div class=\"content-ad\"></div>\n\n8단계: xcarchive 빌드하기\n\nXCode를 열고 Target Runners 'Signing & Capabilities'를 선택하여 Apple 개발자 계정이 이미 있는지 확인한 다음에 아래 스크립트를 실행하면 build/ios/ 폴더에 출력 파일이 생성됩니다.\n\n```js\nflutter build xcarchive --flavor prod -t lib/main_prod.dart\n```\n\nAndroid에서 플레이버 설정을 진행하시겠습니까? 다음 단계로 넘어가 보시겠습니까?\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_14.png)\n\nGithub 프로젝트\n\n[https://github.com/c0deslinger/flutter-learn-flavor](https://github.com/c0deslinger/flutter-learn-flavor)\n\n참고:\n\n<div class=\"content-ad\"></div>\n\nhttps://medium.com/flutter-community/flutter-ready-to-go-e59873f9d7de\n\nhttps://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b\n","ogImage":{"url":"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png"},"coverImage":"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_0.png\" alt=\"이미지\"></p>\n<p>플레이버의 목적은 무엇인가요? 플레이버는 개발 및 프로덕션을 포함한 다양한 맥락에 맞춰 응용 프로그램을 사용자 정의하는 수단으로 작용합니다. 아래 예시를 살펴보겠습니다:</p>\n<ul>\n<li>개발 단계에서는 앱이 <a href=\"https://dev.mobileapp.com/v1/%EC%97%90\" rel=\"nofollow\" target=\"_blank\">https://dev.mobileapp.com/v1/에</a> 위치한 API 호스트와 com.mobileapp.dev 프로젝트 ID를 사용하여 연결을 설정하기를 원할 수 있습니다.</li>\n<li>반면, 앱을 릴리스할 때에는 프로덕션 버전이 <a href=\"https://api.mobileapp.com/v1/%EC%97%90\" rel=\"nofollow\" target=\"_blank\">https://api.mobileapp.com/v1/에</a> 위치한 API 호스트와 com.mobileapp.prod 프로젝트 ID를 사용하여 연결해야 합니다.</li>\n</ul>\n<p>이러한 값을 변수로 직접 코딩하고 각 환경에 대해 별도의 앱 빌드를 생성하는 대신 플레이버를 활용하는 것이 권장됩니다. 플레이버를 사용하면 이러한 값을 빌드 시간 구성으로 제공하여 프로세스를 간소화할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>이 튜토리얼에서는 \"dev\"와 \"prod\" 두 가지 플레이버를 가진 샘플 애플리케이션을 생성하는 방법을 안내합니다. 각 단계마다 샘플 앱에 커밋이 이루어지며 코드 차이를 검토하고 적용된 수정 사항을 파악할 수 있게 됩니다.</p>\n<p>추가로, 기존 앱에 이 지침을 간편하게 적용할 수 있도록 상세한 지침을 제공할 것이며, 사용자 친화적인 경험을 보장할 것입니다.</p>\n<p>단계 1: Flutter 애플리케이션 프로젝트 생성</p>\n<p>단계 2: Firebase와 통합하도록 애플리케이션 구성</p>\n<div class=\"content-ad\"></div>\n<p>먼저, 개발 및 프로덕션을 위해 두 개의 별도 Firebase 프로젝트를 설정하세요. Firebase 콘솔 내에서 각 프로젝트에 대한 Android 애플리케이션을 생성해주세요. 개발 앱은 com.mobileapp.dev ID를, 프로덕션 앱은 com.mobileapp.prod ID를 갖고 있다고 가정합니다. 각 애플리케이션에 대한 GoogleServices-Info.plist 파일을 다운로드해주세요. Firebase를 Flutter 프로젝트에 통합하는 자세한 지침은 Firebase Flutter 설정 가이드를 참고하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_1.png\" alt=\"image1\"></p>\n<p>그다음, 개발 및 프로덕션 애플리케이션을 위한 GoogleServices-Info.plist 파일을 ios/config/ 디렉토리 내의 별도 폴더로 복사해주세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_2.png\" alt=\"image2\"></p>\n<div class=\"content-ad\"></div>\n<p>Step 3: 루트 프로젝트 디렉토리에 다른 API 엔드포인트를 가리키도록 하는 2개의 구성 파일을 생성하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_3.png\" alt=\"dev.json\"></p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_4.png\" alt=\"dev.json\"></p>\n<div class=\"content-ad\"></div>\n<p>prod.json</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_5.png\" alt=\"Flutter iOS Setup Flavors with different Firebase Config\"></p>\n<p>Step 4: Create multiple Runner on XCode</p>\n<p>XCode에서 여러 Runner를 생성하려면</p>\n<p>XCode에서 ios 폴더를 열어주세요. ios 폴더를 우클릭하고 \"Xcode에서 열기\" 옵션을 선택하면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_6.png\">\n<p>Xcode는 제품 플레이버와 상응하는 스키마와 빌드 구성 개념을 소개합니다. 안드로이드에서 제품 플레이버에 해당하는 사용자 정의 스키마를 만들어봅시다.</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*OE7e4r2CbOJ1mue4mzfMTg.gif\">\n<p>그런 다음, Debug-Dev, Release-Dev 및 Profile-Dev로 명명된 3가지 구성을 생성합시다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*5KlPoqD-amdcgurzjTVulA.gif\" alt=\"Image\"></p>\n<p>We also need to rename for prod build configuration</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*74RaOwzLGWilIM5LkzVi1A.gif\" alt=\"Image\"></p>\n<p>Ok, now let’s set Dev schemes by Dev build configuration</p>\n<div class=\"content-ad\"></div>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*9FqzXYzM4USJiBaFjf3dbA.gif\">\n<ul>\n<li>플레이버에 기반한 번들 ID 설정</li>\n</ul>\n<p>이제 두 개의 스키마가 각각의 빌드 구성과 연결되었습니다. 이는 우리가 각 스키마에 맞도록 사용자 정의를 할 수 있게 해 줍니다. 시작하려면 어플리케이션 번들 식별자를 두 스키마 각각에 대해 고유하게 설정해 보겠습니다.</p>\n<p>타겟 섹션의 Runner를 클릭하여 <code>Build Settings</code>로 이동하고, 오른쪽 상단의 필터 필드에서 Bundle을 입력하여 모든 제품 번들 식별자를 채워주세요.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_7.png\" alt=\"이미지\"></p>\n<ul>\n<li>플레이버에 따라 AppName 설정하기</li>\n</ul>\n<p>앱에 다른 디스플레이 이름을 사용하고 싶습니다. 그러나 빌드 설정의 대상에는 디스플레이 이름 매개변수가 없습니다. 해결책으로 사용자 정의 매개변수를 생성하고 이를 디스플레이 이름 매개변수 대신 사용할 수 있습니다.</p>\n<p>Build Settings에서 <code>Info</code>를 클릭하세요.</p>\n<div class=\"content-ad\"></div>\n<p>번들 디스플레이 이름을 $(APP_DISPLAY_NAME)으로 설정하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_8.png\" alt=\"이미지\"></p>\n<p>빌드 설정으로 이동해서 <code>추가 버튼 (+)</code>을 클릭하고 사용자 정의 설정을 추가한 다음 APP_DISPLAY_NAME을 입력하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_9.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>그리고 다음과 같이 설정하세요</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_10.png\" alt=\"image\"></p>\n<ul>\n<li>Runner에 config 폴더 추가하기</li>\n</ul>\n<p>마지막으로, 빌드 구성에 따라 다른 GoogleServices-Info.plist 파일을 활용하는 해결책을 찾아야 합니다. 몇 가지 제안은 Firebase 초기화 시에 원하는 구성 파일을 명시적으로 지정하여 런타임에서 처리하는 것을 제안합니다 (Firebase 문서에서 언급됨: <a href=\"https://firebase.google.com/docs/projects/multiprojects\" rel=\"nofollow\" target=\"_blank\">https://firebase.google.com/docs/projects/multiprojects</a>). 그러나 다른 옵션으로 저는 빌드 시 적절한 파일을 기본 위치로 복사하는 방법을 선호합니다. 이렇게 하면 앱 번들이 생성될 때 자동으로 올바른 파일을 사용하게 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>위 작업을 수행하기 위해 먼저 각 flavor에 대한 GoogleServices-Info.plist 파일을 별도 폴더에 정리하고, Runner에 추가합니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*x4yGjohfV_JUafeoPOw1Aw.gif\" alt=\"image\"></p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_11.png\" alt=\"image\"></p>\n<ul>\n<li>빌드 단계에서 GoogleService-info.plist를 복사하는 Runnner 스크립트를 추가합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>다음으로는 빌드 프로세스에 단계를 추가하여 해당 GoogleServices-Info.plist 파일이 Runner 디렉토리 내의 적절한 위치로 복사되도록 하는 방법을 결정해야 합니다. 이것은 새로운 Run script Build Phase를 대상에 추가함으로써 달성할 수 있습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*TFJl5ZZVrS0f1gIuB3zajQ.gif\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\">environment=<span class=\"hljs-string\">\"default\"</span>\n\n# 빌드 구성에서 스킴 이름을 추출하기 위한 정규식\n# 빌드 구성을 <span class=\"hljs-title class_\">Debug</span>-dev, <span class=\"hljs-title class_\">Debug</span>-prod 등과 같이 지정했습니다.\n# 여기서 dev와 prod는 스킴 이름입니다. <span class=\"hljs-title class_\">Flutter</span>에서 플레이버가 작동하려면 이러한 유형의 이름이 필요합니다.\n# 우리는 <span class=\"hljs-title class_\">XCode</span> 빌드 환경에서 사용 가능한 $CONFIGURATION 변수를 사용하여 환경(또는 플레이버)를 추출합니다.\n# 예를 들어\n# <span class=\"hljs-variable constant_\">CONFIGURATION</span>=<span class=\"hljs-string\">\"Debug-prod\"</span>인 경우, 환경은 <span class=\"hljs-string\">\"prod\"</span>로 설정됩니다.\n<span class=\"hljs-keyword\">if</span> [[ $CONFIGURATION =~ -([^-]*)$ ]]; then\n    environment=${<span class=\"hljs-variable constant_\">BASH_REMATCH</span>[<span class=\"hljs-number\">1</span>]}\nfi\n\necho $environment\n\n# 복사하는 리소스의 이름과 경로\n<span class=\"hljs-variable constant_\">GOOGLESERVICE_INFO_PLIST</span>=<span class=\"hljs-title class_\">GoogleService</span>-<span class=\"hljs-title class_\">Info</span>.<span class=\"hljs-property\">plist</span>\n<span class=\"hljs-variable constant_\">GOOGLESERVICE_INFO_FILE</span>=${<span class=\"hljs-variable constant_\">PROJECT_DIR</span>}/config/${environment}/${<span class=\"hljs-variable constant_\">GOOGLESERVICE_INFO_PLIST</span>}\n\n# <span class=\"hljs-title class_\">GoogleService</span>-<span class=\"hljs-title class_\">Info</span>.<span class=\"hljs-property\">plist</span> 파일이 존재하는지 확인\necho <span class=\"hljs-string\">\"${GOOGLESERVICE_INFO_PLIST} 파일이 ${GOOGLESERVICE_INFO_FILE}에서 확인 중\"</span>\n<span class=\"hljs-keyword\">if</span> [ ! -f $GOOGLESERVICE_INFO_FILE ]; then\n    echo <span class=\"hljs-string\">\"GoogleService-Info.plist 파일을 찾을 수 없습니다. 올바른 디렉토리에 있는지 확인하세요.\"</span>\n    exit <span class=\"hljs-number\">1</span>\nfi\n\n# <span class=\"hljs-title class_\">GoogleService</span>-<span class=\"hljs-title class_\">Info</span>.<span class=\"hljs-property\">plist</span>의 대상 위치에 대한 참조 얻기\n# <span class=\"hljs-title class_\">Firebase</span> init 코드가 <span class=\"hljs-title class_\">GoogleServices</span>-<span class=\"hljs-title class_\">Info</span>.<span class=\"hljs-property\">plist</span> 파일을 찾을 기본 위치입니다.\n<span class=\"hljs-variable constant_\">PLIST_DESTINATION</span>=${<span class=\"hljs-variable constant_\">BUILT_PRODUCTS_DIR</span>}/${<span class=\"hljs-variable constant_\">PRODUCT_NAME</span>}.<span class=\"hljs-property\">app</span>\necho <span class=\"hljs-string\">\"${GOOGLESERVICE_INFO_PLIST} 파일을 최종 대상지인 ${PLIST_DESTINATION}에 복사합니다.\"</span>\n\n# 릴리스 빌드용 prod <span class=\"hljs-title class_\">GoogleService</span>-<span class=\"hljs-title class_\">Info</span>.<span class=\"hljs-property\">plist</span>를 복사합니다.\ncp <span class=\"hljs-string\">\"${GOOGLESERVICE_INFO_FILE}\"</span> <span class=\"hljs-string\">\"${PLIST_DESTINATION}\"</span>\n</code></pre>\n<p>Step 5: 플레이버를 기반으로 한 설정을 처리하는 몇 개의 Dart 파일을 생성하세요.</p>\n<div class=\"content-ad\"></div>\n<p>lib/utils/environment.dart</p>\n<pre><code class=\"hljs language-js\">abstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Environment</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> dev = <span class=\"hljs-string\">'dev'</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> prod = <span class=\"hljs-string\">'prod'</span>;\n}\n</code></pre>\n<p>lib/utils/config_reader.dart</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:convert'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/services.dart'</span>;\n\nabstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConfigReader</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>? _config;\n  <span class=\"hljs-keyword\">static</span> bool _isDevMode = <span class=\"hljs-literal\">false</span>;\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-title class_\">String</span> env) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">var</span> configString = <span class=\"hljs-string\">'{}'</span>;\n\n    <span class=\"hljs-keyword\">try</span> {\n      configString = <span class=\"hljs-keyword\">await</span> rootBundle.<span class=\"hljs-title function_\">loadString</span>(<span class=\"hljs-string\">'config/$env.json'</span>);\n    } <span class=\"hljs-keyword\">catch</span> (_) {\n      configString = <span class=\"hljs-keyword\">await</span> rootBundle.<span class=\"hljs-title function_\">loadString</span>(<span class=\"hljs-string\">'config/dev.json'</span>);\n    }\n\n    _config = json.<span class=\"hljs-title function_\">decode</span>(configString) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>;\n    _isDevMode = env == <span class=\"hljs-string\">\"dev\"</span>;\n  }\n\n  <span class=\"hljs-keyword\">static</span> bool <span class=\"hljs-title function_\">isDevMode</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> _isDevMode;\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getBaseUrl</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> _config![<span class=\"hljs-string\">'baseUrl'</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">String</span>;\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>6단계: 플레이버를 관리하기 위해 3개의 다른 주요 Dart 파일을 만듭니다.</p>\n<p>lib/main_dev.dart</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">mainCommon</span>(<span class=\"hljs-title class_\">Environment</span>.<span class=\"hljs-property\">dev</span>);\n}\n</code></pre>\n<p>lib/main_prod.dart</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">mainCommon</span>(<span class=\"hljs-title class_\">Environment</span>.<span class=\"hljs-property\">prod</span>);\n}\n</code></pre>\n<p>lib/main_common.dart</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">mainCommon</span>(<span class=\"hljs-title class_\">String</span> env) <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">ConfigReader</span>.<span class=\"hljs-title function_\">initialize</span>(env);\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>());\n}\n</code></pre>\n<p>Step 6: 플레이버에 기반한 변수 가져오기</p>\n<div class=\"content-ad\"></div>\n<p>config에서 변수를 다음과 같이 가져올 수 있어요</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">debugShowCheckedModeBanner</span>: <span class=\"hljs-title class_\">ConfigReader</span>.<span class=\"hljs-title function_\">isDevMode</span>(),\n</code></pre>\n<p>또한 연결 클래스 파일에 대한 base_url을 다음과 같이 가져올 수 있어요</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpGetConnect</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">GetConnect</span> {\n  final _baseUrl = <span class=\"hljs-title class_\">ConfigReader</span>.<span class=\"hljs-title function_\">getBaseUrl</span>();\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">HttpGetConnect</span>? _instance;\n  <span class=\"hljs-title class_\">HttpGetConnect</span>.<span class=\"hljs-title function_\">_internal</span>(<span class=\"hljs-params\"></span>) {\n    _instance = <span class=\"hljs-variable language_\">this</span>;\n    httpClient.<span class=\"hljs-property\">baseUrl</span> = _baseUrl;\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>7단계: VS code 런처 설정 추가하기</p>\n<p>.vscode/lunch.json을 생성하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_12.png\" alt=\"이미지\"></p>\n<p>launch.json을 다음 코드로 변경하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-comment\">// 가능한 속성에 대해 알아보려면 IntelliSense를 사용하세요.</span>\n  <span class=\"hljs-comment\">// 기존 속성에 대한 설명을 보려면 가리킬 수 있어요.</span>\n  <span class=\"hljs-comment\">// 더 많은 정보는 여기를 참조하세요: https://go.microsoft.com/fwlink/?linkid=830387</span>\n  <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"0.2.0\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"configurations\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"[Debug] Development App\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"launch\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"program\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"lib/main_dev.dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"args\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"--flavor\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">\"Dev\"</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"[Debug] Production App\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"launch\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"program\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"lib/main_prod.dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"args\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"--flavor\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">\"Prod\"</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"[Release] Production App\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"launch\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"flutterMode\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"release\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"program\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"lib/main_prod.dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"args\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"--flavor\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">\"Prod\"</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>그리고 이제 개발 flavor 또는 프로덕션 flavor를 사용하여 앱을 실행할 수 있어요</p>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_13.png\" alt=\"Flutter iOS Setup Flavors\"></p>\n<p>그리고 여기 결과가 있어요</p>\n<div class=\"content-ad\"></div>\n<p>8단계: xcarchive 빌드하기</p>\n<p>XCode를 열고 Target Runners 'Signing &#x26; Capabilities'를 선택하여 Apple 개발자 계정이 이미 있는지 확인한 다음에 아래 스크립트를 실행하면 build/ios/ 폴더에 출력 파일이 생성됩니다.</p>\n<pre><code class=\"hljs language-js\">flutter build xcarchive --flavor prod -t lib/main_prod.<span class=\"hljs-property\">dart</span>\n</code></pre>\n<p>Android에서 플레이버 설정을 진행하시겠습니까? 다음 단계로 넘어가 보시겠습니까?</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-21-FlutteriOSSetupFlavorswithdifferentFirebaseConfig_14.png\" alt=\"이미지\"></p>\n<p>Github 프로젝트</p>\n<p><a href=\"https://github.com/c0deslinger/flutter-learn-flavor\" rel=\"nofollow\" target=\"_blank\">https://github.com/c0deslinger/flutter-learn-flavor</a></p>\n<p>참고:</p>\n<div class=\"content-ad\"></div>\n<p><a href=\"https://medium.com/flutter-community/flutter-ready-to-go-e59873f9d7de\" rel=\"nofollow\" target=\"_blank\">https://medium.com/flutter-community/flutter-ready-to-go-e59873f9d7de</a></p>\n<p><a href=\"https://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b\" rel=\"nofollow\" target=\"_blank\">https://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b</a></p>\n</body>\n</html>\n"},"__N_SSG":true}