{"pageProps":{"post":{"title":"Create React App CRA에서 Vite로 마이그레이션하는 가이드","description":"","date":"2024-06-23 15:09","slug":"2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite","content":"\n\n요즘 회사 내 보안 팀으로부터 웹 애플리케이션에서 발견된 모든 취약점을 가능한 한 빨리 해결하라는 안내를 받았어요.\n\nSynk 보고서를 열어 보니, react-scripts 패키지와 관련된 중요도가 중간부터 높음까지 다양한 취약점이 나열되어 있었어요. 이에 대한 의존성 업그레이드가 필요합니다. 저희 웹 애플리케이션은 2년 전에 나온 리액트 스크립트 버전인 5.0.1을 사용하고 있는데, 더 이상 관리되지 않고 있어요.\n\n그래서 의존성 버전을 덮어씌우는 대신 Vite을 사용해 보기로 결정했어요!\n\n![이미지](/assets/img/2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_0.png)\n\n<div class=\"content-ad\"></div>\n\nCRA에서 Vite로 웹 애플리케이션을 전환하는 과정에서 따라한 단계별 안내서를 확인해보세요.\n\n## 1. 의존성 설치 ⚡️\n\n가장 먼저, 여러 의존성을 설치해야 합니다.\n\n```js\nnpm install vite @vitejs/plugin-react vite-tsconfig-paths vite-plugin-svgr vite-plugin-commonjs --save-dev\n```\n\n<div class=\"content-ad\"></div>\n\n- vite\n- @vitejs/plugin-react\n- vite-tsconfig-paths\n\n- vite-plugin-svgr\n- vite-plugin-commonjs\n\n## 2. Create `vite.config.ts` ⚡️\n\n프로젝트 루트에 `vite.config.ts` 파일을 만드세요. 이 파일은 Vite가 프로젝트에서 작동하는 여러 측면을 제어하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport path from 'path';\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  base: './',\n  plugins: [\n    react(),\n  ],\n  server: {\n    open: true, // 브라우저에서 앱 자동으로 열기\n    port: 3000,\n  },\n  resolve: {\n    alias: {\n      screens: path.resolve(__dirname, './src/screens'),\n    },\n  },\n  build: {\n    outDir: 'build',\n  },\n});\n```\n\n각 구성 옵션을 살펴보겠습니다:\n\n- base: 이는 애플리케이션의 기본 URL을 설정합니다. 애플리케이션이 https://abc.com/portal/에 배포되었다면 base를 `/portal/`로 설정해야 합니다.\n- plugin: 이는 애플리케이션에 Vite 플러그인을 추가하는 것입니다. @vitejs/plugin-react에서 제공하는 React 플러그인은 JSX 및 기타 React 특정 기능을 처리하기 위해 필요합니다. 기타 선택적 플러그인으로는 commonjs(필요한 경우 CommonJS 모듈을 ES6 모듈로 변환), svgr(애플리케이션에 SVG가 있는 경우 React 컴포넌트로 직접 가져와야 함) 및 vite-tsconfig-paths(타입스크립트 경로 별칭을 해결하기 위해 사용) 등이 있습니다.\n\n```js\n// vite.config.ts\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport commonjs from 'vite-plugin-commonjs';\nimport svgr from 'vite-plugin-svgr';\nimport viteTsConfigPaths from 'vite-tsconfig-paths';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    viteTsConfigPaths(),\n    commonjs(),\n    svgr({\n      include: [\n        'src/**/*.svg',\n      ],\n    }),\n  ],\n});\n\n………………………………………………………………………………………………………………………………………………………………\n\n// SVG 파일을 React 컴포넌트로 가져와야 합니다:\n// Component.jsx\nimport Icon from './icon.svg?react'.\n\n………………………………………………………………………………………………………………………………………………………………\n\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"components/*\": [\"src/components/*\"],\n    }\n  }\n}\n\n// 상대 경로를 사용하여 모듈을 가져오는 대신\nimport Button from '../../components/Button';\n\n// 정의된 별칭을 사용할 수 있습니다\nimport Button from 'components/Button';\n```\n\n<div class=\"content-ad\"></div>\n\n- server: 개발 서버의 포트 번호를 구성하는 것입니다. 기본값은 포트 5173입니다.\n- resolve: 별칭을 사용하여 가져오기 경로를 간소화하는 것입니다.\n- build: Vite에서 빌드 프로세스를 사용자 정의하는 것입니다. 예를 들어, 출력 디렉토리의 이름을 설정하거나 CRA와 동일한 빌드 폴더를 유지하려면 build를 사용합니다. 기본값은 dist입니다. 또한 코드 분할을 구성할 수도 있습니다.\n\n```js\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  optimizeDeps: {\n    force: true,\n    esbuildOptions: {\n      loader: {\n        '.js': 'jsx',\n      },\n    },\n  },\n});\n```\n\n- OptimizeDeps: esbuild( Vite의 기본 번들러)를 사용하여 종속성의 사전 번들링을 구성하는 것입니다. force: true로 설정하면 Vite가 모든 개발 시작 시마다 종속성을 사전 번들링하여 항상 최신 상태를 유지하도록 합니다. 또한 loader: '`.js`: `jsx`'는 ESBuild가 JS 파일을 JSX 파일로 처리해야 함을 지정합니다. JS 파일에 JSX 구문이 포함되어 있는 경우 유용합니다.\n\n## 3. vite-env.d.ts 파일 생성 ⚡️\n\n<div class=\"content-ad\"></div>\n\n프로젝트 루트에 vite-env.d.ts라는 파일을 만들어주세요.\n\n```js\n// vite-env.d.ts\n/// <reference types=\"vite/client\" />\n```\n\n이 코드는 Vite의 전역 변수 및 클라이언트 특정 기능에 대한 타입 정의를 포함합니다. 이 파일은 사용자 정의 타입 및 모듈 선언에도 사용할 수 있으며 이는 TypeScript가 Vite 프로젝트의 다른 에셋 및 전역 변수를 처리하는 방법을 이해하는 데 도움이 됩니다.\n\n## 4. index.html 파일 업데이트 ⚡️\n\n<div class=\"content-ad\"></div>\n\n- public 폴더에서 index.html 파일을 루트 폴더로 이동하세요. CRA의 경우 index.html 파일은 public 폴더에 있어야 합니다. 그러나 Vite는 프로젝트의 루트에 이 파일이 있어야 합니다.\n- %PUBLIC_URL%을 삭제하세요. Vite는 정적 자산과 공개 경로를 다르게 처리하며 JavaScript 파일에서 자산을 직접 가져오거나 HTML에서 상대 경로를 사용할 수 있도록 해줍니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"robots\" content=\"noindex,nofollow\" />\n  <meta charset=\"utf-8\" />\n  <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.png\" />\n  <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n  <title>CRA</title>\n</head>\n\n<body>\n  <noscript>이 앱을 실행하려면 JavaScript를 활성화해야 합니다.</noscript>\n  <div id=\"root\"></div>\n  <script src=\"%PUBLIC_URL%/src/main.jsx\"></script>\n</body>\n</html>\n```\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta name=\"robots\" content=\"noindex,nofollow\" />\n  <meta charset=\"utf-8\" />\n  <link rel=\"icon\" href=\"/favicon.png\" />\n  <link rel=\"manifest\" href=\"/manifest.json\" />\n  <title>CRA</title>\n</head>\n\n<body>\n  <noscript>이 앱을 실행하려면 JavaScript를 활성화해야 합니다.</noscript>\n  <div id=\"root\"></div>\n  <script src=\"/src/main.jsx\"></script>\n</body>\n</html>\n```\n\n## 5. tsconfig.json 업데이트 ⚡️\n\n<div class=\"content-ad\"></div>\n\ntsconfig.json을 업데이트해야 합니다. 특히 target, types 및 lib을 수정해야 합니다.\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"types\": [\"vite/client\", \"vite-plugin-svgr/client\"],\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowImportingTsExtensions\": true,\n    \"jsx\": \"react-jsx\"\n  },\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n```\n\n## 6. 환경 변수 ⚡️\n\nVite 프로젝트에서 process.env.REACT_APP_에서 import.meta.env.VITE_로 모든 환경 변수를 이관해야 합니다. Vite에서는 import.meta.env를 사용하여 환경 변수에 액세스하며, 반드시 접두사 VITE_로 시작해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// CRA\nprocess.env.REACT_APP_API\n\n// Vite\nimport.meta.env.VITE_API\n\nconsole.log(import.meta.env) \n// { BASE_URL: '/', DEV: true, MODE: 'development', PROD: false, SSR: false }\n```\n\nimport.meta.env에는 BASE_URL, DEV, MODE, PROD 및 SSR과 같은 몇 가지 미리 정의된 환경 변수가 있습니다. Vite는 실행할 때 import.meta.env.MODE를 development로 자동 설정하며, vite build를 실행할 때는 production으로 설정합니다. 또한 Vite 명령을 실행할 때 필요에 따라 모드를 지정할 수 있습니다. 예를 들어 vite build --mode staging와 같이 실행할 수 있습니다.\n\n## 7. react-scripts 삭제하기 ⚡️\n\n단순히 Vite로 대체했으므로 react-scripts를 삭제하고, 만약 craco.config.js 또는 config-overrides.js가 있다면 삭제하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\r\nnpm uninstall react-scripts\r\n```\r\n\r\n## 8. 패키지.json 파일의 스크립트 업데이트 ⚡️\r\n\r\nreact-scripts 패키지를 제거한 후에는 스크립트를 vite를 사용하도록 업데이트해야 합니다.\r\n\r\n```js\r\n\"scripts\": {\r\n  \"start\": \"vite\",\r\n  \"build\": \"vite build\",\r\n  \"serve\": \"vite preview\"\r\n},\r\n```\n\n<div class=\"content-ad\"></div>\n\n## 9. 애플리케이션 실행 ⚡️\n\nnpm start으로 애플리케이션을 실행하세요. 브라우저에서 즉시 애플리케이션이 열리는 것을 보게 될 거에요!\n\n![2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_1](/assets/img/2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_1.png)\n\n또한 npm run build로 정적 빌드를 수행한 후, npx serve -s build를 실행하여 프로덕션 빌드를 로컬에서 테스트할 수 있어요. 😋\n\n<div class=\"content-ad\"></div>\n\n## 10. ESLint & Prettier 설정 ⚡️\n\nCRA 및 Vite는 동일한 ESLint 및 Prettier 구성을 사용할 수 있으며 이동이 거의 필요하지 않아야 합니다. 제 경우 eslint를 실행할 때 \"react-app\" 설정을 불러오지 못해 오류가 발생하며 다음 패키지를 설치하여 문제를 해결할 수 있습니다.\n\n```js\nnpm install eslint-config-react-app\n```\n\n## 오류 및 문제 해결 🔧\n\n<div class=\"content-ad\"></div>\n\nVite로 이주하면서 만난 몇 가지 오류와 내가 시도한 문제 해결 방법입니다.\n\n🔗 해결: 파일 형식을 .js에서 .jsx로 변경하고, 작동하지 않거나 영향을 받는 파일이 많은 경우, vite.config.js에 JS 파일을 JSX로 처리하는 구성을 추가합니다.\n\n🔗 해결: /src/assets/images/logo.svg?react로 대체하여 해결합니다. SVG를 React 컴포넌트로 변환하기 위해 vite.config.js에 이 플러그인을 추가해야 할 수 있습니다.\n\n🔗 해결: npm install vite-plugin-commonjs을 실행하고, vite.config.js에 이 플러그인을 추가하여 해결할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n🔗 솔루션: process.env를 import.meta.env로 교체하세요.\n\n🔗 솔루션: 이 설정을 구성했더니 작동했어요. 애플리케이션이 하위 디렉터리에 존재하는 경우에 대한 것입니다.\n\n## 결론\n\nCRA에서 Vite로 전환한 후, 웹 애플리케이션 개발 프로세스가 상당히 개선되었습니다.\n\n<div class=\"content-ad\"></div>\n\n- Development server startup: 부팅 시간이 대략 14초에서 단 1초로 줄었습니다.\n- NPM 설치: npm 설치 과정이 눈에 띄게 더 빨라져, 2분에서 1분 30초로 단축되었습니다.\n- 빌드 시간: 빌드 시간이 45초에서 22초로 줄었습니다.\n\n전체적으로, 마이그레이션에 만족하고 있습니다. 간단한데도 개발 경험을 더욱 원활하게 만들어주는 좋은 대안이라고 생각해요.","ogImage":{"url":"/assets/img/2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_0.png"},"coverImage":"/assets/img/2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘 회사 내 보안 팀으로부터 웹 애플리케이션에서 발견된 모든 취약점을 가능한 한 빨리 해결하라는 안내를 받았어요.</p>\n<p>Synk 보고서를 열어 보니, react-scripts 패키지와 관련된 중요도가 중간부터 높음까지 다양한 취약점이 나열되어 있었어요. 이에 대한 의존성 업그레이드가 필요합니다. 저희 웹 애플리케이션은 2년 전에 나온 리액트 스크립트 버전인 5.0.1을 사용하고 있는데, 더 이상 관리되지 않고 있어요.</p>\n<p>그래서 의존성 버전을 덮어씌우는 대신 Vite을 사용해 보기로 결정했어요!</p>\n<p><img src=\"/assets/img/2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_0.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>CRA에서 Vite로 웹 애플리케이션을 전환하는 과정에서 따라한 단계별 안내서를 확인해보세요.</p>\n<h2>1. 의존성 설치 ⚡️</h2>\n<p>가장 먼저, 여러 의존성을 설치해야 합니다.</p>\n<pre><code class=\"hljs language-js\">npm install vite @vitejs/plugin-react vite-tsconfig-paths vite-plugin-svgr vite-plugin-commonjs --save-dev\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>\n<p>vite</p>\n</li>\n<li>\n<p>@vitejs/plugin-react</p>\n</li>\n<li>\n<p>vite-tsconfig-paths</p>\n</li>\n<li>\n<p>vite-plugin-svgr</p>\n</li>\n<li>\n<p>vite-plugin-commonjs</p>\n</li>\n</ul>\n<h2>2. Create <code>vite.config.ts</code> ⚡️</h2>\n<p>프로젝트 루트에 <code>vite.config.ts</code> 파일을 만드세요. 이 파일은 Vite가 프로젝트에서 작동하는 여러 측면을 제어하는 데 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>;\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite'</span>;\n<span class=\"hljs-keyword\">import</span> react <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@vitejs/plugin-react'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">base</span>: <span class=\"hljs-string\">'./'</span>,\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-title function_\">react</span>(),\n  ],\n  <span class=\"hljs-attr\">server</span>: {\n    <span class=\"hljs-attr\">open</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 브라우저에서 앱 자동으로 열기</span>\n    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>,\n  },\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-attr\">alias</span>: {\n      <span class=\"hljs-attr\">screens</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">'./src/screens'</span>),\n    },\n  },\n  <span class=\"hljs-attr\">build</span>: {\n    <span class=\"hljs-attr\">outDir</span>: <span class=\"hljs-string\">'build'</span>,\n  },\n});\n</code></pre>\n<p>각 구성 옵션을 살펴보겠습니다:</p>\n<ul>\n<li>base: 이는 애플리케이션의 기본 URL을 설정합니다. 애플리케이션이 <a href=\"https://abc.com/portal/%EC%97%90\" rel=\"nofollow\" target=\"_blank\">https://abc.com/portal/에</a> 배포되었다면 base를 <code>/portal/</code>로 설정해야 합니다.</li>\n<li>plugin: 이는 애플리케이션에 Vite 플러그인을 추가하는 것입니다. @vitejs/plugin-react에서 제공하는 React 플러그인은 JSX 및 기타 React 특정 기능을 처리하기 위해 필요합니다. 기타 선택적 플러그인으로는 commonjs(필요한 경우 CommonJS 모듈을 ES6 모듈로 변환), svgr(애플리케이션에 SVG가 있는 경우 React 컴포넌트로 직접 가져와야 함) 및 vite-tsconfig-paths(타입스크립트 경로 별칭을 해결하기 위해 사용) 등이 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// vite.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite'</span>;\n<span class=\"hljs-keyword\">import</span> react <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@vitejs/plugin-react'</span>;\n<span class=\"hljs-keyword\">import</span> commonjs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite-plugin-commonjs'</span>;\n<span class=\"hljs-keyword\">import</span> svgr <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite-plugin-svgr'</span>;\n<span class=\"hljs-keyword\">import</span> viteTsConfigPaths <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite-tsconfig-paths'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-title function_\">react</span>(),\n    <span class=\"hljs-title function_\">viteTsConfigPaths</span>(),\n    <span class=\"hljs-title function_\">commonjs</span>(),\n    <span class=\"hljs-title function_\">svgr</span>({\n      <span class=\"hljs-attr\">include</span>: [\n        <span class=\"hljs-string\">'src/**/*.svg'</span>,\n      ],\n    }),\n  ],\n});\n\n………………………………………………………………………………………………………………………………………………………………\n\n<span class=\"hljs-comment\">// SVG 파일을 React 컴포넌트로 가져와야 합니다:</span>\n<span class=\"hljs-comment\">// Component.jsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Icon</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./icon.svg?react'</span>.\n\n………………………………………………………………………………………………………………………………………………………………\n\n<span class=\"hljs-comment\">// tsconfig.json</span>\n{\n  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-string\">\"paths\"</span>: {\n      <span class=\"hljs-string\">\"components/*\"</span>: [<span class=\"hljs-string\">\"src/components/*\"</span>],\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// 상대 경로를 사용하여 모듈을 가져오는 대신</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Button</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../components/Button'</span>;\n\n<span class=\"hljs-comment\">// 정의된 별칭을 사용할 수 있습니다</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Button</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'components/Button'</span>;\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>server: 개발 서버의 포트 번호를 구성하는 것입니다. 기본값은 포트 5173입니다.</li>\n<li>resolve: 별칭을 사용하여 가져오기 경로를 간소화하는 것입니다.</li>\n<li>build: Vite에서 빌드 프로세스를 사용자 정의하는 것입니다. 예를 들어, 출력 디렉토리의 이름을 설정하거나 CRA와 동일한 빌드 폴더를 유지하려면 build를 사용합니다. 기본값은 dist입니다. 또한 코드 분할을 구성할 수도 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vite'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">optimizeDeps</span>: {\n    <span class=\"hljs-attr\">force</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">esbuildOptions</span>: {\n      <span class=\"hljs-attr\">loader</span>: {\n        <span class=\"hljs-string\">'.js'</span>: <span class=\"hljs-string\">'jsx'</span>,\n      },\n    },\n  },\n});\n</code></pre>\n<ul>\n<li>OptimizeDeps: esbuild( Vite의 기본 번들러)를 사용하여 종속성의 사전 번들링을 구성하는 것입니다. force: true로 설정하면 Vite가 모든 개발 시작 시마다 종속성을 사전 번들링하여 항상 최신 상태를 유지하도록 합니다. 또한 loader: '<code>.js</code>: <code>jsx</code>'는 ESBuild가 JS 파일을 JSX 파일로 처리해야 함을 지정합니다. JS 파일에 JSX 구문이 포함되어 있는 경우 유용합니다.</li>\n</ul>\n<h2>3. vite-env.d.ts 파일 생성 ⚡️</h2>\n<div class=\"content-ad\"></div>\n<p>프로젝트 루트에 vite-env.d.ts라는 파일을 만들어주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// vite-env.d.ts</span>\n<span class=\"hljs-comment\">/// &#x3C;reference types=\"vite/client\" /></span>\n</code></pre>\n<p>이 코드는 Vite의 전역 변수 및 클라이언트 특정 기능에 대한 타입 정의를 포함합니다. 이 파일은 사용자 정의 타입 및 모듈 선언에도 사용할 수 있으며 이는 TypeScript가 Vite 프로젝트의 다른 에셋 및 전역 변수를 처리하는 방법을 이해하는 데 도움이 됩니다.</p>\n<h2>4. index.html 파일 업데이트 ⚡️</h2>\n<div class=\"content-ad\"></div>\n<ul>\n<li>public 폴더에서 index.html 파일을 루트 폴더로 이동하세요. CRA의 경우 index.html 파일은 public 폴더에 있어야 합니다. 그러나 Vite는 프로젝트의 루트에 이 파일이 있어야 합니다.</li>\n<li>%PUBLIC_URL%을 삭제하세요. Vite는 정적 자산과 공개 경로를 다르게 처리하며 JavaScript 파일에서 자산을 직접 가져오거나 HTML에서 상대 경로를 사용할 수 있도록 해줍니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"robots\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"noindex,nofollow\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/favicon.png\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"manifest\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/manifest.json\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>CRA<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">noscript</span>></span>이 앱을 실행하려면 JavaScript를 활성화해야 합니다.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">noscript</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"root\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"%PUBLIC_URL%/src/main.jsx\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"robots\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"noindex,nofollow\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/favicon.png\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"manifest\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/manifest.json\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>CRA<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">noscript</span>></span>이 앱을 실행하려면 JavaScript를 활성화해야 합니다.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">noscript</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"root\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/src/main.jsx\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></span>\n</code></pre>\n<h2>5. tsconfig.json 업데이트 ⚡️</h2>\n<div class=\"content-ad\"></div>\n<p>tsconfig.json을 업데이트해야 합니다. 특히 target, types 및 lib을 수정해야 합니다.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-string\">\"ESNext\"</span>,\n    <span class=\"hljs-string\">\"types\"</span>: [<span class=\"hljs-string\">\"vite/client\"</span>, <span class=\"hljs-string\">\"vite-plugin-svgr/client\"</span>],\n    <span class=\"hljs-string\">\"lib\"</span>: [<span class=\"hljs-string\">\"dom\"</span>, <span class=\"hljs-string\">\"dom.iterable\"</span>, <span class=\"hljs-string\">\"esnext\"</span>],\n    <span class=\"hljs-string\">\"allowJs\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"skipLibCheck\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"esModuleInterop\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"module\"</span>: <span class=\"hljs-string\">\"esnext\"</span>,\n    <span class=\"hljs-string\">\"moduleResolution\"</span>: <span class=\"hljs-string\">\"node\"</span>,\n    <span class=\"hljs-string\">\"resolveJsonModule\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"isolatedModules\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"noEmit\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"noFallthroughCasesInSwitch\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"allowImportingTsExtensions\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"jsx\"</span>: <span class=\"hljs-string\">\"react-jsx\"</span>\n  },\n  <span class=\"hljs-string\">\"exclude\"</span>: [\n    <span class=\"hljs-string\">\"node_modules\"</span>\n  ]\n}\n</code></pre>\n<h2>6. 환경 변수 ⚡️</h2>\n<p>Vite 프로젝트에서 process.env.REACT_APP_에서 import.meta.env.VITE_로 모든 환경 변수를 이관해야 합니다. Vite에서는 import.meta.env를 사용하여 환경 변수에 액세스하며, 반드시 접두사 VITE_로 시작해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// CRA</span>\nprocess.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">REACT_APP_API</span>\n\n<span class=\"hljs-comment\">// Vite</span>\n<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">VITE_API</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">env</span>) \n<span class=\"hljs-comment\">// { BASE_URL: '/', DEV: true, MODE: 'development', PROD: false, SSR: false }</span>\n</code></pre>\n<p>import.meta.env에는 BASE_URL, DEV, MODE, PROD 및 SSR과 같은 몇 가지 미리 정의된 환경 변수가 있습니다. Vite는 실행할 때 import.meta.env.MODE를 development로 자동 설정하며, vite build를 실행할 때는 production으로 설정합니다. 또한 Vite 명령을 실행할 때 필요에 따라 모드를 지정할 수 있습니다. 예를 들어 vite build --mode staging와 같이 실행할 수 있습니다.</p>\n<h2>7. react-scripts 삭제하기 ⚡️</h2>\n<p>단순히 Vite로 대체했으므로 react-scripts를 삭제하고, 만약 craco.config.js 또는 config-overrides.js가 있다면 삭제하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">npm uninstall react-scripts\n</code></pre>\n<h2>8. 패키지.json 파일의 스크립트 업데이트 ⚡️</h2>\n<p>react-scripts 패키지를 제거한 후에는 스크립트를 vite를 사용하도록 업데이트해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"scripts\"</span>: {\r\n  <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"vite\"</span>,\r\n  <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"vite build\"</span>,\r\n  <span class=\"hljs-string\">\"serve\"</span>: <span class=\"hljs-string\">\"vite preview\"</span>\r\n},\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>9. 애플리케이션 실행 ⚡️</h2>\n<p>npm start으로 애플리케이션을 실행하세요. 브라우저에서 즉시 애플리케이션이 열리는 것을 보게 될 거에요!</p>\n<p><img src=\"/assets/img/2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_1.png\" alt=\"2024-06-23-GuidetomigratingfromCreateReactAppCRAtoVite_1\"></p>\n<p>또한 npm run build로 정적 빌드를 수행한 후, npx serve -s build를 실행하여 프로덕션 빌드를 로컬에서 테스트할 수 있어요. 😋</p>\n<div class=\"content-ad\"></div>\n<h2>10. ESLint &#x26; Prettier 설정 ⚡️</h2>\n<p>CRA 및 Vite는 동일한 ESLint 및 Prettier 구성을 사용할 수 있으며 이동이 거의 필요하지 않아야 합니다. 제 경우 eslint를 실행할 때 \"react-app\" 설정을 불러오지 못해 오류가 발생하며 다음 패키지를 설치하여 문제를 해결할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">npm install eslint-config-react-app\n</code></pre>\n<h2>오류 및 문제 해결 🔧</h2>\n<div class=\"content-ad\"></div>\n<p>Vite로 이주하면서 만난 몇 가지 오류와 내가 시도한 문제 해결 방법입니다.</p>\n<p>🔗 해결: 파일 형식을 .js에서 .jsx로 변경하고, 작동하지 않거나 영향을 받는 파일이 많은 경우, vite.config.js에 JS 파일을 JSX로 처리하는 구성을 추가합니다.</p>\n<p>🔗 해결: /src/assets/images/logo.svg?react로 대체하여 해결합니다. SVG를 React 컴포넌트로 변환하기 위해 vite.config.js에 이 플러그인을 추가해야 할 수 있습니다.</p>\n<p>🔗 해결: npm install vite-plugin-commonjs을 실행하고, vite.config.js에 이 플러그인을 추가하여 해결할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>🔗 솔루션: process.env를 import.meta.env로 교체하세요.</p>\n<p>🔗 솔루션: 이 설정을 구성했더니 작동했어요. 애플리케이션이 하위 디렉터리에 존재하는 경우에 대한 것입니다.</p>\n<h2>결론</h2>\n<p>CRA에서 Vite로 전환한 후, 웹 애플리케이션 개발 프로세스가 상당히 개선되었습니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Development server startup: 부팅 시간이 대략 14초에서 단 1초로 줄었습니다.</li>\n<li>NPM 설치: npm 설치 과정이 눈에 띄게 더 빨라져, 2분에서 1분 30초로 단축되었습니다.</li>\n<li>빌드 시간: 빌드 시간이 45초에서 22초로 줄었습니다.</li>\n</ul>\n<p>전체적으로, 마이그레이션에 만족하고 있습니다. 간단한데도 개발 경험을 더욱 원활하게 만들어주는 좋은 대안이라고 생각해요.</p>\n</body>\n</html>\n"},"__N_SSG":true}