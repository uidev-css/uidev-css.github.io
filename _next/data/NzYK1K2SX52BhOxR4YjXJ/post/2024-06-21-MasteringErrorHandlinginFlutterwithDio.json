{"pageProps":{"post":{"title":"Dio로 Flutter에서 에러 핸들링 마스터하는 방법","description":"","date":"2024-06-21 22:06","slug":"2024-06-21-MasteringErrorHandlinginFlutterwithDio","content":"\n\n에러 처리를 설명하며 예외를 설명하는 가장 좋은 방법\n\n![마스터링 플러터에서 Dio를 사용한 에러 처리](/assets/img/2024-06-21-MasteringErrorHandlinginFlutterwithDio_0.png)\n\n소개:\n모바일 앱 개발에서 에러를 우아하게 처리하는 것은 부드럽고 사용자 친화적인 경험을 제공하는 데 중요합니다. 플러터(Flutter)를 사용할 때 Dio는 강력한 HTTP 클라이언트 라이브러리로 네트워크 요청 중 에러를 처리하는 강력한 메커니즘을 제공합니다. 이 글에서는 Dio를 사용하여 플러터에서 에러를 효과적으로 처리하는 방법을 살펴보겠습니다. 이를 통해 앱이 신뢰성 있고 사용자 친화적인 상태를 유지할 수 있습니다.\n\n1. Dio 소개:\nDio는 플러터 애플리케이션에서 HTTP 요청을 간단히 만들어주는 다양한 기능을 제공하는 다재다능한 패키지입니다. 취소, 인터셉터, 요청/응답 변환 및 에러 처리와 같은 기능을 제공합니다. 에러 처리는 네트워크 통신의 중요한 측면으로, 인터넷 연결 없음, 서버 에러 등과 같은 시나리오를 처리하도록 앱을 도와줍니다.\n\n<div class=\"content-ad\"></div>\n\n2. Dio Configuration 및 인스턴스 생성:\n에러 처리에 들어가기 전에 Dio 설정을 위해 적절한 구성으로 인스턴스를 만들어보겠습니다. 타임아웃, 기본 URL 및 다른 설정을 정의하여 Dio를 앱에 맞게 사용할 수 있습니다.\n\n3. Interceptors를 사용한 전역 에러 처리:\n\n```js\nconst String APPLICATION_JSON = \"application/json\";\nconst String CONTENT_TYPE = \"content-type\";\nconst String ACCEPT = \"accept\";\nconst String AUTHORIZATION = \"authorization\";\nconst String DEFAULT_LANGUAGE = \"en\";\nconst String TOKEN = \"token\";\nconst String BASE_URL = \"https://api.example.com\";\n\nclass DioFactory {\n\n  Future<Dio> getDio() async {\n    Dio dio = Dio();\n\n    Map<String, String> headers = {\n      CONTENT_TYPE: APPLICATION_JSON,\n      ACCEPT: APPLICATION_JSON,\n      AUTHORIZATION: TOKEN,\n      DEFAULT_LANGUAGE: DEFAULT_LANGUAGE\n    };\n\n    dio.options = BaseOptions(\n        baseUrl: BASE_URL,\n        headers: headers,\n        receiveTimeout: Constants.apiTimeOut,\n        sendTimeout: Constants.apiTimeOut,\n    );\n\n    if (!kReleaseMode) {\n      dio.interceptors.add(PrettyDioLogger(\n        requestHeader: true,\n        requestBody: true,\n        responseHeader: true,\n      ));\n    }\n\n    return dio;\n  }\n}\n```\n\n3. DataSource enum:\n다양한 데이터 소스를 정의하는 열거형입니다. 각각이 특정 유형의 실패와 연관되며 오류 유형을 실패 응답과 매핑하는 데 사용됩니다.\n\n```js\nenum DataSource {\n  SUCCESS,\n  NO_CONTENT,\n  BAD_REQUEST,\n  FORBIDDEN,\n  UNAUTORISED,\n  NOT_FOUND,\n  INTERNAL_SERVER_ERROR,\n  CONNECT_TIMEOUT,\n  CANCEL,\n  RECIEVE_TIMEOUT,\n  SEND_TIMEOUT,\n  CACHE_ERROR,\n  NO_INTERNET_CONNECTION,\n  DEFAULT\n}\n```\n\n<div class=\"content-ad\"></div>\n\n4. DataSourceExtension:\n이 확장은 DataSource 열거형을 위한 getFailure라는 메서드를 추가합니다. 이 메서드는 열거형의 값에 따라 Failure 객체를 반환합니다.\n\n```js\nextension DataSourceExtension on DataSource {\n  Failure getFailure() {\n    var mContext = navigatorKey!.currentState!.context;\n    switch (this) {\n      case DataSource.SUCCESS:\n        return Failure(ResponseCode.SUCCESS, ResponseMessage.SUCCESS.tr(mContext));\n      case DataSource.NO_CONTENT:\n        return Failure(ResponseCode.NO_CONTENT, ResponseMessage.NO_CONTENT.tr(mContext));\n      case DataSource.BAD_REQUEST:\n        return Failure(ResponseCode.BAD_REQUEST, ResponseMessage.BAD_REQUEST.tr(mContext));\n      case DataSource.FORBIDDEN:\n        return Failure(ResponseCode.FORBIDDEN, ResponseMessage.FORBIDDEN.tr(mContext));\n      case DataSource.UNAUTORISED:\n        return Failure(ResponseCode.UNAUTORISED, ResponseMessage.UNAUTORISED.tr(mContext));\n      case DataSource.NOT_FOUND:\n        return Failure(ResponseCode.NOT_FOUND, ResponseMessage.NOT_FOUND.tr(mContext));\n      case DataSource.INTERNAL_SERVER_ERROR:\n        return Failure(ResponseCode.INTERNAL_SERVER_ERROR,\n            ResponseMessage.INTERNAL_SERVER_ERROR.tr(mContext));\n      case DataSource.CONNECT_TIMEOUT:\n        return Failure(\n            ResponseCode.CONNECT_TIMEOUT, ResponseMessage.CONNECT_TIMEOUT.tr(mContext));\n      case DataSource.CANCEL:\n        return Failure(ResponseCode.CANCEL, ResponseMessage.CANCEL.tr(mContext));\n      case DataSource.RECIEVE_TIMEOUT:\n        return Failure(\n            ResponseCode.RECIEVE_TIMEOUT, ResponseMessage.RECIEVE_TIMEOUT.tr(mContext));\n      case DataSource.SEND_TIMEOUT:\n        return Failure(ResponseCode.SEND_TIMEOUT, ResponseMessage.SEND_TIMEOUT.tr(mContext));\n      case DataSource.CACHE_ERROR:\n        return Failure(ResponseCode.CACHE_ERROR, ResponseMessage.CACHE_ERROR.tr(mContext));\n      case DataSource.NO_INTERNET_CONNECTION:\n        return Failure(ResponseCode.NO_INTERNET_CONNECTION,\n            ResponseMessage.NO_INTERNET_CONNECTION.tr(mContext));\n      case DataSource.DEFAULT:\n        return Failure(ResponseCode.DEFAULT, ResponseMessage.DEFAULT.tr(mContext));\n    }\n  }\n}\n```\n\n5. ResponseCode 클래스:\n이 클래스는 표준 HTTP 상태 코드와 로컬 상태 코드에 대한 사용자 지정 상태 코드를 나타내는 정적 정수 상수를 정의합니다.\n\n```js\nclass ResponseCode {\n  static const int SUCCESS = 200; // 성공 및 데이터 포함\n  static const int NO_CONTENT = 201; // 성공하지만 데이터가 없음 (내용 없음)\n  static const int BAD_REQUEST = 400; // 실패, API가 요청을 거부함\n  static const int UNAUTORISED = 401; // 실패, 사용자가 인가되지 않음\n  static const int FORBIDDEN = 403; // 실패, API가 요청을 거부함\n  static const int INTERNAL_SERVER_ERROR = 500; // 실패, 서버 측에서 오류 발생\n  static const int NOT_FOUND = 404; // 실패, 찾을 수 없음\n\n  // 로컬 상태 코드\n  static const int CONNECT_TIMEOUT = -1;\n  static const int CANCEL = -2;\n  static const int RECIEVE_TIMEOUT = -3;\n  static const int SEND_TIMEOUT = -4;\n  static const int CACHE_ERROR = -5;\n  static const int NO_INTERNET_CONNECTION = -6;\n  static const int DEFAULT = -7;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n6. ResponseMessage 클래스:\n이 클래스는 다른 HTTP 상태 코드에 대한 응답 메시지를 나타내는 정적 문자열 상수를 정의합니다. 이러한 메시지는 국제화(로컬라이제이션)되어야 합니다.\n\n```js\nclass ResponseMessage {\n  static const String SUCCESS = AppStrings.success; // 데이터가 포함된 성공\n  static const String NO_CONTENT = AppStrings.success; // 데이터가 없는 성공 (내용 없음)\n  static const String BAD_REQUEST = AppStrings.strBadRequestError; // 실패, API가 요청을 거부함\n  static const String UNAUTORISED = AppStrings.strUnauthorizedError; // 실패, 사용자가 권한이 없음\n  static const String FORBIDDEN = AppStrings.strForbiddenError; // 실패, API가 요청을 거부함\n  static const String INTERNAL_SERVER_ERROR = AppStrings.strInternalServerError; // 실패, 서버 측에서 충돌 발생\n  static const String NOT_FOUND = AppStrings.strNotFoundError; // 실패, 서버 측에서 충돌 발생\n\n  // 지역 상태 코드\n  static const String CONNECT_TIMEOUT = AppStrings.strTimeoutError;\n  static const String CANCEL = AppStrings.strDefaultError;\n  static const String RECIEVE_TIMEOUT = AppStrings.strTimeoutError;\n  static const String SEND_TIMEOUT = AppStrings.strTimeoutError;\n  static const String CACHE_ERROR = AppStrings.strCacheError;\n  static const String NO_INTERNET_CONNECTION = AppStrings.strNoInternetError;\n  static const String DEFAULT = AppStrings.strDefaultError;\n}\n```\n\n7. HandleError 함수:\n이 비공개 함수는 DioException을 매개변수로 사용하여 Failure 객체를 반환합니다. DioException의 유형에 따라 switch 문을 사용하여 DataSource 열거형에서 정의된 일련의 값에 따라 다른 유형의 DioException을 해당하는 Failure 값으로 매핑합니다.\n\n```js\nFailure _handleError(DioException error) {\n  switch (error.type) {\n    case DioExceptionType.connectionTimeout:\n      return DataSource.CONNECT_TIMEOUT.getFailure();\n    case DioExceptionType.sendTimeout:\n      return DataSource.SEND_TIMEOUT.getFailure();\n    case DioExceptionType.receiveTimeout:\n      return DataSource.RECIEVE_TIMEOUT.getFailure();\n    case DioExceptionType.badResponse:\n      if (error.response != null &&\n          error.response?.statusCode != null &&\n          error.response?.statusMessage != null) {\n        return Failure(error.response?.statusCode ?? 0,\n            error.response?.statusMessage ?? \"\");\n      } else {\n        return DataSource.DEFAULT.getFailure();\n      }\n    case DioExceptionType.cancel:\n      return DataSource.CANCEL.getFailure();\n    default:\n      return DataSource.DEFAULT.getFailure();\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n7. ErrorHandler 클래스:\n이 클래스는 Exception 인터페이스를 구현하며, 예외 처리를 위한 것으로 의도되었음을 나타냅니다.\n즉시 초기화되지 않는 타입이 Failure인 late 필드인 failure이 있습니다.\nErrorHandler 클래스에는 동적 오류 매개변수를 사용하는 handle이라는 생성자가 있습니다. 이 생성자는 오류의 타입에 따라 _handleError 함수를 호출하여 다양한 종류의 예외를 처리합니다.\n만약 오류가 DioException 타입이라면, _handleError 함수를 호출하여 실패를 결정합니다.\n만약 오류가 DioException이 아니라면, DataSource에서 가져온 기본 값으로 실패를 설정합니다.\n\n```js\nclass ErrorHandler implements Exception {\n  late Failure failure;\n\n  ErrorHandler.handle(dynamic error) {\n    if (error is DioException) {\n      // dio error so its an error from response of the API or from dio itself\n      failure = _handleError(error);\n    } else {\n      // default error\n      failure = DataSource.DEFAULT.getFailure();\n    }\n  }\n}\n```\n\n8. 특정 요청에서 오류 처리:\n전역 오류 처리가 중요하긴 하지만, 요청마다 오류를 처리할 수도 있습니다. Dio 요청 주변에 try-catch 블록을 사용하여 오류를 캡쳐하고 적절히 응답할 수 있습니다.\n\n```js\nFuture<Either<Failure, ResponseDto>> getResponse(RequestDto requestDto) async {\n    if (await _networkInfo.isConnected) {\n      try {\n        ...\n        .\n        .\n        return Right(response);\n      } catch (error) {\n        return Left(ErrorHandler.handle(error).failure);\n      }\n    } else {\n      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n9. 사용자 친화적인 오류 메시지 표시:\n긍정적인 사용자 경험을 보장하기 위해 기술적인 오류 메시지를 사용자 친화적인 메시지로 변환하십시오. 오류 코드를 사용자가 어떻게 진행해야 하는지 안내하는 인간이 읽을 수 있는 메시지로 매핑하기 위해 도우미 함수를 사용할 수 있습니다.\n\n```js\n///영어 메시지\n\"success\": \"성공\",\n\"bad_request_error\": \"잘못된 요청. 나중에 다시 시도해주세요\",\n\"no_content\": \"콘텐츠 없이 성공\",\n\"forbidden_error\": \"금지된 요청. 나중에 다시 시도해주세요\",\n\"unauthorized_error\": \"사용자 권한이 없습니다. 나중에 다시 시도해주세요\",\n\"not_found_error\": \"URL을 찾을 수 없습니다. 나중에 다시 시도해주세요\",\n\"conflict_error\": \"충돌이 발생했습니다. 나중에 다시 시도해주세요\",\n\"internal_server_error\": \"문제가 발생했습니다. 나중에 다시 시도해주세요\",\n\"unknown_error\": \"문제가 발생했습니다. 나중에 다시 시도해주세요\",\n\"timeout_error\": \"시간이 초과되었습니다. 나중에 다시 시도해주세요\",\n\"default_error\": \"문제가 발생했습니다. 나중에 다시 시도해주세요\",\n\"cache_error\": \"캐시 오류가 발생했습니다. 나중에 다시 시도해주세요\",\n\"no_internet_error\": \"인터넷 연결을 확인해주세요\"\n\n//아랍어 메시지\n\"success\": \"تم بنجاح\",\n\"bad_request_error\": \"طلب غير صالح. حاول مرة أخرى لاحقًا\",\n\"no_content\": \"콘텐츠 없이 성공\",\n\"forbidden_error\": \"طلب محظور. حاول مرة أخرى لاحقًا\",\n\"unauthorized_error\": \"사용자 권한이 없습니다. 나중에 다시 시도해주세요\",\n\"not_found_error\": \"URL을 찾을 수 없습니다. 나중에 다시 시도해주세요\",\n\"conflict_error\": \"충돌이 발생했습니다. 나중에 다시 시도해주세요\",\n\"internal_server_error\": \"문제가 발생했습니다. 나중에 다시 시도해주세요\",\n\"unknown_error\": \"문제가 발생했습니다. 나중에 다시 시도해주세요\",\n\"timeout_error\": \"시간이 초과되었습니다. 나중에 다시 시도해주세요\",\n\"default_error\": \"문제가 발생했습니다. 나중에 다시 시도해주세요\",\n\"cache_error\": \"캐시 오류가 발생했습니다. 나중에 다시 시도해주세요\",\n\"no_internet_error\": \"인터넷 연결을 확인해주세요\"\n```\n\n10. 결론:\n효율적인 오류 처리는 견고하고 신뢰할 수 있는 Flutter 앱을 제공하는 데 중요합니다. Dio의 포괄적인 오류 처리 메커니즘과 사용자 친화적인 오류 메시지는 어려운 네트워크 상황에서도 사용자가 정보를 알 수 있도록 보장합니다. 이러한 전략을 구현하여 앱의 신뢰성을 높이고 전반적인 사용자 경험을 향상시킬 수 있습니다.\n\n# Github 예시","ogImage":{"url":"/assets/img/2024-06-21-MasteringErrorHandlinginFlutterwithDio_0.png"},"coverImage":"/assets/img/2024-06-21-MasteringErrorHandlinginFlutterwithDio_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>에러 처리를 설명하며 예외를 설명하는 가장 좋은 방법</p>\n<p><img src=\"/assets/img/2024-06-21-MasteringErrorHandlinginFlutterwithDio_0.png\" alt=\"마스터링 플러터에서 Dio를 사용한 에러 처리\"></p>\n<p>소개:\n모바일 앱 개발에서 에러를 우아하게 처리하는 것은 부드럽고 사용자 친화적인 경험을 제공하는 데 중요합니다. 플러터(Flutter)를 사용할 때 Dio는 강력한 HTTP 클라이언트 라이브러리로 네트워크 요청 중 에러를 처리하는 강력한 메커니즘을 제공합니다. 이 글에서는 Dio를 사용하여 플러터에서 에러를 효과적으로 처리하는 방법을 살펴보겠습니다. 이를 통해 앱이 신뢰성 있고 사용자 친화적인 상태를 유지할 수 있습니다.</p>\n<ol>\n<li>Dio 소개:\nDio는 플러터 애플리케이션에서 HTTP 요청을 간단히 만들어주는 다양한 기능을 제공하는 다재다능한 패키지입니다. 취소, 인터셉터, 요청/응답 변환 및 에러 처리와 같은 기능을 제공합니다. 에러 처리는 네트워크 통신의 중요한 측면으로, 인터넷 연결 없음, 서버 에러 등과 같은 시나리오를 처리하도록 앱을 도와줍니다.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>\n<p>Dio Configuration 및 인스턴스 생성:\n에러 처리에 들어가기 전에 Dio 설정을 위해 적절한 구성으로 인스턴스를 만들어보겠습니다. 타임아웃, 기본 URL 및 다른 설정을 정의하여 Dio를 앱에 맞게 사용할 수 있습니다.</p>\n</li>\n<li>\n<p>Interceptors를 사용한 전역 에러 처리:</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">APPLICATION_JSON</span> = <span class=\"hljs-string\">\"application/json\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">CONTENT_TYPE</span> = <span class=\"hljs-string\">\"content-type\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">ACCEPT</span> = <span class=\"hljs-string\">\"accept\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">AUTHORIZATION</span> = <span class=\"hljs-string\">\"authorization\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">DEFAULT_LANGUAGE</span> = <span class=\"hljs-string\">\"en\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">TOKEN</span> = <span class=\"hljs-string\">\"token\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">BASE_URL</span> = <span class=\"hljs-string\">\"https://api.example.com\"</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DioFactory</span> {\n\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Dio</span>> <span class=\"hljs-title function_\">getDio</span>() <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-title class_\">Dio</span> dio = <span class=\"hljs-title class_\">Dio</span>();\n\n    <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>> headers = {\n      <span class=\"hljs-attr\">CONTENT_TYPE</span>: <span class=\"hljs-variable constant_\">APPLICATION_JSON</span>,\n      <span class=\"hljs-attr\">ACCEPT</span>: <span class=\"hljs-variable constant_\">APPLICATION_JSON</span>,\n      <span class=\"hljs-attr\">AUTHORIZATION</span>: <span class=\"hljs-variable constant_\">TOKEN</span>,\n      <span class=\"hljs-attr\">DEFAULT_LANGUAGE</span>: <span class=\"hljs-variable constant_\">DEFAULT_LANGUAGE</span>\n    };\n\n    dio.<span class=\"hljs-property\">options</span> = <span class=\"hljs-title class_\">BaseOptions</span>(\n        <span class=\"hljs-attr\">baseUrl</span>: <span class=\"hljs-variable constant_\">BASE_URL</span>,\n        <span class=\"hljs-attr\">headers</span>: headers,\n        <span class=\"hljs-attr\">receiveTimeout</span>: <span class=\"hljs-title class_\">Constants</span>.<span class=\"hljs-property\">apiTimeOut</span>,\n        <span class=\"hljs-attr\">sendTimeout</span>: <span class=\"hljs-title class_\">Constants</span>.<span class=\"hljs-property\">apiTimeOut</span>,\n    );\n\n    <span class=\"hljs-keyword\">if</span> (!kReleaseMode) {\n      dio.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-title class_\">PrettyDioLogger</span>(\n        <span class=\"hljs-attr\">requestHeader</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">requestBody</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">responseHeader</span>: <span class=\"hljs-literal\">true</span>,\n      ));\n    }\n\n    <span class=\"hljs-keyword\">return</span> dio;\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>DataSource enum:\n다양한 데이터 소스를 정의하는 열거형입니다. 각각이 특정 유형의 실패와 연관되며 오류 유형을 실패 응답과 매핑하는 데 사용됩니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">DataSource</span> {\n  <span class=\"hljs-variable constant_\">SUCCESS</span>,\n  <span class=\"hljs-variable constant_\">NO_CONTENT</span>,\n  <span class=\"hljs-variable constant_\">BAD_REQUEST</span>,\n  <span class=\"hljs-variable constant_\">FORBIDDEN</span>,\n  <span class=\"hljs-variable constant_\">UNAUTORISED</span>,\n  <span class=\"hljs-variable constant_\">NOT_FOUND</span>,\n  <span class=\"hljs-variable constant_\">INTERNAL_SERVER_ERROR</span>,\n  <span class=\"hljs-variable constant_\">CONNECT_TIMEOUT</span>,\n  <span class=\"hljs-variable constant_\">CANCEL</span>,\n  <span class=\"hljs-variable constant_\">RECIEVE_TIMEOUT</span>,\n  <span class=\"hljs-variable constant_\">SEND_TIMEOUT</span>,\n  <span class=\"hljs-variable constant_\">CACHE_ERROR</span>,\n  <span class=\"hljs-variable constant_\">NO_INTERNET_CONNECTION</span>,\n  <span class=\"hljs-variable constant_\">DEFAULT</span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>DataSourceExtension:\n이 확장은 DataSource 열거형을 위한 getFailure라는 메서드를 추가합니다. 이 메서드는 열거형의 값에 따라 Failure 객체를 반환합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">DataSourceExtension</span> on <span class=\"hljs-title class_\">DataSource</span> {\n  <span class=\"hljs-title class_\">Failure</span> <span class=\"hljs-title function_\">getFailure</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">var</span> mContext = navigatorKey!.<span class=\"hljs-property\">currentState</span>!.<span class=\"hljs-property\">context</span>;\n    <span class=\"hljs-keyword\">switch</span> (<span class=\"hljs-variable language_\">this</span>) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">SUCCESS</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">SUCCESS</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">NO_CONTENT</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">NO_CONTENT</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">NO_CONTENT</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">BAD_REQUEST</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">BAD_REQUEST</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">BAD_REQUEST</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">FORBIDDEN</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">FORBIDDEN</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">FORBIDDEN</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">UNAUTORISED</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">UNAUTORISED</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">UNAUTORISED</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">NOT_FOUND</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">NOT_FOUND</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">NOT_FOUND</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">INTERNAL_SERVER_ERROR</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">INTERNAL_SERVER_ERROR</span>,\n            <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">INTERNAL_SERVER_ERROR</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">CONNECT_TIMEOUT</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(\n            <span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">CONNECT_TIMEOUT</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">CONNECT_TIMEOUT</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">CANCEL</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">CANCEL</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">CANCEL</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">RECIEVE_TIMEOUT</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(\n            <span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">RECIEVE_TIMEOUT</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">RECIEVE_TIMEOUT</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">SEND_TIMEOUT</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">SEND_TIMEOUT</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">SEND_TIMEOUT</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">CACHE_ERROR</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">CACHE_ERROR</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">CACHE_ERROR</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">NO_INTERNET_CONNECTION</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">NO_INTERNET_CONNECTION</span>,\n            <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">NO_INTERNET_CONNECTION</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">DEFAULT</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(<span class=\"hljs-title class_\">ResponseCode</span>.<span class=\"hljs-property\">DEFAULT</span>, <span class=\"hljs-title class_\">ResponseMessage</span>.<span class=\"hljs-property\">DEFAULT</span>.<span class=\"hljs-title function_\">tr</span>(mContext));\n    }\n  }\n}\n</code></pre>\n<ol start=\"5\">\n<li>ResponseCode 클래스:\n이 클래스는 표준 HTTP 상태 코드와 로컬 상태 코드에 대한 사용자 지정 상태 코드를 나타내는 정적 정수 상수를 정의합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ResponseCode</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">SUCCESS</span> = <span class=\"hljs-number\">200</span>; <span class=\"hljs-comment\">// 성공 및 데이터 포함</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">NO_CONTENT</span> = <span class=\"hljs-number\">201</span>; <span class=\"hljs-comment\">// 성공하지만 데이터가 없음 (내용 없음)</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">BAD_REQUEST</span> = <span class=\"hljs-number\">400</span>; <span class=\"hljs-comment\">// 실패, API가 요청을 거부함</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">UNAUTORISED</span> = <span class=\"hljs-number\">401</span>; <span class=\"hljs-comment\">// 실패, 사용자가 인가되지 않음</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">FORBIDDEN</span> = <span class=\"hljs-number\">403</span>; <span class=\"hljs-comment\">// 실패, API가 요청을 거부함</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">INTERNAL_SERVER_ERROR</span> = <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">// 실패, 서버 측에서 오류 발생</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">NOT_FOUND</span> = <span class=\"hljs-number\">404</span>; <span class=\"hljs-comment\">// 실패, 찾을 수 없음</span>\n\n  <span class=\"hljs-comment\">// 로컬 상태 코드</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">CONNECT_TIMEOUT</span> = -<span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">CANCEL</span> = -<span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">RECIEVE_TIMEOUT</span> = -<span class=\"hljs-number\">3</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">SEND_TIMEOUT</span> = -<span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">CACHE_ERROR</span> = -<span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">NO_INTERNET_CONNECTION</span> = -<span class=\"hljs-number\">6</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">DEFAULT</span> = -<span class=\"hljs-number\">7</span>;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"6\">\n<li>ResponseMessage 클래스:\n이 클래스는 다른 HTTP 상태 코드에 대한 응답 메시지를 나타내는 정적 문자열 상수를 정의합니다. 이러한 메시지는 국제화(로컬라이제이션)되어야 합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ResponseMessage</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">SUCCESS</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">success</span>; <span class=\"hljs-comment\">// 데이터가 포함된 성공</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">NO_CONTENT</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">success</span>; <span class=\"hljs-comment\">// 데이터가 없는 성공 (내용 없음)</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">BAD_REQUEST</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strBadRequestError</span>; <span class=\"hljs-comment\">// 실패, API가 요청을 거부함</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">UNAUTORISED</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strUnauthorizedError</span>; <span class=\"hljs-comment\">// 실패, 사용자가 권한이 없음</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">FORBIDDEN</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strForbiddenError</span>; <span class=\"hljs-comment\">// 실패, API가 요청을 거부함</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">INTERNAL_SERVER_ERROR</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strInternalServerError</span>; <span class=\"hljs-comment\">// 실패, 서버 측에서 충돌 발생</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">NOT_FOUND</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strNotFoundError</span>; <span class=\"hljs-comment\">// 실패, 서버 측에서 충돌 발생</span>\n\n  <span class=\"hljs-comment\">// 지역 상태 코드</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">CONNECT_TIMEOUT</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strTimeoutError</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">CANCEL</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strDefaultError</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">RECIEVE_TIMEOUT</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strTimeoutError</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">SEND_TIMEOUT</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strTimeoutError</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">CACHE_ERROR</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strCacheError</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">NO_INTERNET_CONNECTION</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strNoInternetError</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable constant_\">DEFAULT</span> = <span class=\"hljs-title class_\">AppStrings</span>.<span class=\"hljs-property\">strDefaultError</span>;\n}\n</code></pre>\n<ol start=\"7\">\n<li>HandleError 함수:\n이 비공개 함수는 DioException을 매개변수로 사용하여 Failure 객체를 반환합니다. DioException의 유형에 따라 switch 문을 사용하여 DataSource 열거형에서 정의된 일련의 값에 따라 다른 유형의 DioException을 해당하는 Failure 값으로 매핑합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Failure</span> <span class=\"hljs-title function_\">_handleError</span>(<span class=\"hljs-params\">DioException error</span>) {\n  <span class=\"hljs-keyword\">switch</span> (error.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DioExceptionType</span>.<span class=\"hljs-property\">connectionTimeout</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">CONNECT_TIMEOUT</span>.<span class=\"hljs-title function_\">getFailure</span>();\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DioExceptionType</span>.<span class=\"hljs-property\">sendTimeout</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">SEND_TIMEOUT</span>.<span class=\"hljs-title function_\">getFailure</span>();\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DioExceptionType</span>.<span class=\"hljs-property\">receiveTimeout</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">RECIEVE_TIMEOUT</span>.<span class=\"hljs-title function_\">getFailure</span>();\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DioExceptionType</span>.<span class=\"hljs-property\">badResponse</span>:\n      <span class=\"hljs-keyword\">if</span> (error.<span class=\"hljs-property\">response</span> != <span class=\"hljs-literal\">null</span> &#x26;&#x26;\n          error.<span class=\"hljs-property\">response</span>?.<span class=\"hljs-property\">statusCode</span> != <span class=\"hljs-literal\">null</span> &#x26;&#x26;\n          error.<span class=\"hljs-property\">response</span>?.<span class=\"hljs-property\">statusMessage</span> != <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Failure</span>(error.<span class=\"hljs-property\">response</span>?.<span class=\"hljs-property\">statusCode</span> ?? <span class=\"hljs-number\">0</span>,\n            error.<span class=\"hljs-property\">response</span>?.<span class=\"hljs-property\">statusMessage</span> ?? <span class=\"hljs-string\">\"\"</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">DEFAULT</span>.<span class=\"hljs-title function_\">getFailure</span>();\n      }\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">DioExceptionType</span>.<span class=\"hljs-property\">cancel</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">CANCEL</span>.<span class=\"hljs-title function_\">getFailure</span>();\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">DEFAULT</span>.<span class=\"hljs-title function_\">getFailure</span>();\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"7\">\n<li>ErrorHandler 클래스:\n이 클래스는 Exception 인터페이스를 구현하며, 예외 처리를 위한 것으로 의도되었음을 나타냅니다.\n즉시 초기화되지 않는 타입이 Failure인 late 필드인 failure이 있습니다.\nErrorHandler 클래스에는 동적 오류 매개변수를 사용하는 handle이라는 생성자가 있습니다. 이 생성자는 오류의 타입에 따라 _handleError 함수를 호출하여 다양한 종류의 예외를 처리합니다.\n만약 오류가 DioException 타입이라면, _handleError 함수를 호출하여 실패를 결정합니다.\n만약 오류가 DioException이 아니라면, DataSource에서 가져온 기본 값으로 실패를 설정합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorHandler</span> implements <span class=\"hljs-title class_\">Exception</span> {\n  late <span class=\"hljs-title class_\">Failure</span> failure;\n\n  <span class=\"hljs-title class_\">ErrorHandler</span>.<span class=\"hljs-title function_\">handle</span>(<span class=\"hljs-params\">dynamic error</span>) {\n    <span class=\"hljs-keyword\">if</span> (error is <span class=\"hljs-title class_\">DioException</span>) {\n      <span class=\"hljs-comment\">// dio error so its an error from response of the API or from dio itself</span>\n      failure = <span class=\"hljs-title function_\">_handleError</span>(error);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// default error</span>\n      failure = <span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">DEFAULT</span>.<span class=\"hljs-title function_\">getFailure</span>();\n    }\n  }\n}\n</code></pre>\n<ol start=\"8\">\n<li>특정 요청에서 오류 처리:\n전역 오류 처리가 중요하긴 하지만, 요청마다 오류를 처리할 수도 있습니다. Dio 요청 주변에 try-catch 블록을 사용하여 오류를 캡쳐하고 적절히 응답할 수 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Either</span>&#x3C;<span class=\"hljs-title class_\">Failure</span>, <span class=\"hljs-title class_\">ResponseDto</span>>> <span class=\"hljs-title function_\">getResponse</span>(<span class=\"hljs-title class_\">RequestDto</span> requestDto) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">await</span> _networkInfo.<span class=\"hljs-property\">isConnected</span>) {\n      <span class=\"hljs-keyword\">try</span> {\n        ...\n        .\n        .\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Right</span>(response);\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Left</span>(<span class=\"hljs-title class_\">ErrorHandler</span>.<span class=\"hljs-title function_\">handle</span>(error).<span class=\"hljs-property\">failure</span>);\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Left</span>(<span class=\"hljs-title class_\">DataSource</span>.<span class=\"hljs-property\">NO_INTERNET_CONNECTION</span>.<span class=\"hljs-title function_\">getFailure</span>());\n    }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"9\">\n<li>사용자 친화적인 오류 메시지 표시:\n긍정적인 사용자 경험을 보장하기 위해 기술적인 오류 메시지를 사용자 친화적인 메시지로 변환하십시오. 오류 코드를 사용자가 어떻게 진행해야 하는지 안내하는 인간이 읽을 수 있는 메시지로 매핑하기 위해 도우미 함수를 사용할 수 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">///영어 메시지</span>\n<span class=\"hljs-string\">\"success\"</span>: <span class=\"hljs-string\">\"성공\"</span>,\n<span class=\"hljs-string\">\"bad_request_error\"</span>: <span class=\"hljs-string\">\"잘못된 요청. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"no_content\"</span>: <span class=\"hljs-string\">\"콘텐츠 없이 성공\"</span>,\n<span class=\"hljs-string\">\"forbidden_error\"</span>: <span class=\"hljs-string\">\"금지된 요청. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"unauthorized_error\"</span>: <span class=\"hljs-string\">\"사용자 권한이 없습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"not_found_error\"</span>: <span class=\"hljs-string\">\"URL을 찾을 수 없습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"conflict_error\"</span>: <span class=\"hljs-string\">\"충돌이 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"internal_server_error\"</span>: <span class=\"hljs-string\">\"문제가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"unknown_error\"</span>: <span class=\"hljs-string\">\"문제가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"timeout_error\"</span>: <span class=\"hljs-string\">\"시간이 초과되었습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"default_error\"</span>: <span class=\"hljs-string\">\"문제가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"cache_error\"</span>: <span class=\"hljs-string\">\"캐시 오류가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"no_internet_error\"</span>: <span class=\"hljs-string\">\"인터넷 연결을 확인해주세요\"</span>\n\n<span class=\"hljs-comment\">//아랍어 메시지</span>\n<span class=\"hljs-string\">\"success\"</span>: <span class=\"hljs-string\">\"تم بنجاح\"</span>,\n<span class=\"hljs-string\">\"bad_request_error\"</span>: <span class=\"hljs-string\">\"طلب غير صالح. حاول مرة أخرى لاحقًا\"</span>,\n<span class=\"hljs-string\">\"no_content\"</span>: <span class=\"hljs-string\">\"콘텐츠 없이 성공\"</span>,\n<span class=\"hljs-string\">\"forbidden_error\"</span>: <span class=\"hljs-string\">\"طلب محظور. حاول مرة أخرى لاحقًا\"</span>,\n<span class=\"hljs-string\">\"unauthorized_error\"</span>: <span class=\"hljs-string\">\"사용자 권한이 없습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"not_found_error\"</span>: <span class=\"hljs-string\">\"URL을 찾을 수 없습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"conflict_error\"</span>: <span class=\"hljs-string\">\"충돌이 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"internal_server_error\"</span>: <span class=\"hljs-string\">\"문제가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"unknown_error\"</span>: <span class=\"hljs-string\">\"문제가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"timeout_error\"</span>: <span class=\"hljs-string\">\"시간이 초과되었습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"default_error\"</span>: <span class=\"hljs-string\">\"문제가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"cache_error\"</span>: <span class=\"hljs-string\">\"캐시 오류가 발생했습니다. 나중에 다시 시도해주세요\"</span>,\n<span class=\"hljs-string\">\"no_internet_error\"</span>: <span class=\"hljs-string\">\"인터넷 연결을 확인해주세요\"</span>\n</code></pre>\n<ol start=\"10\">\n<li>결론:\n효율적인 오류 처리는 견고하고 신뢰할 수 있는 Flutter 앱을 제공하는 데 중요합니다. Dio의 포괄적인 오류 처리 메커니즘과 사용자 친화적인 오류 메시지는 어려운 네트워크 상황에서도 사용자가 정보를 알 수 있도록 보장합니다. 이러한 전략을 구현하여 앱의 신뢰성을 높이고 전반적인 사용자 경험을 향상시킬 수 있습니다.</li>\n</ol>\n<h1>Github 예시</h1>\n</body>\n</html>\n"},"__N_SSG":true}