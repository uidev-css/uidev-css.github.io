{"pageProps":{"post":{"title":"Flutter에서 백그라운드 서비스와 포어그라운드 서비스 사용 방법","description":"","date":"2024-06-21 22:36","slug":"2024-06-21-BackgroundandForegroundservicesinFlutter","content":"\n\n\n![그림](/assets/img/2024-06-21-BackgroundandForegroundservicesinFlutter_0.png)\n\n플러터의 백그라운드 및 포그라운드 서비스를 사용하면 앱이 활발히 실행되거나 활성화되어 있지 않을 때에도 백그라운드에서 작업을 수행할 수 있습니다. 이는 음악 재생, 인터넷에서 데이터 가져오기, 또는 사용자 경험을 방해하지 않고 장기간 실행되는 계산과 같은 작업을 포함합니다.\n\n패키지 추가: Flutter Background Service 문서 읽기를 클릭\n\n```js\n  flutter_background_service: 5.0.2\n  flutter_background_service_android: 6.1.0\n  flutter_background_service_ios: ^5.0.0\n``` \n\n\n<div class=\"content-ad\"></div>\n\n매니페스트에 다음 항목 추가해주세요.\n\n```js\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_LOCATION\"/>\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_DATA_SYNC\"/>\n\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n```\n\n애플리케이션 태그 안에 다음을 추가해주세요.\n\n```js\n<service\n    android:name=\"id.flutter.flutter_background_service.BackgroundService\"\n    android:foregroundServiceType=\"location\"\n/>\n\n<service\n    android:enabled=\"true\"\n    android:exported=\"true\"\n    android:name=\".BackgroundService\"\n    android:stopWithTask=\"false\"\n/>\n\n<receiver\n    android:name=\".WatchdogReceiver\"\n    android:enabled=\"true\"\n    android:exported=\"true\"\n/>\n\n<receiver\n    android:name=\".BootReceiver\"\n    android:enabled=\"true\"\n    android:exported=\"true\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n        <action android:name=\"android.intent.action.QUICKBOOT_POWERON\"/>\n    </intent-filter>\n</receiver>\n```\n\n<div class=\"content-ad\"></div>\n\n다음은 main.dart에서 사용하세요:\n\n```js\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await initializeService();\n  runApp(const MyApp());\n}\n```\n\n```js\n/// Foreground 및 Background\nFuture<void> initializeService() async {\n  final service = FlutterBackgroundService();\n\n  await service.configure(\n    androidConfiguration: AndroidConfiguration(\n      onStart: onStart,\n      autoStart: false,\n      isForegroundMode: true,\n      // notificationChannelId: 'my_foreground',\n      // initialNotificationContent: 'running',\n      foregroundServiceNotificationId: 888,\n    ),\n    iosConfiguration: IosConfiguration(\n      autoStart: true,\n      onForeground: onStart,\n      onBackground: onIosBackground,\n    ),\n  );\n}\n```\n\nIOS용:\n\n<div class=\"content-ad\"></div>\n\n```dart\n@pragma('vm:entry-point')\nFuture<bool> onIosBackground(ServiceInstance service) async {\n  WidgetsFlutterBinding.ensureInitialized();\n  DartPluginRegistrant.ensureInitialized();\n  return true;\n}\n```\n\nAndroid용:\n\n```dart\n@pragma('vm:entry-point')\nvoid onStart(ServiceInstance service) async {\n  DartPluginRegistrant.ensureInitialized();\n  if (service is AndroidServiceInstance) {\n    service.on('setAsForeground').listen((event) {\n      service.setAsForegroundService();\n    });\n    service.on('setAsBackground').listen((event) {\n      service.setAsBackgroundService();\n    });\n  }\n  service.on('stopService').listen((event) {\n    service.stopSelf();\n  });\n\n  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n      FlutterLocalNotificationsPlugin();\n\n  // // bring to foreground\n  Timer.periodic(const Duration(seconds: 1), (timer) async {\n    if (service is AndroidServiceInstance) {\n      if (await service.isForegroundService()) {\n        flutterLocalNotificationsPlugin.show(\n          0, 'This is foreground', '${DateTime.now()}',\n          const NotificationDetails(\n            android: AndroidNotificationDetails(\n              \"notificationChannelId\",\n              'MY FOREGROUND SERVICE',\n              icon: 'ic_bg_service_small',\n              ongoing: true,\n            ),\n          ),\n        );\n      }\n    }\n  });\n}\n```\n\n이 메서드는 어디서든 사용할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\r\nvoid backgroundService()async{\r\n  final service = FlutterBackgroundService();\r\n  var isRunning = await service.isRunning();\r\n  if (isRunning) {\r\n    Timer.periodic(const Duration(seconds: 1), (timer) async {\r\n      if (mounted) {\r\n        setState(() {\r\n          debugPrint(\"runningSanjay\");\r\n          CustomLoader.message(\"runningSanjay\");\r\n        });\r\n      }\r\n    });\r\n  } else {\r\n    service.startService();\r\n  }\r\n  setState(() {});\r\n}\r\n```\r\n\r\n전체 코드:\r\n\r\n```js\r\nimport 'dart:async';\r\nimport 'dart:convert';\r\nimport 'dart:io';\r\nimport 'dart:ui';\r\nimport 'package:flutter_background_service/flutter_background_service.dart';\r\nimport 'package:flutter_background_service_android/flutter_background_service_android.dart';\r\n\r\nFuture<void> main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n  await initializeService(); \r\n  runApp(const MyApp());\r\n}\r\n\r\n/// Foreground and Background\r\nFuture<void> initializeService() async {\r\n  final service = FlutterBackgroundService();\r\n  await service.configure(\r\n    androidConfiguration: AndroidConfiguration(\r\n      onStart: onStart,\r\n      autoStart: false,\r\n      isForegroundMode: true,\r\n      // notificationChannelId: 'my_foreground',\r\n      // initialNotificationContent: 'running',\r\n      foregroundServiceNotificationId: 888,\r\n    ),\r\n    iosConfiguration: IosConfiguration(\r\n      autoStart: true,\r\n      onForeground: onStart,\r\n      onBackground: onIosBackground,\r\n    ),\r\n  );\r\n}\r\n\r\n@pragma('vm:entry-point')\r\nFuture<bool> onIosBackground(ServiceInstance service) async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n  DartPluginRegistrant.ensureInitialized();\r\n  return true;\r\n}\r\n\r\n@pragma('vm:entry-point')\r\nvoid onStart(ServiceInstance service) async {\r\n  DartPluginRegistrant.ensureInitialized();\r\n  if (service is AndroidServiceInstance) {\r\n    service.on('setAsForeground').listen((event) {\r\n      service.setAsForegroundService();\r\n    });\r\n    service.on('setAsBackground').listen((event) {\r\n      service.setAsBackgroundService();\r\n    });\r\n  }\r\n  service.on('stopService').listen((event) {\r\n    service.stopSelf();\r\n  });\r\n\r\n  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = \r\n  FlutterLocalNotificationsPlugin();\r\n  // bring to foreground\r\n  Timer.periodic(const Duration(seconds: 1), (timer) async {\r\n    if (service is AndroidServiceInstance) {\r\n      if (await service.isForegroundService()) {\r\n        CustomLoader.message(\"foreground\");\r\n        flutterLocalNotificationsPlugin.show(\r\n          0, 'COOL SERVICE', 'Awesome ${DateTime.now()}',\r\n          const NotificationDetails(\r\n            android: AndroidNotificationDetails(\r\n              \"notificationChannelId\",\r\n              'MY FOREGROUND SERVICE',\r\n              icon: 'ic_bg_service_small',\r\n              ongoing: true,\r\n            ),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nclass MyApp extends StatefulWidget {\r\n  const MyApp({Key key}) : super(key: key);\r\n  @override\r\n  State<MyApp> createState() => _MyAppState();\r\n}\r\n\r\nclass _MyAppState extends State<MyApp>{\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      theme: ThemeData(\r\n          scaffoldBackgroundColor: Colors.white,\r\n          inputDecorationTheme: const InputDecorationTheme(\r\n            focusedBorder: UnderlineInputBorder(\r\n                borderSide: BorderSide(color: Colors.blue)\r\n            ),\r\n          )),\r\n      home:  Container(\r\n        color: Colors.white,\r\n        child:  Center(\r\n            child: Text(\"This is foreground service app\"),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n<img src=\"/assets/img/2024-06-21-BackgroundandForegroundservicesinFlutter_1.png\" />\r\n\n\n<div class=\"content-ad\"></div>\n\n이 기사를 즐겁게 읽으셨기를 바랍니다! 제공된 정보를 감사히 여기신다면 'Buy Me A Coffee'로 저를 지원할 수 있습니다! 여러분의 제스처에 감사드립니다!","ogImage":{"url":"/assets/img/2024-06-21-BackgroundandForegroundservicesinFlutter_0.png"},"coverImage":"/assets/img/2024-06-21-BackgroundandForegroundservicesinFlutter_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-BackgroundandForegroundservicesinFlutter_0.png\" alt=\"그림\"></p>\n<p>플러터의 백그라운드 및 포그라운드 서비스를 사용하면 앱이 활발히 실행되거나 활성화되어 있지 않을 때에도 백그라운드에서 작업을 수행할 수 있습니다. 이는 음악 재생, 인터넷에서 데이터 가져오기, 또는 사용자 경험을 방해하지 않고 장기간 실행되는 계산과 같은 작업을 포함합니다.</p>\n<p>패키지 추가: Flutter Background Service 문서 읽기를 클릭</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-attr\">flutter_background_service</span>: <span class=\"hljs-number\">5.0</span><span class=\"hljs-number\">.2</span>\n  <span class=\"hljs-attr\">flutter_background_service_android</span>: <span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.0</span>\n  <span class=\"hljs-attr\">flutter_background_service_ios</span>: ^<span class=\"hljs-number\">5.0</span><span class=\"hljs-number\">.0</span>\n</code></pre>\n<p>매니페스트에 다음 항목 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">    &#x3C;uses-permission <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\"android.permission.FOREGROUND_SERVICE\"</span>/>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.FOREGROUND_SERVICE_LOCATION\"</span>/></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.FOREGROUND_SERVICE_DATA_SYNC\"</span>/></span></span>\n\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.RECEIVE_BOOT_COMPLETED\"</span>/></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.WAKE_LOCK\"</span>/></span></span>\n</code></pre>\n<p>애플리케이션 태그 안에 다음을 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;service\n    <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\"id.flutter.flutter_background_service.BackgroundService\"</span>\n    <span class=\"hljs-attr\">android</span>:foregroundServiceType=<span class=\"hljs-string\">\"location\"</span>\n/>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">service</span>\n    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span>\n    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>\n    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".BackgroundService\"</span>\n    <span class=\"hljs-attr\">android:stopWithTask</span>=<span class=\"hljs-string\">\"false\"</span>\n/></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">receiver</span>\n    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".WatchdogReceiver\"</span>\n    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span>\n    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>\n/></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">receiver</span>\n    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".BootReceiver\"</span>\n    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span>\n    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">intent-filter</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.BOOT_COMPLETED\"</span>/></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.QUICKBOOT_POWERON\"</span>/></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">intent-filter</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">receiver</span>></span></span>\n</code></pre>\n<p>다음은 main.dart에서 사용하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">initializeService</span>();\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>());\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/// Foreground 및 Background</span>\n<span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">initializeService</span>() <span class=\"hljs-keyword\">async</span> {\n  final service = <span class=\"hljs-title class_\">FlutterBackgroundService</span>();\n\n  <span class=\"hljs-keyword\">await</span> service.<span class=\"hljs-title function_\">configure</span>(\n    <span class=\"hljs-attr\">androidConfiguration</span>: <span class=\"hljs-title class_\">AndroidConfiguration</span>(\n      <span class=\"hljs-attr\">onStart</span>: onStart,\n      <span class=\"hljs-attr\">autoStart</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">isForegroundMode</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-comment\">// notificationChannelId: 'my_foreground',</span>\n      <span class=\"hljs-comment\">// initialNotificationContent: 'running',</span>\n      <span class=\"hljs-attr\">foregroundServiceNotificationId</span>: <span class=\"hljs-number\">888</span>,\n    ),\n    <span class=\"hljs-attr\">iosConfiguration</span>: <span class=\"hljs-title class_\">IosConfiguration</span>(\n      <span class=\"hljs-attr\">autoStart</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">onForeground</span>: onStart,\n      <span class=\"hljs-attr\">onBackground</span>: onIosBackground,\n    ),\n  );\n}\n</code></pre>\n<p>IOS용:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-meta\">@pragma</span>(<span class=\"hljs-string\">'vm:entry-point'</span>)\nFuture&#x3C;<span class=\"hljs-built_in\">bool</span>> onIosBackground(ServiceInstance service) <span class=\"hljs-keyword\">async</span> {\n  WidgetsFlutterBinding.ensureInitialized();\n  DartPluginRegistrant.ensureInitialized();\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n}\n</code></pre>\n<p>Android용:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-meta\">@pragma</span>(<span class=\"hljs-string\">'vm:entry-point'</span>)\n<span class=\"hljs-keyword\">void</span> onStart(ServiceInstance service) <span class=\"hljs-keyword\">async</span> {\n  DartPluginRegistrant.ensureInitialized();\n  <span class=\"hljs-keyword\">if</span> (service <span class=\"hljs-keyword\">is</span> AndroidServiceInstance) {\n    service.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'setAsForeground'</span>).listen((event) {\n      service.setAsForegroundService();\n    });\n    service.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'setAsBackground'</span>).listen((event) {\n      service.setAsBackgroundService();\n    });\n  }\n  service.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'stopService'</span>).listen((event) {\n    service.stopSelf();\n  });\n\n  <span class=\"hljs-keyword\">final</span> FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n      FlutterLocalNotificationsPlugin();\n\n  <span class=\"hljs-comment\">// // bring to foreground</span>\n  Timer.periodic(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">Duration</span>(seconds: <span class=\"hljs-number\">1</span>), (timer) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">if</span> (service <span class=\"hljs-keyword\">is</span> AndroidServiceInstance) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">await</span> service.isForegroundService()) {\n        flutterLocalNotificationsPlugin.<span class=\"hljs-keyword\">show</span>(\n          <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'This is foreground'</span>, <span class=\"hljs-string\">'<span class=\"hljs-subst\">${DateTime.now()}</span>'</span>,\n          <span class=\"hljs-keyword\">const</span> NotificationDetails(\n            android: AndroidNotificationDetails(\n              <span class=\"hljs-string\">\"notificationChannelId\"</span>,\n              <span class=\"hljs-string\">'MY FOREGROUND SERVICE'</span>,\n              icon: <span class=\"hljs-string\">'ic_bg_service_small'</span>,\n              ongoing: <span class=\"hljs-keyword\">true</span>,\n            ),\n          ),\n        );\n      }\n    }\n  });\n}\n</code></pre>\n<p>이 메서드는 어디서든 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">backgroundService</span>()<span class=\"hljs-keyword\">async</span>{\r\n  final service = <span class=\"hljs-title class_\">FlutterBackgroundService</span>();\r\n  <span class=\"hljs-keyword\">var</span> isRunning = <span class=\"hljs-keyword\">await</span> service.<span class=\"hljs-title function_\">isRunning</span>();\r\n  <span class=\"hljs-keyword\">if</span> (isRunning) {\r\n    <span class=\"hljs-title class_\">Timer</span>.<span class=\"hljs-title function_\">periodic</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">seconds</span>: <span class=\"hljs-number\">1</span>), (timer) <span class=\"hljs-keyword\">async</span> {\r\n      <span class=\"hljs-keyword\">if</span> (mounted) {\r\n        <span class=\"hljs-title function_\">setState</span>(() {\r\n          <span class=\"hljs-title function_\">debugPrint</span>(<span class=\"hljs-string\">\"runningSanjay\"</span>);\r\n          <span class=\"hljs-title class_\">CustomLoader</span>.<span class=\"hljs-title function_\">message</span>(<span class=\"hljs-string\">\"runningSanjay\"</span>);\r\n        });\r\n      }\r\n    });\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    service.<span class=\"hljs-title function_\">startService</span>();\r\n  }\r\n  <span class=\"hljs-title function_\">setState</span>(() {});\r\n}\n</code></pre>\n<p>전체 코드:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:async'</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:convert'</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:io'</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:ui'</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter_background_service/flutter_background_service.dart'</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter_background_service_android/flutter_background_service_android.dart'</span>;\r\n\r\n<span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-keyword\">async</span> {\r\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\r\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">initializeService</span>(); \r\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>());\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Foreground and Background</span>\r\n<span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">initializeService</span>() <span class=\"hljs-keyword\">async</span> {\r\n  final service = <span class=\"hljs-title class_\">FlutterBackgroundService</span>();\r\n  <span class=\"hljs-keyword\">await</span> service.<span class=\"hljs-title function_\">configure</span>(\r\n    <span class=\"hljs-attr\">androidConfiguration</span>: <span class=\"hljs-title class_\">AndroidConfiguration</span>(\r\n      <span class=\"hljs-attr\">onStart</span>: onStart,\r\n      <span class=\"hljs-attr\">autoStart</span>: <span class=\"hljs-literal\">false</span>,\r\n      <span class=\"hljs-attr\">isForegroundMode</span>: <span class=\"hljs-literal\">true</span>,\r\n      <span class=\"hljs-comment\">// notificationChannelId: 'my_foreground',</span>\r\n      <span class=\"hljs-comment\">// initialNotificationContent: 'running',</span>\r\n      <span class=\"hljs-attr\">foregroundServiceNotificationId</span>: <span class=\"hljs-number\">888</span>,\r\n    ),\r\n    <span class=\"hljs-attr\">iosConfiguration</span>: <span class=\"hljs-title class_\">IosConfiguration</span>(\r\n      <span class=\"hljs-attr\">autoStart</span>: <span class=\"hljs-literal\">true</span>,\r\n      <span class=\"hljs-attr\">onForeground</span>: onStart,\r\n      <span class=\"hljs-attr\">onBackground</span>: onIosBackground,\r\n    ),\r\n  );\r\n}\r\n\r\n@<span class=\"hljs-title function_\">pragma</span>(<span class=\"hljs-string\">'vm:entry-point'</span>)\r\n<span class=\"hljs-title class_\">Future</span>&#x3C;bool> <span class=\"hljs-title function_\">onIosBackground</span>(<span class=\"hljs-title class_\">ServiceInstance</span> service) <span class=\"hljs-keyword\">async</span> {\r\n  <span class=\"hljs-title class_\">WidgetsFlutterBinding</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\r\n  <span class=\"hljs-title class_\">DartPluginRegistrant</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n@<span class=\"hljs-title function_\">pragma</span>(<span class=\"hljs-string\">'vm:entry-point'</span>)\r\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onStart</span>(<span class=\"hljs-title class_\">ServiceInstance</span> service) <span class=\"hljs-keyword\">async</span> {\r\n  <span class=\"hljs-title class_\">DartPluginRegistrant</span>.<span class=\"hljs-title function_\">ensureInitialized</span>();\r\n  <span class=\"hljs-keyword\">if</span> (service is <span class=\"hljs-title class_\">AndroidServiceInstance</span>) {\r\n    service.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'setAsForeground'</span>).<span class=\"hljs-title function_\">listen</span>((event) {\r\n      service.<span class=\"hljs-title function_\">setAsForegroundService</span>();\r\n    });\r\n    service.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'setAsBackground'</span>).<span class=\"hljs-title function_\">listen</span>((event) {\r\n      service.<span class=\"hljs-title function_\">setAsBackgroundService</span>();\r\n    });\r\n  }\r\n  service.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'stopService'</span>).<span class=\"hljs-title function_\">listen</span>((event) {\r\n    service.<span class=\"hljs-title function_\">stopSelf</span>();\r\n  });\r\n\r\n  final <span class=\"hljs-title class_\">FlutterLocalNotificationsPlugin</span> flutterLocalNotificationsPlugin = \r\n  <span class=\"hljs-title class_\">FlutterLocalNotificationsPlugin</span>();\r\n  <span class=\"hljs-comment\">// bring to foreground</span>\r\n  <span class=\"hljs-title class_\">Timer</span>.<span class=\"hljs-title function_\">periodic</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Duration</span>(<span class=\"hljs-attr\">seconds</span>: <span class=\"hljs-number\">1</span>), (timer) <span class=\"hljs-keyword\">async</span> {\r\n    <span class=\"hljs-keyword\">if</span> (service is <span class=\"hljs-title class_\">AndroidServiceInstance</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">await</span> service.<span class=\"hljs-title function_\">isForegroundService</span>()) {\r\n        <span class=\"hljs-title class_\">CustomLoader</span>.<span class=\"hljs-title function_\">message</span>(<span class=\"hljs-string\">\"foreground\"</span>);\r\n        flutterLocalNotificationsPlugin.<span class=\"hljs-title function_\">show</span>(\r\n          <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'COOL SERVICE'</span>, <span class=\"hljs-string\">'Awesome ${DateTime.now()}'</span>,\r\n          <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">NotificationDetails</span>(\r\n            <span class=\"hljs-attr\">android</span>: <span class=\"hljs-title class_\">AndroidNotificationDetails</span>(\r\n              <span class=\"hljs-string\">\"notificationChannelId\"</span>,\r\n              <span class=\"hljs-string\">'MY FOREGROUND SERVICE'</span>,\r\n              <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">'ic_bg_service_small'</span>,\r\n              <span class=\"hljs-attr\">ongoing</span>: <span class=\"hljs-literal\">true</span>,\r\n            ),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\r\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>({<span class=\"hljs-title class_\">Key</span> key}) : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-attr\">key</span>: key);\r\n  @override\r\n  <span class=\"hljs-title class_\">State</span>&#x3C;<span class=\"hljs-title class_\">MyApp</span>> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_MyAppState</span>();\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyApp</span>>{\r\n  @override\r\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>(\r\n      <span class=\"hljs-attr\">debugShowCheckedModeBanner</span>: <span class=\"hljs-literal\">false</span>,\r\n      <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-title class_\">ThemeData</span>(\r\n          <span class=\"hljs-attr\">scaffoldBackgroundColor</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>,\r\n          <span class=\"hljs-attr\">inputDecorationTheme</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">InputDecorationTheme</span>(\r\n            <span class=\"hljs-attr\">focusedBorder</span>: <span class=\"hljs-title class_\">UnderlineInputBorder</span>(\r\n                <span class=\"hljs-attr\">borderSide</span>: <span class=\"hljs-title class_\">BorderSide</span>(<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>)\r\n            ),\r\n          )),\r\n      <span class=\"hljs-attr\">home</span>:  <span class=\"hljs-title class_\">Container</span>(\r\n        <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">white</span>,\r\n        <span class=\"hljs-attr\">child</span>:  <span class=\"hljs-title class_\">Center</span>(\r\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"This is foreground service app\"</span>),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n</code></pre>\n<p>이 기사를 즐겁게 읽으셨기를 바랍니다! 제공된 정보를 감사히 여기신다면 'Buy Me A Coffee'로 저를 지원할 수 있습니다! 여러분의 제스처에 감사드립니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}