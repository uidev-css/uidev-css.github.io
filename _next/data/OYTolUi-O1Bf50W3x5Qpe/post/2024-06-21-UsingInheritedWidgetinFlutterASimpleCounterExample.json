{"pageProps":{"post":{"title":"Flutter에서 InheritedWidget 사용하기 간단한 카운터 예제","description":"","date":"2024-06-21 21:03","slug":"2024-06-21-UsingInheritedWidgetinFlutterASimpleCounterExample","content":"\n\n\n![사진](/assets/img/2024-06-21-UsingInheritedWidgetinFlutterASimpleCounterExample_0.png)\n\n플러터에서 상태를 관리하는 것은 어렵지만, 특히 여러 위젯 간에 데이터를 공유해야 할 때 더 어려울 수 있습니다. InheritedWidget은 이 문제를 해결하는 데 도움이 되는 플러터의 강력한 기능으로, 위젯이 공유된 데이터에 효율적으로 액세스할 수 있도록 합니다. 이 글에서는 간단한 카운터 예제와 함께 InheritedWidget을 어떻게 사용하는지 살펴보겠습니다.\n\n단계 1: Inherited Widget 생성\n\n먼저, AppState라는 InheritedWidget을 만들겠습니다. 이 위젯은 공유 상태(이 경우 카운터)를 보유하고 이를 하위 항목에 제공할 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n```js\nimport 'package:flutter/material.dart';\n\nclass AppState extends InheritedWidget {\n  final int counter;\n  final Widget child;\n\n  AppState({\n    required this.counter,\n    required this.child,\n  }) : super(child: child);\n\n  static AppState? of(BuildContext context) {\n    return context.dependOnInheritedWidgetOfExactType<AppState>();\n  }\n\n  @override\n  bool updateShouldNotify(AppState oldWidget) {\n    return oldWidget.counter != counter;\n  }\n}\n```\n\nAppState 클래스에서:\n\n- counter와 child를 초기화하는 생성자를 정의합니다.\n- of 메서드는 하위 위젯이 AppState에 액세스할 수 있도록 합니다.\n- updateShouldNotify 메서드는 하위 항목에 변경 사항을 알리는 시점을 결정합니다.\n\n단계 2: State를 관리하는 StatefulWidget 생성\n\n\n<div class=\"content-ad\"></div>\n\n다음으로 상태를 관리하는 StatefulWidget 인 MyApp을 만들겠습니다. 이 위젯은 상태를 업데이트하고 필요할 때 다시 빌드를 트리거할 것입니다.\n\n```js\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AppState(\n      counter: _counter,\n      child: MaterialApp(\n        home: Scaffold(\n          appBar: AppBar(\n            title: Text('Inherited Widget demo'),\n          ),\n          body: CounterDisplay(),\n          floatingActionButton: FloatingActionButton(\n            onPressed: _incrementCounter,\n            child: Icon(Icons.add),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n단계 3: Inherited Widget을 사용하는 위젯 생성\n\n마지막으로, 우리는 InheritedWidget을 사용하여 카운터 값을 액세스하고 표시하는 CounterDisplay라는 StatelessWidget을 만들 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```dart\nclass CounterDisplay extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final appState = AppState.of(context);\n\n    return Center(\n      child: Text(\n        'Counter: ${appState?.counter}',\n        style: TextStyle(fontSize: 22),\n      ),\n    );\n  }\n}\n```\n\nCounterDisplay 클래스에서:\n\n- AppState를 액세스하고 카운터 값을 검색하려면 of 메서드를 사용합니다.\n- Text 위젯에 카운터 값을 표시합니다.\n\n이 코드를 실행해 봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n앱을 실행하려면 MyApp을 인수로 사용하여 runApp 함수를 호출하겠습니다.\n\n```js\nvoid main() => runApp(MyApp());\n```","ogImage":{"url":"/assets/img/2024-06-21-UsingInheritedWidgetinFlutterASimpleCounterExample_0.png"},"coverImage":"/assets/img/2024-06-21-UsingInheritedWidgetinFlutterASimpleCounterExample_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-UsingInheritedWidgetinFlutterASimpleCounterExample_0.png\" alt=\"사진\"></p>\n<p>플러터에서 상태를 관리하는 것은 어렵지만, 특히 여러 위젯 간에 데이터를 공유해야 할 때 더 어려울 수 있습니다. InheritedWidget은 이 문제를 해결하는 데 도움이 되는 플러터의 강력한 기능으로, 위젯이 공유된 데이터에 효율적으로 액세스할 수 있도록 합니다. 이 글에서는 간단한 카운터 예제와 함께 InheritedWidget을 어떻게 사용하는지 살펴보겠습니다.</p>\n<p>단계 1: Inherited Widget 생성</p>\n<p>먼저, AppState라는 InheritedWidget을 만들겠습니다. 이 위젯은 공유 상태(이 경우 카운터)를 보유하고 이를 하위 항목에 제공할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">InheritedWidget</span> {\n  final int counter;\n  final <span class=\"hljs-title class_\">Widget</span> child;\n\n  <span class=\"hljs-title class_\">AppState</span>({\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>,\n    required <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">child</span>,\n  }) : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-attr\">child</span>: child);\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">AppState</span>? <span class=\"hljs-title function_\">of</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> context.<span class=\"hljs-property\">dependOnInheritedWidgetOfExactType</span>&#x3C;<span class=\"hljs-title class_\">AppState</span>>();\n  }\n\n  @override\n  bool <span class=\"hljs-title function_\">updateShouldNotify</span>(<span class=\"hljs-params\">AppState oldWidget</span>) {\n    <span class=\"hljs-keyword\">return</span> oldWidget.<span class=\"hljs-property\">counter</span> != counter;\n  }\n}\n</code></pre>\n<p>AppState 클래스에서:</p>\n<ul>\n<li>counter와 child를 초기화하는 생성자를 정의합니다.</li>\n<li>of 메서드는 하위 위젯이 AppState에 액세스할 수 있도록 합니다.</li>\n<li>updateShouldNotify 메서드는 하위 항목에 변경 사항을 알리는 시점을 결정합니다.</li>\n</ul>\n<p>단계 2: State를 관리하는 StatefulWidget 생성</p>\n<p>다음으로 상태를 관리하는 StatefulWidget 인 MyApp을 만들겠습니다. 이 위젯은 상태를 업데이트하고 필요할 때 다시 빌드를 트리거할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  @override\n  _MyAppState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_MyAppState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyApp</span>> {\n  int _counter = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_incrementCounter</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">setState</span>(() {\n      _counter++;\n    });\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">AppState</span>(\n      <span class=\"hljs-attr\">counter</span>: _counter,\n      <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">MaterialApp</span>(\n        <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n          <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Inherited Widget demo'</span>),\n          ),\n          <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">CounterDisplay</span>(),\n          <span class=\"hljs-attr\">floatingActionButton</span>: <span class=\"hljs-title class_\">FloatingActionButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: _incrementCounter,\n            <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">add</span>),\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>단계 3: Inherited Widget을 사용하는 위젯 생성</p>\n<p>마지막으로, 우리는 InheritedWidget을 사용하여 카운터 값을 액세스하고 표시하는 CounterDisplay라는 StatelessWidget을 만들 것입니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CounterDisplay</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">final</span> appState = AppState.of(context);\n\n    <span class=\"hljs-keyword\">return</span> Center(\n      child: Text(\n        <span class=\"hljs-string\">'Counter: <span class=\"hljs-subst\">${appState?.counter}</span>'</span>,\n        style: TextStyle(fontSize: <span class=\"hljs-number\">22</span>),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>CounterDisplay 클래스에서:</p>\n<ul>\n<li>AppState를 액세스하고 카운터 값을 검색하려면 of 메서드를 사용합니다.</li>\n<li>Text 위젯에 카운터 값을 표시합니다.</li>\n</ul>\n<p>이 코드를 실행해 봅시다.</p>\n<p>앱을 실행하려면 MyApp을 인수로 사용하여 runApp 함수를 호출하겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>() => <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-title class_\">MyApp</span>());\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}