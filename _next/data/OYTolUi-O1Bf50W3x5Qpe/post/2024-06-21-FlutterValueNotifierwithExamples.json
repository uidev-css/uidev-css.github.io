{"pageProps":{"post":{"title":"예제와 함께 배우는 Flutter ValueNotifier 활용 방법","description":"","date":"2024-06-21 21:57","slug":"2024-06-21-FlutterValueNotifierwithExamples","content":"\n\n<img src=\"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_0.png\" />\n\n소개\nFlutter는 크로스 플랫폼 모바일 애플리케이션을 개발하기 위한 강력한 프레임워크입니다. 그 중요한 기능 중 하나는 애플리케이션의 상태를 관리하고 업데이트하기 위해 ValueNotifier를 사용할 수 있는 기능입니다. 이 블로그 포스트에서는 ValueNotifier의 기본 개념을 탐색하고 예제와 함께 사용하는 방법을 알아보겠습니다.\n\nValueNotifier란?\n\nValueNotifier는 Flutter에서 값을 저장하고 그 값이 변경될 때 청취자에게 알릴 수 있는 간단한 클래스입니다. 이는 다른 상태 관리 솔루션인 BLoC나 Provider와 같은 Flutter에서 사용 가능한 가벼운 대안입니다.\n\n<div class=\"content-ad\"></div>\n\n예시 1: 카운터 앱\n간단한 카운터 앱의 예시로 시작해보겠습니다. 화면에 카운터를 표시하고 사용자가 버튼을 탭할 때마다 증가시키는 앱을 만들어봅시다. 이를 위해 ValueNotifier를 사용하는 방법을 살펴보겠습니다:\n\n```js\nclass Counter {\n  final ValueNotifier<int> count = ValueNotifier<int>(0);\n\n  void incrementCount() {\n    count.value++;\n  }\n}\n\nclass CounterApp extends StatefulWidget {\n  @override\n  _CounterAppState createState() => _CounterAppState();\n}\n\nclass _CounterAppState extends State<CounterApp> {\n  final Counter counter = Counter();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('카운터 앱'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              '카운트:',\n            ),\n            ValueListenableBuilder<int>(\n              valueListenable: counter.count,\n              builder: (BuildContext context, int value, child) {\n                return Text(\n                  '$value',\n                  style: Theme.of(context).textTheme.headline4,\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          setState(() {\n            counter.incrementCount();\n          });\n        },\n        tooltip: '증가',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n이 예시에서는 Count 클래스를 정의하고 그 안에 count라는 ValueNotifier를 포함시킵니다. 그런 다음 ValueListenableBuilder를 사용하여 count 값의 변경 사항을 감시하고 버튼이 눌릴 때 UI를 업데이트합니다.\n\n예시 2: 폼 유효성 검사\nValueNotifier는 폼 유효성 검사에도 사용할 수 있습니다. 이 예시에서는 이메일과 패스워드 두 가지 필드로 구성된 폼의 유효성을 검사하려 합니다. 두 필드가 모두 입력되어야 폼이 유효합니다.\n\n<div class=\"content-ad\"></div>\n\n```dart\nclass LoginModel {\n  final ValueNotifier<String> email = ValueNotifier<String>('');\n  final ValueNotifier<String> password = ValueNotifier<String>('');\n\n  // 이메일과 비밀번호가 비어있지 않은지 확인\n  bool get isValid => email.value.isNotEmpty && password.value.isNotEmpty;\n}\n\nclass LoginForm extends StatefulWidget {\n  @override\n  _LoginFormState createState() => _LoginFormState();\n}\n\nclass _LoginFormState extends State<LoginForm> {\n  final LoginModel model = LoginModel();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        child: Column(\n          children: <Widget>[\n            TextField(\n              onChanged: (String value) {\n                setState(() {\n                  model.email.value = value;\n                });\n              },\n              decoration: const InputDecoration(hintText: 'Email'),\n            ),\n            TextField(\n              onChanged: (String value) {\n                setState(() {\n                  model.password.value = value;\n                });\n              },\n              decoration: const InputDecoration(hintText: 'Password'),\n            ),\n            ValueListenableBuilder<bool>(\n              valueListenable: ValueNotifier<bool>(model.isValid),\n              builder: (BuildContext context, bool isValid, child) {\n                return ElevatedButton(\n                  onPressed: () {\n                    if (isValid) {\n                      // 무언가를 수행\n                      print(\"Valid\");\n                    } else {\n                      print(\"Invalid\");\n                    }\n                  },\n                  child: const Text('Login'),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n이 예제에서는 이메일과 비밀번호를 나타내는 두 개의 ValueNotifier가 포함된 LoginModel 클래스를 정의합니다. 그런 다음 ValueListenableBuilder를 사용하여 isValid 값의 변경 사항을 청취하고 로그인 버튼을 활성화/비활성화합니다.\n\n예제 3: ValueNotifier로 UI 업데이트하기\n\nValueNotifier를 사용하여 상태가 변경될 때 UI를 업데이트할 수도 있습니다. 이 예제에서는 항목 목록을 표시하고 사용자가 스와이프하여 항목을 삭제할 수 있도록합니다.\n\n<div class=\"content-ad\"></div>\n\n```dart\nclass Item {\n  final ValueNotifier<String> name;\n\n  Item(String name) : name = ValueNotifier<String>(name);\n}\n\nclass ItemList extends StatefulWidget {\n  @override\n  _ItemListState createState() => _ItemListState();\n}\n\nclass _ItemListState extends State<ItemList> {\n  final List<Item> items = [\n    Item('아이템 1'),\n    Item('아이템 2'),\n    Item('아이템 3'),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        child: ListView.builder(\n          itemCount: items.length,\n          itemBuilder: (BuildContext context, int index) {\n            final Item item = items[index];\n\n            return Dismissible(\n              key: Key(item.name.value),\n              onDismissed: (DismissDirection direction) {\n                setState(() {\n                  items.removeAt(index);\n                });\n              },\n              child: ListTile(\n                title: ValueListenableBuilder<String>(\n                  valueListenable: item.name,\n                  builder: (BuildContext context, String value, child) {\n                    return Text(value);\n                  },\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n이 예시에서는 항목 이름에 대한 ValueNotifier`String`을 포함하는 Item 클래스를 정의합니다. 그런 다음 ValueListenableBuilder를 사용하여 이름 값의 변경을 감시하고 항목이 삭제되도록 스와이프될 때 UI를 업데이트합니다.\n\n결론\n\nValueNotifier는 Flutter에서 다양한 용도로 사용할 수 있는 다재다능한 클래스로, 애플리케이션 상태 관리, 폼 유효성 검사 및 UI 업데이트를 포함한 여러 목적에 사용할 수 있습니다. ValueNotifier를 사용하여 개발자는 애플리케이션에서 상태를 관리하는 간단하고 효율적인 해결책을 만들 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-21-FlutterValueNotifierwithExamples_1.png)\n\n만약 내 미디엄 기사를 즐기신다면, 이 주제에 대한 연구와 학습을 지원하기 위해 커피 한 잔 사 주시면 감사하겠습니다.","ogImage":{"url":"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_0.png"},"coverImage":"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>소개\nFlutter는 크로스 플랫폼 모바일 애플리케이션을 개발하기 위한 강력한 프레임워크입니다. 그 중요한 기능 중 하나는 애플리케이션의 상태를 관리하고 업데이트하기 위해 ValueNotifier를 사용할 수 있는 기능입니다. 이 블로그 포스트에서는 ValueNotifier의 기본 개념을 탐색하고 예제와 함께 사용하는 방법을 알아보겠습니다.</p>\n<p>ValueNotifier란?</p>\n<p>ValueNotifier는 Flutter에서 값을 저장하고 그 값이 변경될 때 청취자에게 알릴 수 있는 간단한 클래스입니다. 이는 다른 상태 관리 솔루션인 BLoC나 Provider와 같은 Flutter에서 사용 가능한 가벼운 대안입니다.</p>\n<p>예시 1: 카운터 앱\n간단한 카운터 앱의 예시로 시작해보겠습니다. 화면에 카운터를 표시하고 사용자가 버튼을 탭할 때마다 증가시키는 앱을 만들어봅시다. 이를 위해 ValueNotifier를 사용하는 방법을 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Counter</span> {\n  final <span class=\"hljs-title class_\">ValueNotifier</span>&#x3C;int> count = <span class=\"hljs-title class_\">ValueNotifier</span>&#x3C;int>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">incrementCount</span>(<span class=\"hljs-params\"></span>) {\n    count.<span class=\"hljs-property\">value</span>++;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  @override\n  _CounterAppState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_CounterAppState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_CounterAppState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">CounterApp</span>> {\n  final <span class=\"hljs-title class_\">Counter</span> counter = <span class=\"hljs-title class_\">Counter</span>();\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'카운터 앱'</span>),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-title class_\">Text</span>(\n              <span class=\"hljs-string\">'카운트:'</span>,\n            ),\n            <span class=\"hljs-title class_\">ValueListenableBuilder</span>&#x3C;int>(\n              <span class=\"hljs-attr\">valueListenable</span>: counter.<span class=\"hljs-property\">count</span>,\n              <span class=\"hljs-attr\">builder</span>: (<span class=\"hljs-title class_\">BuildContext</span> context, int value, child) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(\n                  <span class=\"hljs-string\">'$value'</span>,\n                  <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">Theme</span>.<span class=\"hljs-title function_\">of</span>(context).<span class=\"hljs-property\">textTheme</span>.<span class=\"hljs-property\">headline4</span>,\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n      <span class=\"hljs-attr\">floatingActionButton</span>: <span class=\"hljs-title class_\">FloatingActionButton</span>(\n        <span class=\"hljs-attr\">onPressed</span>: () {\n          <span class=\"hljs-title function_\">setState</span>(() {\n            counter.<span class=\"hljs-title function_\">incrementCount</span>();\n          });\n        },\n        <span class=\"hljs-attr\">tooltip</span>: <span class=\"hljs-string\">'증가'</span>,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">add</span>),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>이 예시에서는 Count 클래스를 정의하고 그 안에 count라는 ValueNotifier를 포함시킵니다. 그런 다음 ValueListenableBuilder를 사용하여 count 값의 변경 사항을 감시하고 버튼이 눌릴 때 UI를 업데이트합니다.</p>\n<p>예시 2: 폼 유효성 검사\nValueNotifier는 폼 유효성 검사에도 사용할 수 있습니다. 이 예시에서는 이메일과 패스워드 두 가지 필드로 구성된 폼의 유효성을 검사하려 합니다. 두 필드가 모두 입력되어야 폼이 유효합니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginModel</span> </span>{\n  <span class=\"hljs-keyword\">final</span> ValueNotifier&#x3C;<span class=\"hljs-built_in\">String</span>> email = ValueNotifier&#x3C;<span class=\"hljs-built_in\">String</span>>(<span class=\"hljs-string\">''</span>);\n  <span class=\"hljs-keyword\">final</span> ValueNotifier&#x3C;<span class=\"hljs-built_in\">String</span>> password = ValueNotifier&#x3C;<span class=\"hljs-built_in\">String</span>>(<span class=\"hljs-string\">''</span>);\n\n  <span class=\"hljs-comment\">// 이메일과 비밀번호가 비어있지 않은지 확인</span>\n  <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-keyword\">get</span> isValid => email.value.isNotEmpty &#x26;&#x26; password.value.isNotEmpty;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  _LoginFormState createState() => _LoginFormState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_LoginFormState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&#x3C;<span class=\"hljs-title\">LoginForm</span>> </span>{\n  <span class=\"hljs-keyword\">final</span> LoginModel model = LoginModel();\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      body: SafeArea(\n        child: Column(\n          children: &#x3C;Widget>[\n            TextField(\n              onChanged: (<span class=\"hljs-built_in\">String</span> value) {\n                setState(() {\n                  model.email.value = value;\n                });\n              },\n              decoration: <span class=\"hljs-keyword\">const</span> InputDecoration(hintText: <span class=\"hljs-string\">'Email'</span>),\n            ),\n            TextField(\n              onChanged: (<span class=\"hljs-built_in\">String</span> value) {\n                setState(() {\n                  model.password.value = value;\n                });\n              },\n              decoration: <span class=\"hljs-keyword\">const</span> InputDecoration(hintText: <span class=\"hljs-string\">'Password'</span>),\n            ),\n            ValueListenableBuilder&#x3C;<span class=\"hljs-built_in\">bool</span>>(\n              valueListenable: ValueNotifier&#x3C;<span class=\"hljs-built_in\">bool</span>>(model.isValid),\n              builder: (BuildContext context, <span class=\"hljs-built_in\">bool</span> isValid, child) {\n                <span class=\"hljs-keyword\">return</span> ElevatedButton(\n                  onPressed: () {\n                    <span class=\"hljs-keyword\">if</span> (isValid) {\n                      <span class=\"hljs-comment\">// 무언가를 수행</span>\n                      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Valid\"</span>);\n                    } <span class=\"hljs-keyword\">else</span> {\n                      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Invalid\"</span>);\n                    }\n                  },\n                  child: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">'Login'</span>),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>이 예제에서는 이메일과 비밀번호를 나타내는 두 개의 ValueNotifier가 포함된 LoginModel 클래스를 정의합니다. 그런 다음 ValueListenableBuilder를 사용하여 isValid 값의 변경 사항을 청취하고 로그인 버튼을 활성화/비활성화합니다.</p>\n<p>예제 3: ValueNotifier로 UI 업데이트하기</p>\n<p>ValueNotifier를 사용하여 상태가 변경될 때 UI를 업데이트할 수도 있습니다. 이 예제에서는 항목 목록을 표시하고 사용자가 스와이프하여 항목을 삭제할 수 있도록합니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Item</span> </span>{\n  <span class=\"hljs-keyword\">final</span> ValueNotifier&#x3C;<span class=\"hljs-built_in\">String</span>> name;\n\n  Item(<span class=\"hljs-built_in\">String</span> name) : name = ValueNotifier&#x3C;<span class=\"hljs-built_in\">String</span>>(name);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ItemList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-meta\">@override</span>\n  _ItemListState createState() => _ItemListState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_ItemListState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&#x3C;<span class=\"hljs-title\">ItemList</span>> </span>{\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">List</span>&#x3C;Item> items = [\n    Item(<span class=\"hljs-string\">'아이템 1'</span>),\n    Item(<span class=\"hljs-string\">'아이템 2'</span>),\n    Item(<span class=\"hljs-string\">'아이템 3'</span>),\n  ];\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      body: SafeArea(\n        child: ListView.builder(\n          itemCount: items.length,\n          itemBuilder: (BuildContext context, <span class=\"hljs-built_in\">int</span> index) {\n            <span class=\"hljs-keyword\">final</span> Item item = items[index];\n\n            <span class=\"hljs-keyword\">return</span> Dismissible(\n              key: Key(item.name.value),\n              onDismissed: (DismissDirection direction) {\n                setState(() {\n                  items.removeAt(index);\n                });\n              },\n              child: ListTile(\n                title: ValueListenableBuilder&#x3C;<span class=\"hljs-built_in\">String</span>>(\n                  valueListenable: item.name,\n                  builder: (BuildContext context, <span class=\"hljs-built_in\">String</span> value, child) {\n                    <span class=\"hljs-keyword\">return</span> Text(value);\n                  },\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>이 예시에서는 항목 이름에 대한 ValueNotifier<code>String</code>을 포함하는 Item 클래스를 정의합니다. 그런 다음 ValueListenableBuilder를 사용하여 이름 값의 변경을 감시하고 항목이 삭제되도록 스와이프될 때 UI를 업데이트합니다.</p>\n<p>결론</p>\n<p>ValueNotifier는 Flutter에서 다양한 용도로 사용할 수 있는 다재다능한 클래스로, 애플리케이션 상태 관리, 폼 유효성 검사 및 UI 업데이트를 포함한 여러 목적에 사용할 수 있습니다. ValueNotifier를 사용하여 개발자는 애플리케이션에서 상태를 관리하는 간단하고 효율적인 해결책을 만들 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterValueNotifierwithExamples_1.png\" alt=\"이미지\"></p>\n<p>만약 내 미디엄 기사를 즐기신다면, 이 주제에 대한 연구와 학습을 지원하기 위해 커피 한 잔 사 주시면 감사하겠습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}