{"pageProps":{"post":{"title":"2024년 기준으로 한 단계씩 따라 하는 플러터 웹뷰 예제","description":"","date":"2024-06-19 08:09","slug":"2024-06-19-FlutterWebviewExampleStepbyStepin2024","content":"\n\n이 블로그에서는 2024년에 단계별로 플러터 웹뷰 예제를 통합하는 방법을 탐색할 것입니다. 이 코드를 안드로이드 스튜디오에서 쉽게 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-06-19-FlutterWebviewExampleStepbyStepin2024_0.png)\n\n# 2024년 플러터 웹뷰 예제 단계별 통합 방법\n\n## 단계 1: “pubspec.yaml” 파일에 웹뷰 종속성 추가하기\n\n<div class=\"content-ad\"></div>\n\n\"스튜디오\"로 이동 - \"프로젝트\" 폴더 열기 - \"pubspec.yaml\" 파일 열기 - \"pubspec.yaml\" 파일에 \"webview_flutter: ^4.8.0\" 추가\n\n```yaml\ndependencies:\n  flutter:\n    sdk: flutter\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.2\n  webview_flutter: ^4.8.0\n```\n\n## 단계 2: “AndroidManifest.xml” 파일에서 인터넷 연결 권한 추가\n\n\"스튜디오\"로 이동 - \"프로젝트\" 폴더 열기 - \"android\" 폴더 열기 - \"app\" 폴더 열기 - \"src\" 폴더 열기 - \"main\" 폴더 열기 - \"AndroidManifest.xml\" 파일 열기 - 아래 인터넷 권한을 \"AndroidManifest.xml\" 파일에 추가\n\n<div class=\"content-ad\"></div>\n\n```js\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n## 단계 3 : Lib 폴더에 \"WebViewContainer.dart\" 파일을 생성하세요\n\n\"Studio\"로 이동 - ` \"프로젝트\" 폴더 열기 -` \"lib\" 폴더 열기 -` \"WebViewContainer.dart\" 파일 만들기\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:webview_flutter/webview_flutter.dart';\n\nclass WebViewContainer extends StatefulWidget {\n  const WebViewContainer({Key key});\n\n  @override\n  State<WebViewContainer> createState() => _WebViewContainerState();\n}\n\nclass _WebViewContainerState extends State<WebViewContainer> {\n  final controller = WebViewController()\n    ..setJavaScriptMode(JavaScriptMode.unrestricted)\n    ..loadRequest(Uri.parse(\"https://www.oversimplifiedcoding.com\"));\n\n  @override\n  Widget build(BuildContext context) {\n    return SafeArea(child: WebView(\n      controller: controller,\n    ));\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 4: Lib 폴더에 \"main.dart\" 파일을 생성하세요\n\n\"스튜디오\"에 가서 -` \"프로젝트\" 폴더 열기 -` \"lib\" 폴더 열기 -` \"main.dart\" 파일을 생성하세요\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:my_test_app/WebViewContainer.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        textTheme: TextTheme(\n          headlineLarge: TextStyle(\n              color: Colors.white, fontSize: 25, fontFamily: 'MainFont'),\n          headlineMedium: TextStyle(color: Colors.black, fontSize: 20),\n          titleMedium: TextStyle(color: Colors.red, fontSize: 16),\n        ),\n        useMaterial3: true,\n      ),\n      home: const WebViewContainer(),\n    );\n  }\n}\n```\n\n## 참고\n\n<div class=\"content-ad\"></div>\n\n여기는 2024년에 하나씩 따라 할 수 있는 완전한 Flutter 웹뷰 예제 튜토리얼 비디오 참조 정보입니다. 손쉽게 배우고 코드에서 사용할 수 있습니다.\n\n자세히 보기: Jetpack Compose에서 Mvvm Dagger Hilt를 사용한 로그인 API 호출\n\n## 결론\n\n이 블로그에서는 2024년에 하나씩 따라 할 수 있는 Flutter 웹뷰 예제를 만드는 방법을 안내했습니다. 이 코드를 쉽게 사용하고 필요에 맞게 수정할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-FlutterWebviewExampleStepbyStepin2024_0.png"},"coverImage":"/assets/img/2024-06-19-FlutterWebviewExampleStepbyStepin2024_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 블로그에서는 2024년에 단계별로 플러터 웹뷰 예제를 통합하는 방법을 탐색할 것입니다. 이 코드를 안드로이드 스튜디오에서 쉽게 사용할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-19-FlutterWebviewExampleStepbyStepin2024_0.png\" alt=\"이미지\"></p>\n<h1>2024년 플러터 웹뷰 예제 단계별 통합 방법</h1>\n<h2>단계 1: “pubspec.yaml” 파일에 웹뷰 종속성 추가하기</h2>\n<p>\"스튜디오\"로 이동 - \"프로젝트\" 폴더 열기 - \"pubspec.yaml\" 파일 열기 - \"pubspec.yaml\" 파일에 \"webview_flutter: ^4.8.0\" 추가</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">flutter:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n\n  <span class=\"hljs-comment\"># The following adds the Cupertino Icons font to your application.</span>\n  <span class=\"hljs-comment\"># Use with the CupertinoIcons class for iOS style icons.</span>\n  <span class=\"hljs-attr\">cupertino_icons:</span> <span class=\"hljs-string\">^1.0.2</span>\n  <span class=\"hljs-attr\">webview_flutter:</span> <span class=\"hljs-string\">^4.8.0</span>\n</code></pre>\n<h2>단계 2: “AndroidManifest.xml” 파일에서 인터넷 연결 권한 추가</h2>\n<p>\"스튜디오\"로 이동 - \"프로젝트\" 폴더 열기 - \"android\" 폴더 열기 - \"app\" 폴더 열기 - \"src\" 폴더 열기 - \"main\" 폴더 열기 - \"AndroidManifest.xml\" 파일 열기 - 아래 인터넷 권한을 \"AndroidManifest.xml\" 파일에 추가</p>\n<pre><code class=\"hljs language-js\">&#x3C;uses-permission <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\"android.permission.INTERNET\"</span>/>\n</code></pre>\n<h2>단계 3 : Lib 폴더에 \"WebViewContainer.dart\" 파일을 생성하세요</h2>\n<p>\"Studio\"로 이동 - <code> \"프로젝트\" 폴더 열기 -</code> \"lib\" 폴더 열기 -` \"WebViewContainer.dart\" 파일 만들기</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:webview_flutter/webview_flutter.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebViewContainer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">WebViewContainer</span>({<span class=\"hljs-title class_\">Key</span> key});\n\n  @override\n  <span class=\"hljs-title class_\">State</span>&#x3C;<span class=\"hljs-title class_\">WebViewContainer</span>> <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_WebViewContainerState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_WebViewContainerState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">WebViewContainer</span>> {\n  final controller = <span class=\"hljs-title class_\">WebViewController</span>()\n    ..<span class=\"hljs-title function_\">setJavaScriptMode</span>(<span class=\"hljs-title class_\">JavaScriptMode</span>.<span class=\"hljs-property\">unrestricted</span>)\n    ..<span class=\"hljs-title function_\">loadRequest</span>(<span class=\"hljs-title class_\">Uri</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-string\">\"https://www.oversimplifiedcoding.com\"</span>));\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">SafeArea</span>(<span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">WebView</span>(\n      <span class=\"hljs-attr\">controller</span>: controller,\n    ));\n  }\n}\n</code></pre>\n<h2>단계 4: Lib 폴더에 \"main.dart\" 파일을 생성하세요</h2>\n<p>\"스튜디오\"에 가서 -<code> \"프로젝트\" 폴더 열기 -</code> \"lib\" 폴더 열기 -` \"main.dart\" 파일을 생성하세요</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:my_test_app/WebViewContainer.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> main() {\n  runApp(<span class=\"hljs-keyword\">const</span> MyApp());\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-keyword\">const</span> MyApp({<span class=\"hljs-keyword\">super</span>.key});\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> MaterialApp(\n      title: <span class=\"hljs-string\">'Flutter Demo'</span>,\n      debugShowCheckedModeBanner: <span class=\"hljs-keyword\">false</span>,\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        textTheme: TextTheme(\n          headlineLarge: TextStyle(\n              color: Colors.white, fontSize: <span class=\"hljs-number\">25</span>, fontFamily: <span class=\"hljs-string\">'MainFont'</span>),\n          headlineMedium: TextStyle(color: Colors.black, fontSize: <span class=\"hljs-number\">20</span>),\n          titleMedium: TextStyle(color: Colors.red, fontSize: <span class=\"hljs-number\">16</span>),\n        ),\n        useMaterial3: <span class=\"hljs-keyword\">true</span>,\n      ),\n      home: <span class=\"hljs-keyword\">const</span> WebViewContainer(),\n    );\n  }\n}\n</code></pre>\n<h2>참고</h2>\n<p>여기는 2024년에 하나씩 따라 할 수 있는 완전한 Flutter 웹뷰 예제 튜토리얼 비디오 참조 정보입니다. 손쉽게 배우고 코드에서 사용할 수 있습니다.</p>\n<p>자세히 보기: Jetpack Compose에서 Mvvm Dagger Hilt를 사용한 로그인 API 호출</p>\n<h2>결론</h2>\n<p>이 블로그에서는 2024년에 하나씩 따라 할 수 있는 Flutter 웹뷰 예제를 만드는 방법을 안내했습니다. 이 코드를 쉽게 사용하고 필요에 맞게 수정할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}