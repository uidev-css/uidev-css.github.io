{"pageProps":{"post":{"title":"2024년 플러터Flutter에서 API 키를 안전하게 보호하는 방법 안내","description":"","date":"2024-06-19 14:27","slug":"2024-06-19-HowtosecureAPIkeysinFlutter2024Guide","content":"\n\n앱 빌드에 패킹된 거의 모든 것이 밝혀질 수 있다는 사실을 아셨나요? 이에는 테스트 계정 정보, 재미있는 할 일 목록, 실수로 추가한 장보기 목록, 심지어 API 키 등이 포함됩니다. 네, 어떤 사람들은 여전히 프로젝트에 장보기 목록을 저장해 둔 채로 있습니다!\n\n## 그렇다면, 다른 좋은 옵션이 뭘까요?\n\n우리는 .env 파일을 사용하여 비밀 정보를 저장할 수 있습니다. 그러면 그 정보에 접근하는 것이 쉬워집니다. flutter_dotenv를 사용하여 이에 대해 더 알아볼 수 있습니다. 하지만 여기서 문제가 하나 있습니다. 이 방법이 더 나은 것은 사실이지만, 여전히 이러한 비밀 정보를 파악하기는 꽤 쉽습니다. 왜냐하면 우리는 Dart 파일에서 이 정보를 사용하기 위해 pubspec.yaml에서 .env 파일들을 자산으로 나열해야 하기 때문입니다. 그리고 여기서 문제가 발생합니다: 자산은 어떤 복호화나 특별한 역공학 요령 없이도 쉽게 접근할 수 있습니다.\n\n안드로이드 스튜디오의 \"난독화\" 플래그를 사용하여 정보를 숨기려고 해도, 자산에는 여전히 쉽게 접근할 수 있습니다. 그러므로 안타깝게도, 여러분의 비밀 정보는 실제로 안전하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-HowtosecureAPIkeysinFlutter2024Guide_0.png\" />\n\n## 환경 변수에 대해 들어 보셨나요?\n\n결혼 기념일과 같은 중요한 정보를 전달하는 데 꽤 편리합니다. 여기에 사용 방법이 있습니다: VS Code의 launch.json 파일의 \"toolArgs\" 섹션에 \" — dart-define\"을 추가합니다. 그런 다음 코드에서 String.fromEnvironment('NAME')과 같은 방식으로 액세스할 수 있습니다. 이렇게 하면 비밀이 안전하게 보호됩니다.\n\n```js\nprint(const String.fromEnvironment('ANNIVERSARY'));\n```\n\n<div class=\"content-ad\"></div>\n\n안녕하세요. 안드로이드 스튜디오에서도 똑같이 할 수 있어요.\n\n![이미지](/assets/img/2024-06-19-HowtosecureAPIkeysinFlutter2024Guide_1.png)\n\n잠시만 기다려주세요. 아직 해결되지 않은 문제가 있어요. 환경 변수를 사용하는 것은 비밀을 보호하는 좋은 방법이지만, 실행 구성을 통해 모든 것을 전달하게 되기 때문에 최선은 아닙니다. 물론, \"dart-define-from-file\"을 통해 데이터를 파일을 통해 전달하거나 안전을 위해 .gitignore에 추가하는 방법도 있어요. 그런데 여기서 한 가지 더 좋은 방법이 있어요.\n\n# 우리의 슈퍼스타를 만나보세요: Envied\n\n<div class=\"content-ad\"></div>\n\nEnvied는 나에게 지금까지 최고의 옵션이에요.\n\nEnvied는 나에게 최고의 선택지로 떠오르는 이유가 있어요. 그 이유는 안전하기 때문이죠. .env 파일을 자산으로 추가하지 않아 노출 위험을 줄일 수 있어요. 게다가 인증 정보를 base64 형식으로 인코딩하여 다트 파일을 생성하므로, 비밀을 알아내려는 눈에게 어렵게 만들어줘요. 게다가 \"obfuscate=true\"를 통해 난독화를 활성화하여 추가적인 보안층도 더할 수 있어요.\n\n무엇보다도, Envied는 서로 다른 플레이버를 사용하는 것을 공식적으로 지원하여 프로젝트 간의 호환성과 일관성을 보장해 줘요.\n\n양쪽 플레이버에 대한 청사진을 스케치해 봅시다.\n\n<div class=\"content-ad\"></div>\n\nString.fromEnvironment을 기억하시나요? 우리는 어떤 플레이버를 사용할지 정의하기 위해 ENV 키를 제공합니다. 그리고 AppSecret는 해당 플레이버의 비밀을 반환할 겁니다.\n\n```js\nabstract class AppSecret implements AppEnvFields {\n  static const String environment = String.fromEnvironment('ENV', defaultValue: 'prod');\n\n  static final AppSecret _instance =\n      environment == 'prod' ? ProductionSecret() : DevelopmentSecret();\n\n  factory AppSecret() => _instance;\n}\n```\n\n이번에는 ProductionSecret 안으로 살짝 들여다보겠습니다. 먼저, 환경 파일에서 시크릿을 생성하기 위한 부분을 추가할 겁니다. 환경 파일의 경로와 함께 @Envied 어노테이션을 사용하고 \"obfuscate=true\"로 설정해주세요.\n\n다음으로, AppSecret와 AppEnvFields를 구현할 겁니다. 이는 키가 어떻게 재정의되어야 하는지에 대해 합의되어 있는지 확인하는 것을 보장합니다. AppSecret가 정확히 같은 시크릿을 보유하고 있기 때문에, 다른 플레이버에서 문제를 발생시키지 않고 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\"obfuscate=true\"로 설정한 경우 각 키를 final로 선언해야 합니다. 그리고 환경 파일에서 해당 키 이름을 사용하여 @EnviedField로 각각 주석을 달겠습니다. 우리의 경우에는 \"SECRET_KEY\"입니다.\n\n마지막으로 생성된 파일에서 값을 가져올 _ProductionSecret.secretKey를 호출할 것입니다.\n\n```dart\npart 'env_prod.g.dart';\n\n@Envied(\n  path: 'environment/.env.prod',\n  obfuscate: true,\n)\nclass ProductionSecret implements AppSecret, AppEnvFields {\n  ProductionSecret();\n\n  @override\n  @EnviedField(varName: 'SECRET_KEY')\n  final secretKey = _ProductionSecret.secretKey;\n}\n```\n\n마지막으로 아래 명령 중 하나를 실행해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n\n# dart\ndart run build_runner build\n# flutter\nflutter pub run build_runner build\n\n\n`.gitignore` 파일에 `.env`, `production_secret.dart`, `production_secret.g.dart`를 추가하는 걸 잊지 마세요. 이것들을 깃 저장소에 저장하고 싶지 않을 거예요.\n\n# CI/CD 흐름에서 시크릿 키 사용하는 방법\n\n만약 Github Actions나 CodeMagic와 같은 CI/CD 도구를 사용 중이라면, 이 플랫폼 내에서 키를 안전하게 저장하는 것이 중요합니다. 그리고 워크플로우에서 Envied 파일을 동적으로 생성할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n이렇게 함으로써 CI/CD 프로세스 중에도 중요 정보가 보호되면서 엑세스할 수 있게 됩니다. CodeMagic에서 어떻게 수행하는지 확인하려면 아래 링크를 확인하세요.\n\n## 결론\n\n이로써 마무리 지었습니다! 오늘의 통찰력이 도움이 되었기를 바라겠습니다. Envied가 시크릿을 안전하게 지킬 수 있는 좋은 도구라는 것을 기억하세요. 하지만 핵 코드를 저장하지는 말아주세요, 그냥 안전하게요!\n\n이 기사가 유용하다고 느꼈다면 팔로우, 박수 및 공유를 잊지 말아주세요.\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-06-19-HowtosecureAPIkeysinFlutter2024Guide_0.png"},"coverImage":"/assets/img/2024-06-19-HowtosecureAPIkeysinFlutter2024Guide_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>앱 빌드에 패킹된 거의 모든 것이 밝혀질 수 있다는 사실을 아셨나요? 이에는 테스트 계정 정보, 재미있는 할 일 목록, 실수로 추가한 장보기 목록, 심지어 API 키 등이 포함됩니다. 네, 어떤 사람들은 여전히 프로젝트에 장보기 목록을 저장해 둔 채로 있습니다!</p>\n<h2>그렇다면, 다른 좋은 옵션이 뭘까요?</h2>\n<p>우리는 .env 파일을 사용하여 비밀 정보를 저장할 수 있습니다. 그러면 그 정보에 접근하는 것이 쉬워집니다. flutter_dotenv를 사용하여 이에 대해 더 알아볼 수 있습니다. 하지만 여기서 문제가 하나 있습니다. 이 방법이 더 나은 것은 사실이지만, 여전히 이러한 비밀 정보를 파악하기는 꽤 쉽습니다. 왜냐하면 우리는 Dart 파일에서 이 정보를 사용하기 위해 pubspec.yaml에서 .env 파일들을 자산으로 나열해야 하기 때문입니다. 그리고 여기서 문제가 발생합니다: 자산은 어떤 복호화나 특별한 역공학 요령 없이도 쉽게 접근할 수 있습니다.</p>\n<p>안드로이드 스튜디오의 \"난독화\" 플래그를 사용하여 정보를 숨기려고 해도, 자산에는 여전히 쉽게 접근할 수 있습니다. 그러므로 안타깝게도, 여러분의 비밀 정보는 실제로 안전하지 않습니다.</p>\n<h2>환경 변수에 대해 들어 보셨나요?</h2>\n<p>결혼 기념일과 같은 중요한 정보를 전달하는 데 꽤 편리합니다. 여기에 사용 방법이 있습니다: VS Code의 launch.json 파일의 \"toolArgs\" 섹션에 \" — dart-define\"을 추가합니다. 그런 다음 코드에서 String.fromEnvironment('NAME')과 같은 방식으로 액세스할 수 있습니다. 이렇게 하면 비밀이 안전하게 보호됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromEnvironment</span>(<span class=\"hljs-string\">'ANNIVERSARY'</span>));\n</code></pre>\n<p>안녕하세요. 안드로이드 스튜디오에서도 똑같이 할 수 있어요.</p>\n<p><img src=\"/assets/img/2024-06-19-HowtosecureAPIkeysinFlutter2024Guide_1.png\" alt=\"이미지\"></p>\n<p>잠시만 기다려주세요. 아직 해결되지 않은 문제가 있어요. 환경 변수를 사용하는 것은 비밀을 보호하는 좋은 방법이지만, 실행 구성을 통해 모든 것을 전달하게 되기 때문에 최선은 아닙니다. 물론, \"dart-define-from-file\"을 통해 데이터를 파일을 통해 전달하거나 안전을 위해 .gitignore에 추가하는 방법도 있어요. 그런데 여기서 한 가지 더 좋은 방법이 있어요.</p>\n<h1>우리의 슈퍼스타를 만나보세요: Envied</h1>\n<p>Envied는 나에게 지금까지 최고의 옵션이에요.</p>\n<p>Envied는 나에게 최고의 선택지로 떠오르는 이유가 있어요. 그 이유는 안전하기 때문이죠. .env 파일을 자산으로 추가하지 않아 노출 위험을 줄일 수 있어요. 게다가 인증 정보를 base64 형식으로 인코딩하여 다트 파일을 생성하므로, 비밀을 알아내려는 눈에게 어렵게 만들어줘요. 게다가 \"obfuscate=true\"를 통해 난독화를 활성화하여 추가적인 보안층도 더할 수 있어요.</p>\n<p>무엇보다도, Envied는 서로 다른 플레이버를 사용하는 것을 공식적으로 지원하여 프로젝트 간의 호환성과 일관성을 보장해 줘요.</p>\n<p>양쪽 플레이버에 대한 청사진을 스케치해 봅시다.</p>\n<p>String.fromEnvironment을 기억하시나요? 우리는 어떤 플레이버를 사용할지 정의하기 위해 ENV 키를 제공합니다. 그리고 AppSecret는 해당 플레이버의 비밀을 반환할 겁니다.</p>\n<pre><code class=\"hljs language-js\">abstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppSecret</span> implements <span class=\"hljs-title class_\">AppEnvFields</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">String</span> environment = <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromEnvironment</span>(<span class=\"hljs-string\">'ENV'</span>, <span class=\"hljs-attr\">defaultValue</span>: <span class=\"hljs-string\">'prod'</span>);\n\n  <span class=\"hljs-keyword\">static</span> final <span class=\"hljs-title class_\">AppSecret</span> _instance =\n      environment == <span class=\"hljs-string\">'prod'</span> ? <span class=\"hljs-title class_\">ProductionSecret</span>() : <span class=\"hljs-title class_\">DevelopmentSecret</span>();\n\n  factory <span class=\"hljs-title class_\">AppSecret</span>() => _instance;\n}\n</code></pre>\n<p>이번에는 ProductionSecret 안으로 살짝 들여다보겠습니다. 먼저, 환경 파일에서 시크릿을 생성하기 위한 부분을 추가할 겁니다. 환경 파일의 경로와 함께 @Envied 어노테이션을 사용하고 \"obfuscate=true\"로 설정해주세요.</p>\n<p>다음으로, AppSecret와 AppEnvFields를 구현할 겁니다. 이는 키가 어떻게 재정의되어야 하는지에 대해 합의되어 있는지 확인하는 것을 보장합니다. AppSecret가 정확히 같은 시크릿을 보유하고 있기 때문에, 다른 플레이버에서 문제를 발생시키지 않고 사용할 수 있습니다.</p>\n<p>\"obfuscate=true\"로 설정한 경우 각 키를 final로 선언해야 합니다. 그리고 환경 파일에서 해당 키 이름을 사용하여 @EnviedField로 각각 주석을 달겠습니다. 우리의 경우에는 \"SECRET_KEY\"입니다.</p>\n<p>마지막으로 생성된 파일에서 값을 가져올 _ProductionSecret.secretKey를 호출할 것입니다.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">'env_prod.g.dart'</span>;\n\n<span class=\"hljs-meta\">@Envied</span>(\n  path: <span class=\"hljs-string\">'environment/.env.prod'</span>,\n  obfuscate: <span class=\"hljs-keyword\">true</span>,\n)\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProductionSecret</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AppSecret</span>, <span class=\"hljs-title\">AppEnvFields</span> </span>{\n  ProductionSecret();\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-meta\">@EnviedField</span>(varName: <span class=\"hljs-string\">'SECRET_KEY'</span>)\n  <span class=\"hljs-keyword\">final</span> secretKey = _ProductionSecret.secretKey;\n}\n</code></pre>\n<p>마지막으로 아래 명령 중 하나를 실행해야 합니다.</p>\n<h1>dart</h1>\n<p>dart run build_runner build</p>\n<h1>flutter</h1>\n<p>flutter pub run build_runner build</p>\n<p><code>.gitignore</code> 파일에 <code>.env</code>, <code>production_secret.dart</code>, <code>production_secret.g.dart</code>를 추가하는 걸 잊지 마세요. 이것들을 깃 저장소에 저장하고 싶지 않을 거예요.</p>\n<h1>CI/CD 흐름에서 시크릿 키 사용하는 방법</h1>\n<p>만약 Github Actions나 CodeMagic와 같은 CI/CD 도구를 사용 중이라면, 이 플랫폼 내에서 키를 안전하게 저장하는 것이 중요합니다. 그리고 워크플로우에서 Envied 파일을 동적으로 생성할 수 있습니다.</p>\n<p>이렇게 함으로써 CI/CD 프로세스 중에도 중요 정보가 보호되면서 엑세스할 수 있게 됩니다. CodeMagic에서 어떻게 수행하는지 확인하려면 아래 링크를 확인하세요.</p>\n<h2>결론</h2>\n<p>이로써 마무리 지었습니다! 오늘의 통찰력이 도움이 되었기를 바라겠습니다. Envied가 시크릿을 안전하게 지킬 수 있는 좋은 도구라는 것을 기억하세요. 하지만 핵 코드를 저장하지는 말아주세요, 그냥 안전하게요!</p>\n<p>이 기사가 유용하다고 느꼈다면 팔로우, 박수 및 공유를 잊지 말아주세요.</p>\n<p>읽어 주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}