{"pageProps":{"post":{"title":"Flutter에서 Bloc을 사용한 상태 관리 마스터하기 종합 가이드","description":"","date":"2024-06-21 22:13","slug":"2024-06-21-MasteringStateManagementinFlutterwithBlocAComprehensiveGuide","content":"\n소개\n\n상태 관리는 견고하고 유지보수가 용이한 플러터 애플리케이션을 구축하는 중요한 측면입니다. 플러터는 다양한 상태 관리 옵션을 제공하며, 상태를 관리하는 가장 인기 있는 강력한 라이브러리 중 하나인 flutter_bloc 패키지가 있습니다. 이 포괄적인 가이드에서는 Bloc를 사용한 상태 관리의 기본 개념을 탐색하고 시작하는 데 도움이 되는 자세한 예제를 제공합니다.\n\n![마스터링 플러터 Bloc를 이용한 상태 관리: 포괄적인 가이드](/assets/img/2024-06-21-MasteringStateManagementinFlutterwithBlocAComprehensiveGuide_0.png)\n\n# 플러터 Bloc이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\nflutter_bloc은 Flutter 애플리케이션의 상태를 관리하기 위해 BLoC (Business Logic Component) 패턴을 활용하는 라이브러리입니다. 이는 데이터 및 이벤트의 흐름을 처리하는 구조화된 방법을 제공하여 코드베이스를 더 조직화하고 유지보수하기 쉽게 만들어줍니다. Bloc은 프리젠테이션 레이어를 비즈니스 로직에서 분리함으로써 깨끗하고 확장 가능한 아키텍처를 장려합니다.\n\n# Flutter 프로젝트 설정하기\n\n예제에 들어가기 전에 새로운 Flutter 프로젝트를 설정하고 flutter_bloc 패키지를 종속성으로 추가해 봅시다. 이를 위해 다음 단계를 따라주세요:\n\n- 다음 명령어를 사용하여 새로운 Flutter 프로젝트를 생성합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nflutter create my_bloc_app\n```\n\n2. 즐겨 사용하는 코드 편집기에서 프로젝트를 엽니다.\n\n3. pubspec.yaml 파일에 flutter_bloc를 추가하세요:\n\n```js\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_bloc: ^7.0.0\n```\n\n<div class=\"content-ad\"></div>\n\n4. 의존성을 가져와 설치하려면 `flutter pub get`을 실행하세요.\n\n# 카운터 앱 예제\n\n이제 Bloc을 사용하여 카운터의 상태를 관리하는 간단한 Flutter 앱을 만들어 보겠습니다. 이 예제에서는 Bloc을 설정하는 방법, 이벤트와 상태를 만드는 방법 및 BlocProvider를 만드는 방법을 보여줍니다.\n\n# 1. Bloc 만들기\n\n<div class=\"content-ad\"></div>\n\n프로젝트에서 Bloc을 위한 새 Dart 파일을 만드세요. counter_bloc.dart라고 이름 짓겠어요.\n\n```js\nimport 'package:flutter_bloc/flutter_bloc.dart';\n\n// 이벤트\nabstract class CounterEvent {}\n\nclass IncrementEvent extends CounterEvent {}\n\nclass DecrementEvent extends CounterEvent {}\n\n// 상태\nabstract class CounterState {}\n\nclass InitialState extends CounterState {}\n\nclass UpdatedState extends CounterState {\n  final int count;\n\n  UpdatedState(this.count);\n}\n\n// Bloc\nclass CounterBloc extends Bloc<CounterEvent, CounterState> {\n  CounterBloc() : super(InitialState());\n\n  @override\n  Stream<CounterState> mapEventToState(CounterEvent event) async* {\n    if (event is IncrementEvent) {\n      yield UpdatedState(state is UpdatedState ? (state as UpdatedState).count + 1 : 1);\n    } else if (event is DecrementEvent) {\n      yield UpdatedState(state is UpdatedState ? (state as UpdatedState).count - 1 : -1);\n    }\n  }\n}\n```\n\n# 2. UI 만들기\n\n이제 카운터 앱을 위한 간단한 UI를 만들어보세요. main.dart 파일에서 만들어보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'counter_bloc.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: BlocProvider(\n        create: (context) => CounterBloc(),\n        child: MyHomePage(),\n      ),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final CounterBloc counterBloc = BlocProvider.of<CounterBloc>(context);\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Flutter Bloc Counter'),\n      ),\n      body: BlocBuilder<CounterBloc, CounterState>(\n        builder: (context, state) {\n          if (state is UpdatedState) {\n            return Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: <Widget>[\n                  Text(\n                    'Counter Value:',\n                    style: TextStyle(fontSize: 20),\n                  ),\n                  Text(\n                    '${state.count}',\n                    style: TextStyle(fontSize: 50),\n                  ),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: <Widget>[\n                      FloatingActionButton(\n                        onPressed: () => counterBloc.add(IncrementEvent()),\n                        child: Icon(Icons.add),\n                      ),\n                      SizedBox(width: 20),\n                      FloatingActionButton(\n                        onPressed: () => counterBloc.add(DecrementEvent()),\n                        child: Icon(Icons.remove),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            );\n          } else {\n            return Center(\n              child: CircularProgressIndicator(),\n            );\n          }\n        },\n      ),\n    );\n  }\n}\n```\n\n# 3. 앱 실행하기\n\n이제 다음을 실행하여 Flutter 앱을 실행할 수 있습니다:\n\n```js\nflutter run\n```\n\n<div class=\"content-ad\"></div>\n\n간단한 카운터 앱이 표시되어야 합니다. '증가' 및 '감소' 버튼이 있습니다. 앱의 상태는 CounterBloc을 사용하여 관리되며, UI는 상태 변경에 따라 업데이트됩니다.\n\n# 결론\n\n이 가이드에서는 flutter_bloc 패키지를 사용하여 Flutter에서 상태 관리의 기본을 탐구했습니다. Bloc를 설정하는 방법, 이벤트 및 상태를 생성하는 방법, 및 UI와 Bloc을 통합하는 방법을 보여주기 위해 간단한 카운터 앱을 만들었습니다.\n\nFlutter Bloc은 Flutter 애플리케이션에서 상태를 관리하는 강력한 도구이며, 프로젝트가 성장함에 따라 더 복잡한 시나리오에도 적용할 수 있습니다. BLoC 패턴을 따르고 비즈니스 로직을 UI와 분리함으로써 유지 관리 가능하고 확장 가능한 Flutter 앱을 구축할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 안내서가 플러터 Bloc을 시작하고 플러터 프로젝트에서 더 복잡한 상태 관리를 위한 기초를 제공하는 데 도움이 되기를 바랍니다. 즐거운 코딩 되세요!\n","ogImage":{"url":"/assets/img/2024-06-21-MasteringStateManagementinFlutterwithBlocAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-06-21-MasteringStateManagementinFlutterwithBlocAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>소개</p>\n<p>상태 관리는 견고하고 유지보수가 용이한 플러터 애플리케이션을 구축하는 중요한 측면입니다. 플러터는 다양한 상태 관리 옵션을 제공하며, 상태를 관리하는 가장 인기 있는 강력한 라이브러리 중 하나인 flutter_bloc 패키지가 있습니다. 이 포괄적인 가이드에서는 Bloc를 사용한 상태 관리의 기본 개념을 탐색하고 시작하는 데 도움이 되는 자세한 예제를 제공합니다.</p>\n<p><img src=\"/assets/img/2024-06-21-MasteringStateManagementinFlutterwithBlocAComprehensiveGuide_0.png\" alt=\"마스터링 플러터 Bloc를 이용한 상태 관리: 포괄적인 가이드\"></p>\n<h1>플러터 Bloc이란 무엇인가요?</h1>\n<div class=\"content-ad\"></div>\n<p>flutter_bloc은 Flutter 애플리케이션의 상태를 관리하기 위해 BLoC (Business Logic Component) 패턴을 활용하는 라이브러리입니다. 이는 데이터 및 이벤트의 흐름을 처리하는 구조화된 방법을 제공하여 코드베이스를 더 조직화하고 유지보수하기 쉽게 만들어줍니다. Bloc은 프리젠테이션 레이어를 비즈니스 로직에서 분리함으로써 깨끗하고 확장 가능한 아키텍처를 장려합니다.</p>\n<h1>Flutter 프로젝트 설정하기</h1>\n<p>예제에 들어가기 전에 새로운 Flutter 프로젝트를 설정하고 flutter_bloc 패키지를 종속성으로 추가해 봅시다. 이를 위해 다음 단계를 따라주세요:</p>\n<ul>\n<li>다음 명령어를 사용하여 새로운 Flutter 프로젝트를 생성합니다:</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">flutter create my_bloc_app\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>즐겨 사용하는 코드 편집기에서 프로젝트를 엽니다.</p>\n</li>\n<li>\n<p>pubspec.yaml 파일에 flutter_bloc를 추가하세요:</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">dependencies</span>:\n  <span class=\"hljs-attr\">flutter</span>:\n    <span class=\"hljs-attr\">sdk</span>: flutter\n  <span class=\"hljs-attr\">flutter_bloc</span>: ^<span class=\"hljs-number\">7.0</span><span class=\"hljs-number\">.0</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"4\">\n<li>의존성을 가져와 설치하려면 <code>flutter pub get</code>을 실행하세요.</li>\n</ol>\n<h1>카운터 앱 예제</h1>\n<p>이제 Bloc을 사용하여 카운터의 상태를 관리하는 간단한 Flutter 앱을 만들어 보겠습니다. 이 예제에서는 Bloc을 설정하는 방법, 이벤트와 상태를 만드는 방법 및 BlocProvider를 만드는 방법을 보여줍니다.</p>\n<h1>1. Bloc 만들기</h1>\n<div class=\"content-ad\"></div>\n<p>프로젝트에서 Bloc을 위한 새 Dart 파일을 만드세요. counter_bloc.dart라고 이름 짓겠어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter_bloc/flutter_bloc.dart'</span>;\n\n<span class=\"hljs-comment\">// 이벤트</span>\nabstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterEvent</span> {}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IncrementEvent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">CounterEvent</span> {}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DecrementEvent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">CounterEvent</span> {}\n\n<span class=\"hljs-comment\">// 상태</span>\nabstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterState</span> {}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InitialState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">CounterState</span> {}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UpdatedState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">CounterState</span> {\n  final int count;\n\n  <span class=\"hljs-title class_\">UpdatedState</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span>);\n}\n\n<span class=\"hljs-comment\">// Bloc</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterBloc</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Bloc</span>&#x3C;<span class=\"hljs-title class_\">CounterEvent</span>, <span class=\"hljs-title class_\">CounterState</span>> {\n  <span class=\"hljs-title class_\">CounterBloc</span>() : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-title class_\">InitialState</span>());\n\n  @override\n  <span class=\"hljs-title class_\">Stream</span>&#x3C;<span class=\"hljs-title class_\">CounterState</span>> <span class=\"hljs-title function_\">mapEventToState</span>(<span class=\"hljs-title class_\">CounterEvent</span> event) <span class=\"hljs-keyword\">async</span>* {\n    <span class=\"hljs-keyword\">if</span> (event is <span class=\"hljs-title class_\">IncrementEvent</span>) {\n      <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">UpdatedState</span>(state is <span class=\"hljs-title class_\">UpdatedState</span> ? (state <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">UpdatedState</span>).<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event is <span class=\"hljs-title class_\">DecrementEvent</span>) {\n      <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">UpdatedState</span>(state is <span class=\"hljs-title class_\">UpdatedState</span> ? (state <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">UpdatedState</span>).<span class=\"hljs-property\">count</span> - <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span>);\n    }\n  }\n}\n</code></pre>\n<h1>2. UI 만들기</h1>\n<p>이제 카운터 앱을 위한 간단한 UI를 만들어보세요. main.dart 파일에서 만들어보세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter_bloc/flutter_bloc.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'counter_bloc.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-title class_\">MyApp</span>());\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>(\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">BlocProvider</span>(\n        <span class=\"hljs-attr\">create</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">context</span>) =></span> <span class=\"hljs-title class_\">CounterBloc</span>(),\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">MyHomePage</span>(),\n      ),\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyHomePage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    final <span class=\"hljs-title class_\">CounterBloc</span> counterBloc = <span class=\"hljs-title class_\">BlocProvider</span>.<span class=\"hljs-property\">of</span>&#x3C;<span class=\"hljs-title class_\">CounterBloc</span>>(context);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Flutter Bloc Counter'</span>),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">BlocBuilder</span>&#x3C;<span class=\"hljs-title class_\">CounterBloc</span>, <span class=\"hljs-title class_\">CounterState</span>>(\n        <span class=\"hljs-attr\">builder</span>: (context, state) {\n          <span class=\"hljs-keyword\">if</span> (state is <span class=\"hljs-title class_\">UpdatedState</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Center</span>(\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n                <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n                <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n                  <span class=\"hljs-title class_\">Text</span>(\n                    <span class=\"hljs-string\">'Counter Value:'</span>,\n                    <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">20</span>),\n                  ),\n                  <span class=\"hljs-title class_\">Text</span>(\n                    <span class=\"hljs-string\">'${state.count}'</span>,\n                    <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">50</span>),\n                  ),\n                  <span class=\"hljs-title class_\">Row</span>(\n                    <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n                    <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n                      <span class=\"hljs-title class_\">FloatingActionButton</span>(\n                        <span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterBloc.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-title class_\">IncrementEvent</span>()),\n                        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">add</span>),\n                      ),\n                      <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">20</span>),\n                      <span class=\"hljs-title class_\">FloatingActionButton</span>(\n                        <span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterBloc.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-title class_\">DecrementEvent</span>()),\n                        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">remove</span>),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            );\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Center</span>(\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">CircularProgressIndicator</span>(),\n            );\n          }\n        },\n      ),\n    );\n  }\n}\n</code></pre>\n<h1>3. 앱 실행하기</h1>\n<p>이제 다음을 실행하여 Flutter 앱을 실행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">flutter run\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>간단한 카운터 앱이 표시되어야 합니다. '증가' 및 '감소' 버튼이 있습니다. 앱의 상태는 CounterBloc을 사용하여 관리되며, UI는 상태 변경에 따라 업데이트됩니다.</p>\n<h1>결론</h1>\n<p>이 가이드에서는 flutter_bloc 패키지를 사용하여 Flutter에서 상태 관리의 기본을 탐구했습니다. Bloc를 설정하는 방법, 이벤트 및 상태를 생성하는 방법, 및 UI와 Bloc을 통합하는 방법을 보여주기 위해 간단한 카운터 앱을 만들었습니다.</p>\n<p>Flutter Bloc은 Flutter 애플리케이션에서 상태를 관리하는 강력한 도구이며, 프로젝트가 성장함에 따라 더 복잡한 시나리오에도 적용할 수 있습니다. BLoC 패턴을 따르고 비즈니스 로직을 UI와 분리함으로써 유지 관리 가능하고 확장 가능한 Flutter 앱을 구축할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>이 안내서가 플러터 Bloc을 시작하고 플러터 프로젝트에서 더 복잡한 상태 관리를 위한 기초를 제공하는 데 도움이 되기를 바랍니다. 즐거운 코딩 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}