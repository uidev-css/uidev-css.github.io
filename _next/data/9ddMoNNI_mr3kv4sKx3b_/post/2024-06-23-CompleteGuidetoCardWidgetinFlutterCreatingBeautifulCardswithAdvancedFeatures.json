{"pageProps":{"post":{"title":"Flutter 카드 위젯 완벽 가이드 고급 기능을 활용한 아름다운 카드 만들기 방법","description":"","date":"2024-06-23 14:54","slug":"2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures","content":"\n![Card Widget](/assets/img/2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures_0.png)\n\n플러터 프레임워크의 Card 위젯은 그림자와 둥근 모서리를 가진 표면을 만들 수 있어서 기사, 목록 및 다른 UI 섹션에 정보를 표시하는 데 적합합니다. 이 위젯에는 카드의 모양을 사용자 지정할 수 있는 다양한 속성이 있습니다.\n\n1. 자식 위젯 지정:\n   Card 위젯은 카드의 내용으로 작동하는 자식 위젯을 허용합니다. 다음 예제는 카드 안에 텍스트를 배치하는 방법을 보여줍니다:\n\n```js\nCard(\n  child: Text('This is a card'),\n)\n```\n\n<div class=\"content-ad\"></div>\n\n2. 색상 설정\n   `color` 속성을 사용하여 카드의 배경색을 변경할 수 있습니다. 아래 예시는 다채로운 카드를 표시합니다:\n\n```js\nCard(\n  color: Colors.blue,\n  child: Text('Colored Card'),\n)\n```\n\n# 3. 고도 증가\n\n`elevation` 속성은 카드의 그림자 높이를 제어합니다. 이 속성에 더 큰 값이 할당되면 더 높은 그림자가 생성됩니다. 아래는 고도가 증가된 카드 예시입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nCard(\n  elevation: 8,\n  child: Text('Elevated Card'),\n)\n```\n\n# 4. 모양\n\n모양 속성을 사용하여 카드의 모서리 모양을 변경할 수 있습니다. 예를 들어, 모서리를 둥글게 만들 수 있습니다:\n\n```js\nCard(\n  shape: RoundedRectangleBorder(\n    borderRadius: BorderRadius.circular(15.0),\n  ),\n  child: Text('Rounded Corners Card'),\n)\n```\n\n<div class=\"content-ad\"></div>\n\n# 5. 여백\n\n카드의 여백은 margin 속성을 사용하여 설정할 수 있습니다:\n\n```js\nCard(\n  margin: EdgeInsets.all(16.0),\n  child: Text('여백 카드'),\n)\n```\n\n# 6. 전경 제어에 대한 테두리\n\n<div class=\"content-ad\"></div>\n\n`borderOnForeground` 속성을 사용하면 카드의 테두리가 전경에 배치되는지 여부를 제어할 수 있습니다:\n\n```js\nCard(\n  borderOnForeground: false,\n  child: Text('테두리가 전경에 표시되지 않는 카드'),\n)\n```\n\n# 7. 클립 동작\n\n`clipBehavior` 속성을 사용하면 카드 내부 콘텐츠가 어떻게 클립되는지 결정할 수 있습니다. 가능한 값으로 Clip.none, Clip.hardEdge 및 Clip.antiAlias가 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nCard(\n  clipBehavior: Clip.antiAlias,\n  child: Text('Anti-aliased Clip Card'),\n)\n```\n\n# 8. 시맨틱 컨테이너\n\n만약 이 속성이 true이면, 카드는 시맨틱 컨테이너로 정의되며, 그렇지 않으면 자식 요소의 의미론이 가장 가까운 둘러싸는 시맨틱 컨테이너와 병합됩니다.\n\n```js\nCard(\n  semanticContainer: true,\n  child: Text('Semantic Container Card'),\n)\n```\n\n<div class=\"content-ad\"></div>\n\n# 9. 그림자 색상\n\n그림자 색상을 설정하려면 shadowColor 속성을 사용할 수 있습니다:\n\n```js\nCard(\n  shadowColor: Colors.red,\n  child: Text('그림자 색상 카드'),\n)\n```\n\n# 10. 테두리 반지름\n\n<div class=\"content-ad\"></div>\n\nborderRadius 속성을 사용하여 카드의 모서리의 반지름을 설정할 수 있습니다.\n\n```js\nCard(\n  shape: RoundedRectangleBorder(\n    borderRadius: BorderRadius.circular(30.0),\n  ),\n  child: Text('사용자 정의 보더 반경 카드'),\n)\n```\n\n<img src=\"/assets/img/2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures_1.png\" />\n\n플러터의 Card 위젯의 다양한 기능을 활용하여, Material Design 표준에 부합하는 다양한 외관의 카드를 생성할 수 있습니다. 이러한 기능을 통해 시각적으로 매력적이며 이해하기 쉽고 직관적인 사용자 인터페이스를 만들 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures_0.png"},"coverImage":"/assets/img/2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures_0.png\" alt=\"Card Widget\"></p>\n<p>플러터 프레임워크의 Card 위젯은 그림자와 둥근 모서리를 가진 표면을 만들 수 있어서 기사, 목록 및 다른 UI 섹션에 정보를 표시하는 데 적합합니다. 이 위젯에는 카드의 모양을 사용자 지정할 수 있는 다양한 속성이 있습니다.</p>\n<ol>\n<li>자식 위젯 지정:\nCard 위젯은 카드의 내용으로 작동하는 자식 위젯을 허용합니다. 다음 예제는 카드 안에 텍스트를 배치하는 방법을 보여줍니다:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'This is a card'</span>),\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>색상 설정\n<code>color</code> 속성을 사용하여 카드의 배경색을 변경할 수 있습니다. 아래 예시는 다채로운 카드를 표시합니다:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Colored Card'</span>),\n)\n</code></pre>\n<h1>3. 고도 증가</h1>\n<p><code>elevation</code> 속성은 카드의 그림자 높이를 제어합니다. 이 속성에 더 큰 값이 할당되면 더 높은 그림자가 생성됩니다. 아래는 고도가 증가된 카드 예시입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">elevation</span>: <span class=\"hljs-number\">8</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Elevated Card'</span>),\n)\n</code></pre>\n<h1>4. 모양</h1>\n<p>모양 속성을 사용하여 카드의 모서리 모양을 변경할 수 있습니다. 예를 들어, 모서리를 둥글게 만들 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-title class_\">RoundedRectangleBorder</span>(\n    <span class=\"hljs-attr\">borderRadius</span>: <span class=\"hljs-title class_\">BorderRadius</span>.<span class=\"hljs-title function_\">circular</span>(<span class=\"hljs-number\">15.0</span>),\n  ),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Rounded Corners Card'</span>),\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>5. 여백</h1>\n<p>카드의 여백은 margin 속성을 사용하여 설정할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-number\">16.0</span>),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'여백 카드'</span>),\n)\n</code></pre>\n<h1>6. 전경 제어에 대한 테두리</h1>\n<div class=\"content-ad\"></div>\n<p><code>borderOnForeground</code> 속성을 사용하면 카드의 테두리가 전경에 배치되는지 여부를 제어할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">borderOnForeground</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'테두리가 전경에 표시되지 않는 카드'</span>),\n)\n</code></pre>\n<h1>7. 클립 동작</h1>\n<p><code>clipBehavior</code> 속성을 사용하면 카드 내부 콘텐츠가 어떻게 클립되는지 결정할 수 있습니다. 가능한 값으로 Clip.none, Clip.hardEdge 및 Clip.antiAlias가 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">clipBehavior</span>: <span class=\"hljs-title class_\">Clip</span>.<span class=\"hljs-property\">antiAlias</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Anti-aliased Clip Card'</span>),\n)\n</code></pre>\n<h1>8. 시맨틱 컨테이너</h1>\n<p>만약 이 속성이 true이면, 카드는 시맨틱 컨테이너로 정의되며, 그렇지 않으면 자식 요소의 의미론이 가장 가까운 둘러싸는 시맨틱 컨테이너와 병합됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">semanticContainer</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Semantic Container Card'</span>),\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>9. 그림자 색상</h1>\n<p>그림자 색상을 설정하려면 shadowColor 속성을 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">shadowColor</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'그림자 색상 카드'</span>),\n)\n</code></pre>\n<h1>10. 테두리 반지름</h1>\n<div class=\"content-ad\"></div>\n<p>borderRadius 속성을 사용하여 카드의 모서리의 반지름을 설정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Card</span>(\n  <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-title class_\">RoundedRectangleBorder</span>(\n    <span class=\"hljs-attr\">borderRadius</span>: <span class=\"hljs-title class_\">BorderRadius</span>.<span class=\"hljs-title function_\">circular</span>(<span class=\"hljs-number\">30.0</span>),\n  ),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'사용자 정의 보더 반경 카드'</span>),\n)\n</code></pre>\n<img src=\"/assets/img/2024-06-23-CompleteGuidetoCardWidgetinFlutterCreatingBeautifulCardswithAdvancedFeatures_1.png\">\n<p>플러터의 Card 위젯의 다양한 기능을 활용하여, Material Design 표준에 부합하는 다양한 외관의 카드를 생성할 수 있습니다. 이러한 기능을 통해 시각적으로 매력적이며 이해하기 쉽고 직관적인 사용자 인터페이스를 만들 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}