{"pageProps":{"post":{"title":"Flutter GetX 상태 관리 쉽게 이해하기","description":"","date":"2024-06-23 14:58","slug":"2024-06-23-FlutterGetXStateManagement","content":"\n<img src=\"/assets/img/2024-06-23-FlutterGetXStateManagement_0.png\" />\n\nGetX는 가벼우면서 뛰어난 성능을 제공하는 Flutter 패키지입니다. 상태 관리에 국한되지 않고 네비게이션, 의존성 주입 및 국제화 기능도 포함하고 있어 Flutter 개발자를 위한 다목적 도구상자입니다. GetX는 그 간결함, 성능 및 다양한 기능으로 알려져 있습니다. Flutter 개발에서 일반적인 작업을 위한 추가적인 유틸리티와 함께 가벼우면서 반응적인 상태 관리 솔루션을 선호하는 개발자들에게 적합한 선택입니다. 이 패키지의 유연성과 사용 편의성은 Flutter 커뮤니티 내에서 인기를 끌고 있습니다.\n\n## GetX 상태 관리의 주요 기능:\n\n<img src=\"/assets/img/2024-06-23-FlutterGetXStateManagement_1.png\" />\n\n<div class=\"content-ad\"></div>\n\nReactive State Management:\n\n```js\nfinal count = 0.obs;\n\n// In the UI:\nObx(() => Text('Count: ${controller.count}'));\n```\n\n의존성 주입:\n\n```js\nGet.lazyPut < MyService > (() => MyService());\n```\n\n<div class=\"content-ad\"></div>\n\n경로 관리:\n\n```js\nGet.toNamed(\"/next\");\n```\n\n스낵바 및 대화상자:\n\n```js\nGet.snackbar(\"제목\", \"이것은 스낵바입니다\");\n```\n\n<div class=\"content-ad\"></div>\n\nStateMixin:\n\n```js\nclass MyController extends GetxController with StateMixin<String> {\n  @override\n  void onInit() {\n    super.onInit();\n    change('Initial Data', status: RxStatus.success());\n  }\n}\n```\n\nGetX Service:\n\n```js\nclass MyService extends GetxService {\n  // ...\n}\n```\n\n<div class=\"content-ad\"></div>\n\n국제화 (i18n):\n\n```js\n\"hello\".tr;\n```\n\nGetX 빌더:\n\n```js\nGetBuilder<MyController>(\nbuilder: (_) {\nreturn Text('Value: ${_.myValue}');\n},\n)\n```\n\n<div class=\"content-ad\"></div>\n\n# GetX 설정하기\n\nGetX를 Flutter 프로젝트에서 사용하려면, 다음 종속성을 `pubspec.yaml` 파일에 추가해주세요:\n\n```yaml\ndependencies:\n  get: ^4.6.6\n```\n\nget install | Flutter 패키지 (pub.dev)\n\n<div class=\"content-ad\"></div>\n\n# GetX를 사용한 간단한 카운터 예제\n\n```js\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass CounterController extends GetxController {\n  // observable 변수 선언 (RxInt)\n  RxInt count = 0.obs;\n\n  // 카운터 증가 함수\n  void increment() {\n    count++;\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  // 카운터 컨트롤러 인스턴스화\n  final CounterController controller = CounterController();\n\n  @override\n  Widget build(BuildContext context) {\n    return GetMaterialApp(\n      title: 'GetX 카운터 앱',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('GetX 카운터 앱'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              // Obx 위젯은 observable 변수의 변경 사항을 감지\n              Obx(() => Text(\n                '카운트: ${controller.count}',\n                style: TextStyle(fontSize: 24),\n              )),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // 버튼을 눌렀을 때 increment 함수 호출\n                  controller.increment();\n                },\n                child: Text('증가'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n","ogImage":{"url":"/assets/img/2024-06-23-FlutterGetXStateManagement_0.png"},"coverImage":"/assets/img/2024-06-23-FlutterGetXStateManagement_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-23-FlutterGetXStateManagement_0.png\">\n<p>GetX는 가벼우면서 뛰어난 성능을 제공하는 Flutter 패키지입니다. 상태 관리에 국한되지 않고 네비게이션, 의존성 주입 및 국제화 기능도 포함하고 있어 Flutter 개발자를 위한 다목적 도구상자입니다. GetX는 그 간결함, 성능 및 다양한 기능으로 알려져 있습니다. Flutter 개발에서 일반적인 작업을 위한 추가적인 유틸리티와 함께 가벼우면서 반응적인 상태 관리 솔루션을 선호하는 개발자들에게 적합한 선택입니다. 이 패키지의 유연성과 사용 편의성은 Flutter 커뮤니티 내에서 인기를 끌고 있습니다.</p>\n<h2>GetX 상태 관리의 주요 기능:</h2>\n<img src=\"/assets/img/2024-06-23-FlutterGetXStateManagement_1.png\">\n<div class=\"content-ad\"></div>\n<p>Reactive State Management:</p>\n<pre><code class=\"hljs language-js\">final count = <span class=\"hljs-number\">0.</span>obs;\n\n<span class=\"hljs-comment\">// In the UI:</span>\n<span class=\"hljs-title class_\">Obx</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Count: ${controller.count}'</span>));\n</code></pre>\n<p>의존성 주입:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Get</span>.<span class=\"hljs-property\">lazyPut</span> &#x3C; <span class=\"hljs-title class_\">MyService</span> > (<span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">MyService</span>());\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>경로 관리:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Get</span>.<span class=\"hljs-title function_\">toNamed</span>(<span class=\"hljs-string\">\"/next\"</span>);\n</code></pre>\n<p>스낵바 및 대화상자:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Get</span>.<span class=\"hljs-title function_\">snackbar</span>(<span class=\"hljs-string\">\"제목\"</span>, <span class=\"hljs-string\">\"이것은 스낵바입니다\"</span>);\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>StateMixin:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">GetxController</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title class_\">StateMixin</span>&#x3C;<span class=\"hljs-title class_\">String</span>> {\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onInit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">onInit</span>();\n    <span class=\"hljs-title function_\">change</span>(<span class=\"hljs-string\">'Initial Data'</span>, <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">RxStatus</span>.<span class=\"hljs-title function_\">success</span>());\n  }\n}\n</code></pre>\n<p>GetX Service:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyService</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">GetxService</span> {\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>국제화 (i18n):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"hello\"</span>.<span class=\"hljs-property\">tr</span>;\n</code></pre>\n<p>GetX 빌더:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">GetBuilder</span>&#x3C;<span class=\"hljs-title class_\">MyController</span>>(\n<span class=\"hljs-attr\">builder</span>: (_) {\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Value: ${_.myValue}'</span>);\n},\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>GetX 설정하기</h1>\n<p>GetX를 Flutter 프로젝트에서 사용하려면, 다음 종속성을 <code>pubspec.yaml</code> 파일에 추가해주세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">get:</span> <span class=\"hljs-string\">^4.6.6</span>\n</code></pre>\n<p>get install | Flutter 패키지 (pub.dev)</p>\n<div class=\"content-ad\"></div>\n<h1>GetX를 사용한 간단한 카운터 예제</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:get/get.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-title class_\">MyApp</span>());\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">GetxController</span> {\n  <span class=\"hljs-comment\">// observable 변수 선언 (RxInt)</span>\n  <span class=\"hljs-title class_\">RxInt</span> count = <span class=\"hljs-number\">0.</span>obs;\n\n  <span class=\"hljs-comment\">// 카운터 증가 함수</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) {\n    count++;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  <span class=\"hljs-comment\">// 카운터 컨트롤러 인스턴스화</span>\n  final <span class=\"hljs-title class_\">CounterController</span> controller = <span class=\"hljs-title class_\">CounterController</span>();\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">GetMaterialApp</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'GetX 카운터 앱'</span>,\n      <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-title class_\">ThemeData</span>(\n        <span class=\"hljs-attr\">primarySwatch</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n      ),\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">Scaffold</span>(\n        <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'GetX 카운터 앱'</span>),\n        ),\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n          <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n            <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n            <span class=\"hljs-attr\">children</span>: [\n              <span class=\"hljs-comment\">// Obx 위젯은 observable 변수의 변경 사항을 감지</span>\n              <span class=\"hljs-title class_\">Obx</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">Text</span>(\n                <span class=\"hljs-string\">'카운트: ${controller.count}'</span>,\n                <span class=\"hljs-attr\">style</span>: <span class=\"hljs-title class_\">TextStyle</span>(<span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">24</span>),\n              )),\n              <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">20</span>),\n              <span class=\"hljs-title class_\">ElevatedButton</span>(\n                <span class=\"hljs-attr\">onPressed</span>: () {\n                  <span class=\"hljs-comment\">// 버튼을 눌렀을 때 increment 함수 호출</span>\n                  controller.<span class=\"hljs-title function_\">increment</span>();\n                },\n                <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'증가'</span>),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}