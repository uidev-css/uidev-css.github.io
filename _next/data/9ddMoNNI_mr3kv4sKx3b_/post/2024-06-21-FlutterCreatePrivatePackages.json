{"pageProps":{"post":{"title":"Flutter 프라이빗 패키지 만드는 방법","description":"","date":"2024-06-21 20:13","slug":"2024-06-21-FlutterCreatePrivatePackages","content":"\n![Flutter Create Private Packages](/assets/img/2024-06-21-FlutterCreatePrivatePackages_0.png)\n\nFlutter 패키지와 함께한 나의 여정은 처음부터 하나를 만들어야 했을 때 시작되었습니다. 오늘은 이 주제에 대한 나의 경험과 통찰을 공유하는 것에 흥분하고 있습니다. Google I/O’23에서도 이에 대해 논의했지만, 여기에서는 개념을 이해하고 자신만의 패키지를 구축하려는 분들을 위한 내용입니다.\n\n# 패키지와 플러그인 이해\n\n<div class=\"content-ad\"></div>\n\n패키지는 라이브러리, 리소스, 앱, 테스트, 이미지, 글꼴 및 예시로 이루어진 다트 코드의 자체 포함 컬렉션이에요. 이것들은 어떤 네이티브 플랫폼에도 독립적이에요. 예를 들어, UI 구성 요소의 구현에 사용될 수 있어요.\n\n플러그인\n\n플러그인은 플랫폼별 및 다트 코드로 작성된 API를 포함하고 있어요. 플러그인은 카메라와 같은 기기 특성에 접근하기 위해 필수적이에요.\n\n# 의존성 관리\n\n<div class=\"content-ad\"></div>\n\n패키지 생성의 구성을 자세히 살펴보기 전에 의존성 관리가 무엇인지 이해하는 것이 중요합니다. 개발자들이 플러터 프로젝트에서 사용할 수 있는 의존성을 추적하고 관리할 수 있도록 해줍니다. 이를 통해 프로젝트에 빠르게 기능을 구현할 수 있는 패키지의 버전을 추적하고, 이러한 패키지들이 서로 호환되도록 보장할 수 있습니다.\n\n프로젝트에 패키지가 추가되면 의존성이 됩니다. 세 가지 유형의 의존성 구성이 있습니다:\n\n- dependencies\n- dev dependencies\n- dependency overrides\n\n이 구성 간의 차이는 간단합니다:\n\n<div class=\"content-ad\"></div>\n\n- dependencies와 dependency_overrides은 컴파일 후 프로젝트에서 사용할 수 있는 패키지입니다.\n- dev_dependencies은 개발 환경에서만 사용할 수 있습니다.\n\n의존성 분류\n\n의존성은 다음과 같이 분류할 수 있습니다:\n\n- 중간 의존성: 프로젝트와 직접 관련된 의존성입니다.\n- 전이적 의존성: 다른 패키지에 의존하는 패키지입니다.\n\n<div class=\"content-ad\"></div>\n\n# 버전 관리\n\n의존성이 추가되고 제약 조건과 함께 추가되었을 때, 앱에서 생성된 락 파일은 추가된 특정 버전만 사용합니다.\n\n![image](/assets/img/2024-06-21-FlutterCreatePrivatePackages_1.png)\n\n위의 예시 이미지를 살펴보면, package_a 및 package_c가 의존성에 추가되었으며, package_b는 개발 의존성에 있고 package_c는 의존성 재정의에 있습니다. 락 파일은 \"의존성\"에 추가된 것이 아닌 버전 2.1.0의 Package_c를 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 플러터 패키지 만들기\n\n자, 이제 실제 플러터 패키지를 만드는 과정에 대해 알아봅시다. 다음 명령어를 사용하여 패키지를 생성하세요:\n\n```bash\nflutter packages pub publish\n```\n\n- [packages] — 플러터 프로젝트에서 패키지를 관리합니다.\n- [pub] — 패키지에 문제나 누락된 정보를 확인하는 데 사용되는 유효성 검사기입니다.\n- [publish] — 패키지를 게시하는 명령어입니다.\n\n<div class=\"content-ad\"></div>\n\n패키지는 사용 사례에 따라 공개적으로 또는 비공개적으로 배포할 수 있습니다. 비공개 패키지는 pub.dev에 게시할 수 없습니다. 대신 GitHub와 같은 플랫폼이나 서비스로 다트 저장소에 호스팅할 수 있습니다. 일부 서비스로는 다음이 있습니다:\n\n- OnePub\n- Cloudsmith\n- Ifrog 저장소\n- Jetbrains Space\n\n# OnePub을 활용하기\n\nOnePub에 연결하여 패키지를 게시하려면 다음 단계를 따르세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nflutter pub global active onepub\ncd <내 패키지>\nflutter pub publish\n```\n\n패키지를 비공개로 호스팅하려면 publish를 사용해 저장소를 가리키도록합니다:\n\n![이미지](/assets/img/2024-06-21-FlutterCreatePrivatePackages_2.png)\n\n한 번 발행되면 패키지를 비공개로 호스팅하여 권한이있는 사용자에게만 액세스 가능하도록 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_3.png\" />\n\n# 보안 고려 사항\n\n- 어택에게 코드를 역공학으로 복원하기 어렵게 만들기 위해 --obfuscate를 사용하세요.\n- 보안 취약점이 소개되지 않도록 코드와 종속성을 자주 검토하세요.\n- 제 3자 종속성을 사용할 경우 보안 및 취약성을 확인하세요.\n- 공격자가 미인가된 액세스를 얻지 못하도록 민감한 정보를 삭제하세요.\n- 취약점을 검사하여 보안 문제를 식별하고 해결하는 데 도움이 됩니다.\n\n여기서 플러터 패키지를 만드는 방법에 대해 알아보았습니다. 필요한 경우 댓글에서 추가로 의견을 남겨주세요. 함께 학습할 수 있도록 도와드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# 참고 자료\n\n패키지 발행하기\n\nDart 패키지를 pub.dev에 발행하는 방법을 배우세요.\n\n![이미지](/assets/img/2024-06-21-FlutterCreatePrivatePackages_4.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nDart\n\n![image](/assets/img/2024-06-21-FlutterCreatePrivatePackages_5.png)\n\nDeveloping packages & plugins\n\nHow to write packages and plugins for Flutter.\n```\n\n<div class=\"content-ad\"></div>\n\n아래가 markdown 형식으로 변환됐습니다.\n\n![Flutter Logo](/assets/img/2024-06-21-FlutterCreatePrivatePackages_6.png)\n\n![Package dependencies](/assets/img/2024-06-21-FlutterCreatePrivatePackages_7.png)\n\n<div class=\"content-ad\"></div>\n\n앱에 다른 패키지를 추가해보세요. 패키지 위치, 버전 제한 등을 명시하세요.\n\n![image1](/assets/img/2024-06-21-FlutterCreatePrivatePackages_8.png)\n\nDart\n\n![image2](/assets/img/2024-06-21-FlutterCreatePrivatePackages_9.png)\n\n<div class=\"content-ad\"></div>\n\n저에 대해\n\n안녕하세요! 제 이름은 Zaahra입니다. 구글 Women Techmakers 대사로 활동하고 있습니다. 사람들을 지도하고 기술적인 내용을 쓰는 것을 즐기며, 개발자로서 여러분의 여정을 도울 수 있는 기술 콘텐츠에 대해 글을 쓰는 것을 즐깁니다. 또한 실생활 문제를 해결하기 위해 무언가를 만드는 것을 즐깁니다.\n\n제게 연락하려면:\n\n<div class=\"content-ad\"></div>\n\n마크다운 형식으로 변환하겠습니다.\n\nLinkedIn: [https://www.linkedin.com/in/faatimah-iz-zaahra-m-0670881a1/](https://www.linkedin.com/in/faatimah-iz-zaahra-m-0670881a1/)\n\nX (이전 Twitter): \\_fz3hra\n\nGitHub: [https://github.com/fz3hra](https://github.com/fz3hra)\n\n건배,\n\n<div class=\"content-ad\"></div>\n\nUmme Faatimah-Iz-Zaahra Mujore | Google Women TechMakers 대사 | 소프트웨어 엔지니어\n","ogImage":{"url":"/assets/img/2024-06-21-FlutterCreatePrivatePackages_0.png"},"coverImage":"/assets/img/2024-06-21-FlutterCreatePrivatePackages_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_0.png\" alt=\"Flutter Create Private Packages\"></p>\n<p>Flutter 패키지와 함께한 나의 여정은 처음부터 하나를 만들어야 했을 때 시작되었습니다. 오늘은 이 주제에 대한 나의 경험과 통찰을 공유하는 것에 흥분하고 있습니다. Google I/O’23에서도 이에 대해 논의했지만, 여기에서는 개념을 이해하고 자신만의 패키지를 구축하려는 분들을 위한 내용입니다.</p>\n<h1>패키지와 플러그인 이해</h1>\n<div class=\"content-ad\"></div>\n<p>패키지는 라이브러리, 리소스, 앱, 테스트, 이미지, 글꼴 및 예시로 이루어진 다트 코드의 자체 포함 컬렉션이에요. 이것들은 어떤 네이티브 플랫폼에도 독립적이에요. 예를 들어, UI 구성 요소의 구현에 사용될 수 있어요.</p>\n<p>플러그인</p>\n<p>플러그인은 플랫폼별 및 다트 코드로 작성된 API를 포함하고 있어요. 플러그인은 카메라와 같은 기기 특성에 접근하기 위해 필수적이에요.</p>\n<h1>의존성 관리</h1>\n<div class=\"content-ad\"></div>\n<p>패키지 생성의 구성을 자세히 살펴보기 전에 의존성 관리가 무엇인지 이해하는 것이 중요합니다. 개발자들이 플러터 프로젝트에서 사용할 수 있는 의존성을 추적하고 관리할 수 있도록 해줍니다. 이를 통해 프로젝트에 빠르게 기능을 구현할 수 있는 패키지의 버전을 추적하고, 이러한 패키지들이 서로 호환되도록 보장할 수 있습니다.</p>\n<p>프로젝트에 패키지가 추가되면 의존성이 됩니다. 세 가지 유형의 의존성 구성이 있습니다:</p>\n<ul>\n<li>dependencies</li>\n<li>dev dependencies</li>\n<li>dependency overrides</li>\n</ul>\n<p>이 구성 간의 차이는 간단합니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>dependencies와 dependency_overrides은 컴파일 후 프로젝트에서 사용할 수 있는 패키지입니다.</li>\n<li>dev_dependencies은 개발 환경에서만 사용할 수 있습니다.</li>\n</ul>\n<p>의존성 분류</p>\n<p>의존성은 다음과 같이 분류할 수 있습니다:</p>\n<ul>\n<li>중간 의존성: 프로젝트와 직접 관련된 의존성입니다.</li>\n<li>전이적 의존성: 다른 패키지에 의존하는 패키지입니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>버전 관리</h1>\n<p>의존성이 추가되고 제약 조건과 함께 추가되었을 때, 앱에서 생성된 락 파일은 추가된 특정 버전만 사용합니다.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_1.png\" alt=\"image\"></p>\n<p>위의 예시 이미지를 살펴보면, package_a 및 package_c가 의존성에 추가되었으며, package_b는 개발 의존성에 있고 package_c는 의존성 재정의에 있습니다. 락 파일은 \"의존성\"에 추가된 것이 아닌 버전 2.1.0의 Package_c를 사용할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>플러터 패키지 만들기</h1>\n<p>자, 이제 실제 플러터 패키지를 만드는 과정에 대해 알아봅시다. 다음 명령어를 사용하여 패키지를 생성하세요:</p>\n<pre><code class=\"hljs language-bash\">flutter packages pub publish\n</code></pre>\n<ul>\n<li>[packages] — 플러터 프로젝트에서 패키지를 관리합니다.</li>\n<li>[pub] — 패키지에 문제나 누락된 정보를 확인하는 데 사용되는 유효성 검사기입니다.</li>\n<li>[publish] — 패키지를 게시하는 명령어입니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>패키지는 사용 사례에 따라 공개적으로 또는 비공개적으로 배포할 수 있습니다. 비공개 패키지는 pub.dev에 게시할 수 없습니다. 대신 GitHub와 같은 플랫폼이나 서비스로 다트 저장소에 호스팅할 수 있습니다. 일부 서비스로는 다음이 있습니다:</p>\n<ul>\n<li>OnePub</li>\n<li>Cloudsmith</li>\n<li>Ifrog 저장소</li>\n<li>Jetbrains Space</li>\n</ul>\n<h1>OnePub을 활용하기</h1>\n<p>OnePub에 연결하여 패키지를 게시하려면 다음 단계를 따르세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">flutter pub <span class=\"hljs-variable language_\">global</span> active onepub\ncd &#x3C;내 패키지>\nflutter pub publish\n</code></pre>\n<p>패키지를 비공개로 호스팅하려면 publish를 사용해 저장소를 가리키도록합니다:</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_2.png\" alt=\"이미지\"></p>\n<p>한 번 발행되면 패키지를 비공개로 호스팅하여 권한이있는 사용자에게만 액세스 가능하도록 할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_3.png\">\n<h1>보안 고려 사항</h1>\n<ul>\n<li>어택에게 코드를 역공학으로 복원하기 어렵게 만들기 위해 --obfuscate를 사용하세요.</li>\n<li>보안 취약점이 소개되지 않도록 코드와 종속성을 자주 검토하세요.</li>\n<li>제 3자 종속성을 사용할 경우 보안 및 취약성을 확인하세요.</li>\n<li>공격자가 미인가된 액세스를 얻지 못하도록 민감한 정보를 삭제하세요.</li>\n<li>취약점을 검사하여 보안 문제를 식별하고 해결하는 데 도움이 됩니다.</li>\n</ul>\n<p>여기서 플러터 패키지를 만드는 방법에 대해 알아보았습니다. 필요한 경우 댓글에서 추가로 의견을 남겨주세요. 함께 학습할 수 있도록 도와드리겠습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>참고 자료</h1>\n<p>패키지 발행하기</p>\n<p>Dart 패키지를 pub.dev에 발행하는 방법을 배우세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_4.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Dart</span>\n\n![image](<span class=\"hljs-regexp\">/assets/img</span><span class=\"hljs-regexp\">/2024-06-21-FlutterCreatePrivatePackages_5.png)\n\nDeveloping packages &#x26; plugins\n\nHow to write packages and plugins for Flutter.\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<p>아래가 markdown 형식으로 변환됐습니다.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_6.png\" alt=\"Flutter Logo\"></p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_7.png\" alt=\"Package dependencies\"></p>\n<div class=\"content-ad\"></div>\n<p>앱에 다른 패키지를 추가해보세요. 패키지 위치, 버전 제한 등을 명시하세요.</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_8.png\" alt=\"image1\"></p>\n<p>Dart</p>\n<p><img src=\"/assets/img/2024-06-21-FlutterCreatePrivatePackages_9.png\" alt=\"image2\"></p>\n<div class=\"content-ad\"></div>\n<p>저에 대해</p>\n<p>안녕하세요! 제 이름은 Zaahra입니다. 구글 Women Techmakers 대사로 활동하고 있습니다. 사람들을 지도하고 기술적인 내용을 쓰는 것을 즐기며, 개발자로서 여러분의 여정을 도울 수 있는 기술 콘텐츠에 대해 글을 쓰는 것을 즐깁니다. 또한 실생활 문제를 해결하기 위해 무언가를 만드는 것을 즐깁니다.</p>\n<p>제게 연락하려면:</p>\n<div class=\"content-ad\"></div>\n<p>마크다운 형식으로 변환하겠습니다.</p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/faatimah-iz-zaahra-m-0670881a1/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/faatimah-iz-zaahra-m-0670881a1/</a></p>\n<p>X (이전 Twitter): _fz3hra</p>\n<p>GitHub: <a href=\"https://github.com/fz3hra\" rel=\"nofollow\" target=\"_blank\">https://github.com/fz3hra</a></p>\n<p>건배,</p>\n<div class=\"content-ad\"></div>\n<p>Umme Faatimah-Iz-Zaahra Mujore | Google Women TechMakers 대사 | 소프트웨어 엔지니어</p>\n</body>\n</html>\n"},"__N_SSG":true}