{"pageProps":{"post":{"title":"Flutter 숨겨진 보물 탐험 잘 알려지지 않은 위젯 공개  Part 3","description":"","date":"2024-06-30 18:46","slug":"2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3","content":"\n플러터는 다양하고 시각적으로 멋진 애플리케이션을 개발할 수 있도록 개발자들에게 넓은 위젯 카탈로그로 유명합니다. 자주 사용되는 위젯들은 잘 알려져 있지만, 플러터는 잘 알려지지 않지만 매우 유용한 다양한 위젯들도 제공합니다. UI의 세련됨과 기능성을 향상시킬 수 있는 이런 숨겨진 보석들을 알아보겠습니다.\n\n![이미지](/assets/img/2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3_0.png)\n\n### 1. FadeInImage\n\nFadeInImage는 주 이미지가 로딩되는 동안 플레이스홀더 이미지를 표시할 수 있는 위젯입니다. 네트워크에서 이미지를 다룰 때 사용자 경험을 향상시키는 데 특히 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nFadeInImage(\n  placeholder: AssetImage('assets/placeholder.png'),\n  image: NetworkImage('https://example.com/image.jpg'),\n)\n```\n\n## 2. GridPaper\n\nGridPaper은 레이아웃 디버깅을 위한 편리한 위젯입니다. 앱에 그리드를 겹쳐서 간격, 정렬 및 레이아웃 문제를 시각화하기 쉽게 만들어줍니다.\n\n```js\nGridPaper(\n  color: Colors.blueAccent,\n  divisions: 4,\n  interval: 100.0,\n  subdivisions: 2,\n)\n```\n\n<div class=\"content-ad\"></div>\n\n## 3. 히어로\n\n히어로는 위젯을 화면에서 다른 화면으로 부드럽게 전환하여 라우트 간에 애니메이션을 제공합니다. 시각적으로 매력적인 네비게이션 애니메이션을 만드는 데 이상적입니다.\n\n```js\nHero(\n  tag: 'hero-image',\n  child: Image.network('https://example.com/image.jpg'),\n)\n```\n\n## 4. KeepAlive\n\n<div class=\"content-ad\"></div>\n\nKeepAlive은 위젯이 화면에서 벗어나도 위젯 트리에 유지되도록 돕습니다. 이는 ListView 또는 PageView에서 위젯의 상태를 유지하는 데 특히 유용합니다.\n\n```js\nclass MyStatefulWidget extends StatefulWidget {\n  @override\n  _MyStatefulWidgetState createState() => _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State<MyStatefulWidget> with AutomaticKeepAliveClientMixin<MyStatefulWidget> {\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return Container();\n  }\n}\n```\n\n## 5. ListBody\n\nListBody는 주어진 축을 따라 자식 위젯을 선형 배열로 정렬합니다. 간단한 리스트 레이아웃이 필요한 경우 Column 및 Row 대신 간단한 대안으로 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nListBody(\n  children: <Widget>[\n    Text('Item 1'),\n    Text('Item 2'),\n    Text('Item 3'),\n  ],\n)\n```\n\n## 6. MenuRegion\n\nMenuRegion은 앱에서 컨텍스트 메뉴를 정의하는 데 사용됩니다. 이 위젯은 데스크톱 애플리케이션에서 마우스 오른쪽 클릭 컨텍스트 메뉴가 흔한 경우에 유용합니다.\n\n```js\nMenuRegion(\n  child: Container(\n    color: Colors.blue,\n    width: 100,\n    height: 100,\n  ),\n)\n```\n\n<div class=\"content-ad\"></div>\n\n## 7. LookUpBoundary\n\nLookUpBoundary은 InheritedWidget 조회 범위를 제한하는 위젯입니다. 위젯 트리의 재구성 동작을 최적화하고 제어하는 데 유용합니다.\n\n```js\nLookUpBoundary(\n  child: MyInheritedWidget(\n    child: MyWidget(),\n  ),\n)\n```\n\n## 8. Listener\n\n<div class=\"content-ad\"></div>\n\n리스너는 터치, 마우스, 스타일러스 상호작용과 같은 포인터 이벤트를 감지합니다. 이 위젯은 사용자 정의 제스처와 상호작용을 구현하는 데 유용합니다.\n\n```js\nListener(\n  onPointerDown: (PointerDownEvent event) => print('Pointer down event'),\n  child: Container(\n    color: Colors.red,\n    width: 100,\n    height: 100,\n  ),\n)\n```\n\n## 9. 확대경\n\n확대경은 특정 영역에 확대 효과를 제공합니다. 이는 접근성을 향상시키고 특정 시나리오에서 사용자 경험을 향상하는 데 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n확대기(\n  자식: Text('나를 확대해주세요!'),\n)\n```\n\n## 10. 메뉴 앵커\n\n메뉴 앵커는 특정 위치에 메뉴를 고정하는 데 사용됩니다. 사용자 정의 드롭다운 메뉴와 컨텍스트 메뉴를 만드는 데 유용합니다.\n\n```js\n메뉴 앵커(\n  menuChildren: <Widget>[\n    Text('메뉴 항목 1'),\n    Text('메뉴 항목 2'),\n  ],\n  자식: Text('메뉴 열기'),\n)\n```\n\n<div class=\"content-ad\"></div>\n\n## 11. MenuBar\n\nMenuBar은 데스크톱 애플리케이션에서 사용할 수 있는 전통적인 메뉴 모음입니다. 데스크톱 사용자에게 익숙한 탐색 경험을 제공합니다.\n\n```js\nMenuBar(\n  children: <Widget>[\n    Text('File'),\n    Text('Edit'),\n    Text('View'),\n  ],\n)\n```\n\n## 12. MouseRegion\n\n<div class=\"content-ad\"></div>\n\nMouseRegion은 위젯에 마우스가 진입하거나 나가거나 호버될 때를 감지합니다. 인터랙티브 데스크톱 애플리케이션을 만드는 데 필수적인 기능이에요!\n\n```js\nMouseRegion(\n  onEnter: (_) => print('마우스 진입'),\n  onExit: (_) => print('마우스 나감'),\n  child: Container(\n    color: Colors.green,\n    width: 100,\n    height: 100,\n  ),\n)\n```\n\n이 글이 유익했기를 바라요! 제공된 정보를 감사하게 여기신다면, 제게 커피 한 잔 사주는 옵션이 있답니다! 여러분의 도움이 큰 힘이 될 거에요!\n\n<img src=\"/assets/img/2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 함께해요\n\n이 글을 읽어 주셔서 감사합니다. 즐겁게 읽으셨다면, 더 많은 글을 살펴보고 앞으로 제 포스트를 지켜봐 주시면 감사하겠습니다.\n\n더 많은 IT 관련 콘텐츠에 관심이 있다면, Digital Dive Hub 웹사이트를 방문해 최신 블로그와 소식을 확인해 보세요.\n\n# Stackademic 🎓\n\n<div class=\"content-ad\"></div>\n\n끝까지 읽어 주셔서 감사합니다! 떠나시기 전에 다음을 확인해 주세요:\n\n- 작가를 박수로 응원하고 팔로우해 주세요! 👏\n- 저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼에서도 만나보세요: In Plain English | CoFeed | Differ\n- 더 많은 콘텐츠는 Stackademic.com에서 확인하세요.\n","ogImage":{"url":"/assets/img/2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3_0.png"},"coverImage":"/assets/img/2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>플러터는 다양하고 시각적으로 멋진 애플리케이션을 개발할 수 있도록 개발자들에게 넓은 위젯 카탈로그로 유명합니다. 자주 사용되는 위젯들은 잘 알려져 있지만, 플러터는 잘 알려지지 않지만 매우 유용한 다양한 위젯들도 제공합니다. UI의 세련됨과 기능성을 향상시킬 수 있는 이런 숨겨진 보석들을 알아보겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3_0.png\" alt=\"이미지\"></p>\n<h3>1. FadeInImage</h3>\n<p>FadeInImage는 주 이미지가 로딩되는 동안 플레이스홀더 이미지를 표시할 수 있는 위젯입니다. 네트워크에서 이미지를 다룰 때 사용자 경험을 향상시키는 데 특히 유용합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">FadeInImage</span>(\n  <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-title class_\">AssetImage</span>(<span class=\"hljs-string\">'assets/placeholder.png'</span>),\n  <span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">NetworkImage</span>(<span class=\"hljs-string\">'https://example.com/image.jpg'</span>),\n)\n</code></pre>\n<h2>2. GridPaper</h2>\n<p>GridPaper은 레이아웃 디버깅을 위한 편리한 위젯입니다. 앱에 그리드를 겹쳐서 간격, 정렬 및 레이아웃 문제를 시각화하기 쉽게 만들어줍니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">GridPaper</span>(\n  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blueAccent</span>,\n  <span class=\"hljs-attr\">divisions</span>: <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-attr\">interval</span>: <span class=\"hljs-number\">100.0</span>,\n  <span class=\"hljs-attr\">subdivisions</span>: <span class=\"hljs-number\">2</span>,\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>3. 히어로</h2>\n<p>히어로는 위젯을 화면에서 다른 화면으로 부드럽게 전환하여 라우트 간에 애니메이션을 제공합니다. 시각적으로 매력적인 네비게이션 애니메이션을 만드는 데 이상적입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Hero</span>(\n  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">'hero-image'</span>,\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Image</span>.<span class=\"hljs-title function_\">network</span>(<span class=\"hljs-string\">'https://example.com/image.jpg'</span>),\n)\n</code></pre>\n<h2>4. KeepAlive</h2>\n<div class=\"content-ad\"></div>\n<p>KeepAlive은 위젯이 화면에서 벗어나도 위젯 트리에 유지되도록 돕습니다. 이는 ListView 또는 PageView에서 위젯의 상태를 유지하는 데 특히 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyStatefulWidget</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  @override\n  _MyStatefulWidgetState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_MyStatefulWidgetState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyStatefulWidgetState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyStatefulWidget</span>> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title class_\">AutomaticKeepAliveClientMixin</span>&#x3C;<span class=\"hljs-title class_\">MyStatefulWidget</span>> {\n  @override\n  bool get wantKeepAlive => <span class=\"hljs-literal\">true</span>;\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">build</span>(context);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Container</span>();\n  }\n}\n</code></pre>\n<h2>5. ListBody</h2>\n<p>ListBody는 주어진 축을 따라 자식 위젯을 선형 배열로 정렬합니다. 간단한 리스트 레이아웃이 필요한 경우 Column 및 Row 대신 간단한 대안으로 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ListBody</span>(\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Item 1'</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Item 2'</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Item 3'</span>),\n  ],\n)\n</code></pre>\n<h2>6. MenuRegion</h2>\n<p>MenuRegion은 앱에서 컨텍스트 메뉴를 정의하는 데 사용됩니다. 이 위젯은 데스크톱 애플리케이션에서 마우스 오른쪽 클릭 컨텍스트 메뉴가 흔한 경우에 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">MenuRegion</span>(\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>,\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>,\n  ),\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>7. LookUpBoundary</h2>\n<p>LookUpBoundary은 InheritedWidget 조회 범위를 제한하는 위젯입니다. 위젯 트리의 재구성 동작을 최적화하고 제어하는 데 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">LookUpBoundary</span>(\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">MyInheritedWidget</span>(\n    <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">MyWidget</span>(),\n  ),\n)\n</code></pre>\n<h2>8. Listener</h2>\n<div class=\"content-ad\"></div>\n<p>리스너는 터치, 마우스, 스타일러스 상호작용과 같은 포인터 이벤트를 감지합니다. 이 위젯은 사용자 정의 제스처와 상호작용을 구현하는 데 유용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Listener</span>(\n  <span class=\"hljs-attr\">onPointerDown</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">PointerDownEvent event</span>) =></span> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Pointer down event'</span>),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">red</span>,\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>,\n  ),\n)\n</code></pre>\n<h2>9. 확대경</h2>\n<p>확대경은 특정 영역에 확대 효과를 제공합니다. 이는 접근성을 향상시키고 특정 시나리오에서 사용자 경험을 향상하는 데 좋습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">확대기(\n  자식: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'나를 확대해주세요!'</span>),\n)\n</code></pre>\n<h2>10. 메뉴 앵커</h2>\n<p>메뉴 앵커는 특정 위치에 메뉴를 고정하는 데 사용됩니다. 사용자 정의 드롭다운 메뉴와 컨텍스트 메뉴를 만드는 데 유용합니다.</p>\n<pre><code class=\"hljs language-js\">메뉴 앵커(\n  <span class=\"hljs-attr\">menuChildren</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'메뉴 항목 1'</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'메뉴 항목 2'</span>),\n  ],\n  자식: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'메뉴 열기'</span>),\n)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>11. MenuBar</h2>\n<p>MenuBar은 데스크톱 애플리케이션에서 사용할 수 있는 전통적인 메뉴 모음입니다. 데스크톱 사용자에게 익숙한 탐색 경험을 제공합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">MenuBar</span>(\n  <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'File'</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Edit'</span>),\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'View'</span>),\n  ],\n)\n</code></pre>\n<h2>12. MouseRegion</h2>\n<div class=\"content-ad\"></div>\n<p>MouseRegion은 위젯에 마우스가 진입하거나 나가거나 호버될 때를 감지합니다. 인터랙티브 데스크톱 애플리케이션을 만드는 데 필수적인 기능이에요!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">MouseRegion</span>(\n  <span class=\"hljs-attr\">onEnter</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =></span> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'마우스 진입'</span>),\n  <span class=\"hljs-attr\">onExit</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">_</span>) =></span> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'마우스 나감'</span>),\n  <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Container</span>(\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">green</span>,\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>,\n  ),\n)\n</code></pre>\n<p>이 글이 유익했기를 바라요! 제공된 정보를 감사하게 여기신다면, 제게 커피 한 잔 사주는 옵션이 있답니다! 여러분의 도움이 큰 힘이 될 거에요!</p>\n<img src=\"/assets/img/2024-06-30-ExploringHiddenTreasuresinFlutterLesser-KnownWidgetsUnveiledPart3_1.png\">\n<div class=\"content-ad\"></div>\n<h1>함께해요</h1>\n<p>이 글을 읽어 주셔서 감사합니다. 즐겁게 읽으셨다면, 더 많은 글을 살펴보고 앞으로 제 포스트를 지켜봐 주시면 감사하겠습니다.</p>\n<p>더 많은 IT 관련 콘텐츠에 관심이 있다면, Digital Dive Hub 웹사이트를 방문해 최신 블로그와 소식을 확인해 보세요.</p>\n<h1>Stackademic 🎓</h1>\n<div class=\"content-ad\"></div>\n<p>끝까지 읽어 주셔서 감사합니다! 떠나시기 전에 다음을 확인해 주세요:</p>\n<ul>\n<li>작가를 박수로 응원하고 팔로우해 주세요! 👏</li>\n<li>저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼에서도 만나보세요: In Plain English | CoFeed | Differ</li>\n<li>더 많은 콘텐츠는 Stackademic.com에서 확인하세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}