{"pageProps":{"post":{"title":"네오빔으로 Flutter 개발하는 방법","description":"","date":"2024-07-01 17:15","slug":"2024-07-01-FlutterdevelopmentwithNeovim","content":"\n\n이 가이드는 플러터 개발을 위해 Neovim을 설정하고 사용하는 데 도움을 줍니다. Neovim 버전은 v0.10.0이며 플러그인 매니저는 lazy.nvim입니다. 제 dotfile은 여기에서 찾을 수 있습니다.\n\n![이미지 0](/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_0.png)\n\n![이미지 1](/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_1.png)\n\n![이미지 2](/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_2.png)\n\n<div class=\"content-ad\"></div>\n\n플러터 개발을 위해 [flutter-tools.nvim](https://github.com/akinsho/flutter-tools.nvim) 플러그인이 매우 유용합니다. 만약 디버거가 필요하지 않다면 nvim-dap을 설치하지 않고 flutter-tools만 사용할 수 있습니다. 아래는 관련 구성 조각입니다:\n\n```js\n -- 디버거\n    {\n        \"mfussenegger/nvim-dap\",\n        dependencies = {\n            'nvim-neotest/nvim-nio',\n            'rcarriga/nvim-dap-ui',\n        },\n        event = 'VeryLazy',\n        config = function()\n            require(\"dapui\").setup({\n                icons = { expanded = \"▾\", collapsed = \"▸\" },\n                layouts = {\n                    {\n                        elements = {\n                            { id = \"scopes\", size = 0.25 },\n                            \"breakpoints\",\n                            \"stacks\",\n                            \"watches\",\n                        },\n                        size = 10, -- 컬럼\n                        position = \"bottom\",\n                    },\n                },\n            })\n        end\n    },\n\n    -- flutter\n    {\n        \"akinsho/flutter-tools.nvim\",\n        event = \"VeryLazy\",\n        dependencies = {\n            \"nvim-lua/plenary.nvim\",\n            \"stevearc/dressing.nvim\",\n        },\n        config = function()\n            require(\"flutter-tools\").setup {\n                flutter_path = nil,\n                flutter_lookup_cmd = \"asdf where flutter\",\n                fvm = false,\n                widget_guides = { enabled = true },\n                lsp = {\n                    settings = {\n                        showtodos = true,\n                        completefunctioncalls = true,\n                        analysisexcludedfolders = {\n                            vim.fn.expand(\"$Home/.pub-cache\"),\n                        },\n                        renamefileswithclasses = \"prompt\",\n                        updateimportsonrename = true,\n                        enablesnippets = false,\n                    },\n                },\n                debugger = {\n                    enabled = true,\n                    run_via_dap = true,\n                    exception_breakpoints = {},\n                    register_configurations = function(paths)\n                        local dap = require(\"dap\")\n                        -- 관련 문서: https://github.com/akinsho/flutter-tools.nvim/pull/292\n                        dap.adapters.dart = {\n                            type = \"executable\",\n                            command = paths.flutter_bin,\n                            args = { \"debug-adapter\" },\n                        }\n                        dap.configurations.dart = {}\n                        require(\"dap.ext.vscode\").load_launchjs()\n                    end,\n                },\n            }\n        end\n    },\r\n```\n\n이 섹션에서 언급된대로, flutter_lookup_command를 asdf 등을 사용할 수 있도록 설정해야 합니다.\n\n디버깅을 위해 nvim-dap을 사용 중이라면, require(\"dap.ext.vscode\").load_launchjs()를 설정하여 .vscode/launch.json의 구성을 참조할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```json\n// .vscode/launch.json\n{\n  \"version\": \"0.0.1\",\n  \"configurations\": [\n    {\n      \"name\": \"개발용 앱 실행\",\n      \"program\": \"${workspaceFolder}/lib/main.dart\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"flutterMode\": \"debug\",\n      \"args\": [\n        \"--debug\",\n        \"--flavor\",\n        \"dev\",\n        \"--dart-define-from-file=define/flavor/dev/common.json\",\n        \"--dart-define-from-file=define/flavor/dev/firebase_options.json\"\n      ]\n    },\n    {\n      \"name\": \"운영용 앱 실행\",\n      \"program\": \"${workspaceFolder}/lib/main.dart\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"flutterMode\": \"debug\",\n      \"args\": [\n        \"--debug\",\n        \"--flavor\",\n        \"prd\",\n        \"--dart-define-from-file=define/flavor/prd/common.json\",\n        \"--dart-define-from-file=define/flavor/prd/firebase_options.json\"\n      ]\n    }\n  ]\n}\n```\n\n<img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_3.png\" />\n\n다른 권장하는 Neovim 플러그인\n\n- mini.files\n이것은 파일 탐색기 플러그인입니다. 이전에는 nvim-tree.lua를 사용했지만, 고유한 UI/UX로 인해 mini.files로 전환했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_4.png\" />\n\n- no-neck-pain.nvim\n이 플러그인은 버퍼를 화면 가운데에 위치시킵니다. 이 플러그인을 사용함으로써 파일 탐색기를 항상 열어두지 않아도 되는 것을 깨달았고, mini.file 플러그인과 함께 사용하면 더욱 좋습니다.\n- hlchunk.nvim\n이 플러그인은 코드 청크를 동적으로 강조하여 시각적으로 보기 좋고 중첩된 코드 블록을 따르기 쉽게 만듭니다.\n\n<img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_5.png\" />\n\n이 안내서가 더 많은 Vimmer의 수를 늘리는 데 도움이 되기를 바랍니다. Neovim과 Flutter로 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_0.png"},"coverImage":"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 가이드는 플러터 개발을 위해 Neovim을 설정하고 사용하는 데 도움을 줍니다. Neovim 버전은 v0.10.0이며 플러그인 매니저는 lazy.nvim입니다. 제 dotfile은 여기에서 찾을 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_0.png\" alt=\"이미지 0\"></p>\n<p><img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_1.png\" alt=\"이미지 1\"></p>\n<p><img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_2.png\" alt=\"이미지 2\"></p>\n<div class=\"content-ad\"></div>\n<p>플러터 개발을 위해 <a href=\"https://github.com/akinsho/flutter-tools.nvim\" rel=\"nofollow\" target=\"_blank\">flutter-tools.nvim</a> 플러그인이 매우 유용합니다. 만약 디버거가 필요하지 않다면 nvim-dap을 설치하지 않고 flutter-tools만 사용할 수 있습니다. 아래는 관련 구성 조각입니다:</p>\n<pre><code class=\"hljs language-js\"> -- 디버거\n    {\n        <span class=\"hljs-string\">\"mfussenegger/nvim-dap\"</span>,\n        dependencies = {\n            <span class=\"hljs-string\">'nvim-neotest/nvim-nio'</span>,\n            <span class=\"hljs-string\">'rcarriga/nvim-dap-ui'</span>,\n        },\n        event = <span class=\"hljs-string\">'VeryLazy'</span>,\n        config = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"dapui\"</span>).<span class=\"hljs-title function_\">setup</span>({\n                icons = { expanded = <span class=\"hljs-string\">\"▾\"</span>, collapsed = <span class=\"hljs-string\">\"▸\"</span> },\n                layouts = {\n                    {\n                        elements = {\n                            { id = <span class=\"hljs-string\">\"scopes\"</span>, size = <span class=\"hljs-number\">0.25</span> },\n                            <span class=\"hljs-string\">\"breakpoints\"</span>,\n                            <span class=\"hljs-string\">\"stacks\"</span>,\n                            <span class=\"hljs-string\">\"watches\"</span>,\n                        },\n                        size = <span class=\"hljs-number\">10</span>, -- 컬럼\n                        position = <span class=\"hljs-string\">\"bottom\"</span>,\n                    },\n                },\n            })\n        end\n    },\n\n    -- flutter\n    {\n        <span class=\"hljs-string\">\"akinsho/flutter-tools.nvim\"</span>,\n        event = <span class=\"hljs-string\">\"VeryLazy\"</span>,\n        dependencies = {\n            <span class=\"hljs-string\">\"nvim-lua/plenary.nvim\"</span>,\n            <span class=\"hljs-string\">\"stevearc/dressing.nvim\"</span>,\n        },\n        config = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"flutter-tools\"</span>).<span class=\"hljs-property\">setup</span> {\n                flutter_path = nil,\n                flutter_lookup_cmd = <span class=\"hljs-string\">\"asdf where flutter\"</span>,\n                fvm = <span class=\"hljs-literal\">false</span>,\n                widget_guides = { enabled = <span class=\"hljs-literal\">true</span> },\n                lsp = {\n                    settings = {\n                        showtodos = <span class=\"hljs-literal\">true</span>,\n                        completefunctioncalls = <span class=\"hljs-literal\">true</span>,\n                        analysisexcludedfolders = {\n                            vim.<span class=\"hljs-property\">fn</span>.<span class=\"hljs-title function_\">expand</span>(<span class=\"hljs-string\">\"$Home/.pub-cache\"</span>),\n                        },\n                        renamefileswithclasses = <span class=\"hljs-string\">\"prompt\"</span>,\n                        updateimportsonrename = <span class=\"hljs-literal\">true</span>,\n                        enablesnippets = <span class=\"hljs-literal\">false</span>,\n                    },\n                },\n                <span class=\"hljs-keyword\">debugger</span> = {\n                    enabled = <span class=\"hljs-literal\">true</span>,\n                    run_via_dap = <span class=\"hljs-literal\">true</span>,\n                    exception_breakpoints = {},\n                    register_configurations = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">paths</span>)\n                        local dap = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"dap\"</span>)\n                        -- 관련 문서: <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/akinsho/flutter-tools.nvim/pull/292</span>\n                        dap.<span class=\"hljs-property\">adapters</span>.<span class=\"hljs-property\">dart</span> = {\n                            type = <span class=\"hljs-string\">\"executable\"</span>,\n                            command = paths.<span class=\"hljs-property\">flutter_bin</span>,\n                            args = { <span class=\"hljs-string\">\"debug-adapter\"</span> },\n                        }\n                        dap.<span class=\"hljs-property\">configurations</span>.<span class=\"hljs-property\">dart</span> = {}\n                        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"dap.ext.vscode\"</span>).<span class=\"hljs-title function_\">load_launchjs</span>()\n                    end,\n                },\n            }\n        end\n    },\n</code></pre>\n<p>이 섹션에서 언급된대로, flutter_lookup_command를 asdf 등을 사용할 수 있도록 설정해야 합니다.</p>\n<p>디버깅을 위해 nvim-dap을 사용 중이라면, require(\"dap.ext.vscode\").load_launchjs()를 설정하여 .vscode/launch.json의 구성을 참조할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// .vscode/launch.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"version\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"0.0.1\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"configurations\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"개발용 앱 실행\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"program\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"${workspaceFolder}/lib/main.dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"launch\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"flutterMode\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"debug\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"args\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">\"--debug\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"--flavor\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"dev\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"--dart-define-from-file=define/flavor/dev/common.json\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"--dart-define-from-file=define/flavor/dev/firebase_options.json\"</span>\n      <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"운영용 앱 실행\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"program\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"${workspaceFolder}/lib/main.dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"launch\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dart\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"flutterMode\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"debug\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"args\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">\"--debug\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"--flavor\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"prd\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"--dart-define-from-file=define/flavor/prd/common.json\"</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">\"--dart-define-from-file=define/flavor/prd/firebase_options.json\"</span>\n      <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_3.png\">\n<p>다른 권장하는 Neovim 플러그인</p>\n<ul>\n<li>mini.files\n이것은 파일 탐색기 플러그인입니다. 이전에는 nvim-tree.lua를 사용했지만, 고유한 UI/UX로 인해 mini.files로 전환했습니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_4.png\">\n<ul>\n<li>no-neck-pain.nvim\n이 플러그인은 버퍼를 화면 가운데에 위치시킵니다. 이 플러그인을 사용함으로써 파일 탐색기를 항상 열어두지 않아도 되는 것을 깨달았고, mini.file 플러그인과 함께 사용하면 더욱 좋습니다.</li>\n<li>hlchunk.nvim\n이 플러그인은 코드 청크를 동적으로 강조하여 시각적으로 보기 좋고 중첩된 코드 블록을 따르기 쉽게 만듭니다.</li>\n</ul>\n<img src=\"/assets/img/2024-07-01-FlutterdevelopmentwithNeovim_5.png\">\n<p>이 안내서가 더 많은 Vimmer의 수를 늘리는 데 도움이 되기를 바랍니다. Neovim과 Flutter로 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}