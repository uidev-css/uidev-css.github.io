{"pageProps":{"post":{"title":"Azure CosmosDB, 중복 검증 스트레로이드 버전","description":"","date":"2024-06-19 14:45","slug":"2024-06-19-AzureCosmosDBZodDataValidationonSteroids","content":"\n\n\n![Azure CosmosDB](/assets/img/2024-06-19-AzureCosmosDBZodDataValidationonSteroids_0.png)\n\n데이터베이스 보호 및 Azure 요금 절감\n\nAzure CosmosDB는 다른 NoSQL 데이터베이스들처럼 훌륭합니다. 빠르고 신뢰할 수 있으며 매우 유연합니다.\n\n그러나 자유는 언제나 대가가 따릅니다. 완전히 스키마 없는 데이터베이스의 경우, 데이터베이스에 들어가는 내용과 데이터를 검색하는 방법에 대해 계산된 결정을 내리게 됩니다. 개발자인 우리에게 책임이 떨어집니다.\n\n\n<div class=\"content-ad\"></div>\n\n가장 흔한 사용 사례 중 하나는 ID별로 레코드/항목을 찾는 것입니다.\n\n이게 얼마나 중요한가요?\n\n그냥 SELECT * FROM c WHERE c.id = \"some-id\" 를 사용하면 될 일이 아닙니까?\n\n또는 Azure CosmosDB SDK를 사용하여 간단히 이렇게 할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nawait container.item(\"some-id\", \"some-id\").read();\n```\n\n둘 다 맞아요.\n\n하지만 처음부터 데이터베이스와 통신할 필요가 없는 경우도 있습니다. 예를 들어:\n\n- ID 입력이 정의되지 않은 경우\n- ID 입력이 null 인 경우\n- ID 입력이 빈 문자열인 경우: \"\"\n- ID 입력에 공백 문자가 포함된 경우: \" some-id\", \"some -id\", 또는 \"some-id\"는 모두 CosmosDB가 허용하지 않는 잘못된 ID입니다.\n- 특별한 사용 사례: ID 입력이 이미 데이터베이스에 적용한 사용자 지정 ID 형식을 준수하지 않는 경우. 예: 모든 ID는 USER-xxx-xxxx-xxxx 등의 형식을 따라야 합니다.\n\n<div class=\"content-ad\"></div>\n\n이 문제를 해결하기 위해 2가지 방법이 있습니다:\n\n- 사용자 정의 함수 작성\n- 스키마 유효성 검사 도구 사용 (예: zod, yup, valibot, typia 등)\n\n두 가지 모두 API로 들어오는 데이터를 어떤 형식으로든 수동으로 유효성을 검사해야 합니다.\n\n방법 1: 사용자 정의 함수 작성\n\n<div class=\"content-ad\"></div>\n\n```js\nimport { ResultAsync, err, ok } from 'neverthrow';\nimport { CosmosClient } from '@azure/cosmos';\n\n// CosmosDB 연결 초기화\nconst endpoint = `데이터베이스_엔드포인트`;\nconst key = `데이터베이스_키`;\nconst client = new CosmosClient({ endpoint, key });\n\n// 작업을 수행할 \"컨테이너\" 설정\nconst container = client.database(`데이터베이스_이름`).container(`컨테이너_이름`);\n\nexport type Post = {\n  id: string;\n  // 다른 속성들\n};\n\nexport const findOnePost = async (\n  id: string,\n): Promise<ResultAsync<Post, Error>> => {\n  // 입력 유효성 검사 - 매우 수동적\n  if (id === undefined || id === null) {\n    return err(new Error(`ID는 정의되거나 null일 수 없습니다`));\n  }\n  if (id === ``) {\n    return err(new Error(`ID는 빈 문자열일 수 없습니다`));\n  }\n  if (id.includes(` `)) {\n    return err(new Error(`ID에는 공백 문자가 포함될 수 없습니다`));\n  }\n  // ... ID가 규격을 준수해야하는 다른 규칙들\n\n  // 데이터베이스 호출\n  const result = await fromPromise(\n    await container.item<Post>(id, id).read(),\n    (e) => e,\n  );\n  if (result.isErr()) {\n    return err(new Error(`데이터베이스에서 항목을 검색하는 데 실패했습니다. 오류 코드: ${result.error['code']}`));\n  }\n\n  // 선택 사항: 데이터베이스에서 검색된 데이터 유효성 검사\n\n  // 게시물 데이터 반환\n  return ok<Post>(result.value.resource);\n};\n```\n\n접근 방법 2: 스키마 유효성 검사 도구(Zod) 사용\n\n```js\nimport { z } from 'zod';\nimport { fromError } from 'zod-validation-error';\nimport { ResultAsync, err, ok } from 'neverthrow';\nimport { CosmosClient } from '@azure/cosmos';\n\n// CosmosDB 연결 초기화\nconst endpoint = `데이터베이스_엔드포인트`;\nconst key = `데이터베이스_키`;\nconst client = new CosmosClient({ endpoint, key });\n\n// 작업을 수행할 \"컨테이너\" 설정\nconst container = client.database(`데이터베이스_이름`).container(`컨테이너_이름`);\n\n// ID 스키마\nconst IdSchema = z\n  .string()\n  .min(8)\n  .refine((value) => {\n    return !value.includes(` `);\n  }, `ID에 공백 문자를 포함할 수 없습니다`)\n  .describe(\n    `입력을 문자열로, 적어도 8자 이상이어야하며 공백 문자를 포함해서는 안됩니다`,\n  );\n\nexport type Post = {\n  id: string;\n  // 다른 속성들\n};\n\nexport const findOnePost = async (\n  id: string,\n): Promise<ResultAsync<Post, Error>> => {\n  // 입력 유효성 검사 - zod 사용\n  const validateInput = IdSchema.safeParse(id);\n  if (!validateInput.success) {\n    const { message } = fromError(validateInput.error);\n    return err(new Error(message));\n  }\n\n  // 데이터베이스 호출\n  const result = await fromPromise(\n    await container.item<Post>(id, id).read(),\n    (e) => e,\n  );\n  if (result.isErr()) {\n    return err(new Error(`데이터베이스에서 항목을 검색하는 데 실패했습니다. 오류 코드: ${result.error['code']}`));\n  }\n\n  // 선택 사항: 데이터베이스에서 검색된 데이터 유효성 검사\n\n  // 게시물 데이터 반환\n  return ok<Post>(result.value.resource);\n};\n```\n\n두 가지 접근 방법이 모두 작동함을 확인할 수 있습니다. 둘 다 Azure CosmosDB 호출 전에 ID 입력의 유효성을 검사합니다.\n\n\n<div class=\"content-ad\"></div>\n\n만약 더 많은 코드를 작성하거나 앱이 매우 작다거나 새로운 npm 패키지를 추가하고 싶지 않다면 첫 번째 방법을 사용하세요.\n\n더 적은 코드를 작성하고 코드베이스의 여러 곳에 동일한 유효성을 적용하려면 두 번째 방법을 사용하세요.\n\n그러나 주요 아이디어는 데이터베이스에 여행을 하기 전에 ID가 유효한지 확인해야 한다는 것입니다.\n\n아래 다이어그램에서는 주황색으로 둘러싸인 부분을 추가하는 중입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Azure CosmosDB Zod Data Validation on Steroids](/assets/img/2024-06-19-AzureCosmosDBZodDataValidationonSteroids_1.png)\n\n데이터베이스를 요청하지 않으면 매우 사소한 것처럼 보일 수 있지만, 모든 달러가 중요합니다. Azure CosmosDB를 쿼리하는 시기, 방법 및 빈도를 신중히 다루면 큰 Azure 송장에서 자신을 보호할 수 있습니다.\n\n생각을 공유하고 댓글을 달아주세요!\n","ogImage":{"url":"/assets/img/2024-06-19-AzureCosmosDBZodDataValidationonSteroids_0.png"},"coverImage":"/assets/img/2024-06-19-AzureCosmosDBZodDataValidationonSteroids_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-AzureCosmosDBZodDataValidationonSteroids_0.png\" alt=\"Azure CosmosDB\"></p>\n<p>데이터베이스 보호 및 Azure 요금 절감</p>\n<p>Azure CosmosDB는 다른 NoSQL 데이터베이스들처럼 훌륭합니다. 빠르고 신뢰할 수 있으며 매우 유연합니다.</p>\n<p>그러나 자유는 언제나 대가가 따릅니다. 완전히 스키마 없는 데이터베이스의 경우, 데이터베이스에 들어가는 내용과 데이터를 검색하는 방법에 대해 계산된 결정을 내리게 됩니다. 개발자인 우리에게 책임이 떨어집니다.</p>\n<div class=\"content-ad\"></div>\n<p>가장 흔한 사용 사례 중 하나는 ID별로 레코드/항목을 찾는 것입니다.</p>\n<p>이게 얼마나 중요한가요?</p>\n<p>그냥 SELECT * FROM c WHERE c.id = \"some-id\" 를 사용하면 될 일이 아닙니까?</p>\n<p>또는 Azure CosmosDB SDK를 사용하여 간단히 이렇게 할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">await</span> container.<span class=\"hljs-title function_\">item</span>(<span class=\"hljs-string\">\"some-id\"</span>, <span class=\"hljs-string\">\"some-id\"</span>).<span class=\"hljs-title function_\">read</span>();\n</code></pre>\n<p>둘 다 맞아요.</p>\n<p>하지만 처음부터 데이터베이스와 통신할 필요가 없는 경우도 있습니다. 예를 들어:</p>\n<ul>\n<li>ID 입력이 정의되지 않은 경우</li>\n<li>ID 입력이 null 인 경우</li>\n<li>ID 입력이 빈 문자열인 경우: \"\"</li>\n<li>ID 입력에 공백 문자가 포함된 경우: \" some-id\", \"some -id\", 또는 \"some-id\"는 모두 CosmosDB가 허용하지 않는 잘못된 ID입니다.</li>\n<li>특별한 사용 사례: ID 입력이 이미 데이터베이스에 적용한 사용자 지정 ID 형식을 준수하지 않는 경우. 예: 모든 ID는 USER-xxx-xxxx-xxxx 등의 형식을 따라야 합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>이 문제를 해결하기 위해 2가지 방법이 있습니다:</p>\n<ul>\n<li>사용자 정의 함수 작성</li>\n<li>스키마 유효성 검사 도구 사용 (예: zod, yup, valibot, typia 등)</li>\n</ul>\n<p>두 가지 모두 API로 들어오는 데이터를 어떤 형식으로든 수동으로 유효성을 검사해야 합니다.</p>\n<p>방법 1: 사용자 정의 함수 작성</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ResultAsync</span>, err, ok } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'neverthrow'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CosmosClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@azure/cosmos'</span>;\n\n<span class=\"hljs-comment\">// CosmosDB 연결 초기화</span>\n<span class=\"hljs-keyword\">const</span> endpoint = <span class=\"hljs-string\">`데이터베이스_엔드포인트`</span>;\n<span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-string\">`데이터베이스_키`</span>;\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CosmosClient</span>({ endpoint, key });\n\n<span class=\"hljs-comment\">// 작업을 수행할 \"컨테이너\" 설정</span>\n<span class=\"hljs-keyword\">const</span> container = client.<span class=\"hljs-title function_\">database</span>(<span class=\"hljs-string\">`데이터베이스_이름`</span>).<span class=\"hljs-title function_\">container</span>(<span class=\"hljs-string\">`컨테이너_이름`</span>);\n\n<span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">Post</span> = {\n  <span class=\"hljs-attr\">id</span>: string;\n  <span class=\"hljs-comment\">// 다른 속성들</span>\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> findOnePost = <span class=\"hljs-keyword\">async</span> (\n  <span class=\"hljs-attr\">id</span>: string,\n): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">ResultAsync</span>&#x3C;<span class=\"hljs-title class_\">Post</span>, <span class=\"hljs-title class_\">Error</span>>> => {\n  <span class=\"hljs-comment\">// 입력 유효성 검사 - 매우 수동적</span>\n  <span class=\"hljs-keyword\">if</span> (id === <span class=\"hljs-literal\">undefined</span> || id === <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">err</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`ID는 정의되거나 null일 수 없습니다`</span>));\n  }\n  <span class=\"hljs-keyword\">if</span> (id === <span class=\"hljs-string\">``</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">err</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`ID는 빈 문자열일 수 없습니다`</span>));\n  }\n  <span class=\"hljs-keyword\">if</span> (id.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">` `</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">err</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`ID에는 공백 문자가 포함될 수 없습니다`</span>));\n  }\n  <span class=\"hljs-comment\">// ... ID가 규격을 준수해야하는 다른 규칙들</span>\n\n  <span class=\"hljs-comment\">// 데이터베이스 호출</span>\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fromPromise</span>(\n    <span class=\"hljs-keyword\">await</span> container.<span class=\"hljs-property\">item</span>&#x3C;<span class=\"hljs-title class_\">Post</span>>(id, id).<span class=\"hljs-title function_\">read</span>(),\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> e,\n  );\n  <span class=\"hljs-keyword\">if</span> (result.<span class=\"hljs-title function_\">isErr</span>()) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">err</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`데이터베이스에서 항목을 검색하는 데 실패했습니다. 오류 코드: <span class=\"hljs-subst\">${result.error[<span class=\"hljs-string\">'code'</span>]}</span>`</span>));\n  }\n\n  <span class=\"hljs-comment\">// 선택 사항: 데이터베이스에서 검색된 데이터 유효성 검사</span>\n\n  <span class=\"hljs-comment\">// 게시물 데이터 반환</span>\n  <span class=\"hljs-keyword\">return</span> ok&#x3C;<span class=\"hljs-title class_\">Post</span>>(result.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">resource</span>);\n};\n</code></pre>\n<p>접근 방법 2: 스키마 유효성 검사 도구(Zod) 사용</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { z } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zod'</span>;\n<span class=\"hljs-keyword\">import</span> { fromError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zod-validation-error'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ResultAsync</span>, err, ok } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'neverthrow'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CosmosClient</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@azure/cosmos'</span>;\n\n<span class=\"hljs-comment\">// CosmosDB 연결 초기화</span>\n<span class=\"hljs-keyword\">const</span> endpoint = <span class=\"hljs-string\">`데이터베이스_엔드포인트`</span>;\n<span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-string\">`데이터베이스_키`</span>;\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CosmosClient</span>({ endpoint, key });\n\n<span class=\"hljs-comment\">// 작업을 수행할 \"컨테이너\" 설정</span>\n<span class=\"hljs-keyword\">const</span> container = client.<span class=\"hljs-title function_\">database</span>(<span class=\"hljs-string\">`데이터베이스_이름`</span>).<span class=\"hljs-title function_\">container</span>(<span class=\"hljs-string\">`컨테이너_이름`</span>);\n\n<span class=\"hljs-comment\">// ID 스키마</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">IdSchema</span> = z\n  .<span class=\"hljs-title function_\">string</span>()\n  .<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-number\">8</span>)\n  .<span class=\"hljs-title function_\">refine</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> {\n    <span class=\"hljs-keyword\">return</span> !value.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">` `</span>);\n  }, <span class=\"hljs-string\">`ID에 공백 문자를 포함할 수 없습니다`</span>)\n  .<span class=\"hljs-title function_\">describe</span>(\n    <span class=\"hljs-string\">`입력을 문자열로, 적어도 8자 이상이어야하며 공백 문자를 포함해서는 안됩니다`</span>,\n  );\n\n<span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">Post</span> = {\n  <span class=\"hljs-attr\">id</span>: string;\n  <span class=\"hljs-comment\">// 다른 속성들</span>\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> findOnePost = <span class=\"hljs-keyword\">async</span> (\n  <span class=\"hljs-attr\">id</span>: string,\n): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">ResultAsync</span>&#x3C;<span class=\"hljs-title class_\">Post</span>, <span class=\"hljs-title class_\">Error</span>>> => {\n  <span class=\"hljs-comment\">// 입력 유효성 검사 - zod 사용</span>\n  <span class=\"hljs-keyword\">const</span> validateInput = <span class=\"hljs-title class_\">IdSchema</span>.<span class=\"hljs-title function_\">safeParse</span>(id);\n  <span class=\"hljs-keyword\">if</span> (!validateInput.<span class=\"hljs-property\">success</span>) {\n    <span class=\"hljs-keyword\">const</span> { message } = <span class=\"hljs-title function_\">fromError</span>(validateInput.<span class=\"hljs-property\">error</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">err</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(message));\n  }\n\n  <span class=\"hljs-comment\">// 데이터베이스 호출</span>\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fromPromise</span>(\n    <span class=\"hljs-keyword\">await</span> container.<span class=\"hljs-property\">item</span>&#x3C;<span class=\"hljs-title class_\">Post</span>>(id, id).<span class=\"hljs-title function_\">read</span>(),\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> e,\n  );\n  <span class=\"hljs-keyword\">if</span> (result.<span class=\"hljs-title function_\">isErr</span>()) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">err</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`데이터베이스에서 항목을 검색하는 데 실패했습니다. 오류 코드: <span class=\"hljs-subst\">${result.error[<span class=\"hljs-string\">'code'</span>]}</span>`</span>));\n  }\n\n  <span class=\"hljs-comment\">// 선택 사항: 데이터베이스에서 검색된 데이터 유효성 검사</span>\n\n  <span class=\"hljs-comment\">// 게시물 데이터 반환</span>\n  <span class=\"hljs-keyword\">return</span> ok&#x3C;<span class=\"hljs-title class_\">Post</span>>(result.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">resource</span>);\n};\n</code></pre>\n<p>두 가지 접근 방법이 모두 작동함을 확인할 수 있습니다. 둘 다 Azure CosmosDB 호출 전에 ID 입력의 유효성을 검사합니다.</p>\n<div class=\"content-ad\"></div>\n<p>만약 더 많은 코드를 작성하거나 앱이 매우 작다거나 새로운 npm 패키지를 추가하고 싶지 않다면 첫 번째 방법을 사용하세요.</p>\n<p>더 적은 코드를 작성하고 코드베이스의 여러 곳에 동일한 유효성을 적용하려면 두 번째 방법을 사용하세요.</p>\n<p>그러나 주요 아이디어는 데이터베이스에 여행을 하기 전에 ID가 유효한지 확인해야 한다는 것입니다.</p>\n<p>아래 다이어그램에서는 주황색으로 둘러싸인 부분을 추가하는 중입니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-AzureCosmosDBZodDataValidationonSteroids_1.png\" alt=\"Azure CosmosDB Zod Data Validation on Steroids\"></p>\n<p>데이터베이스를 요청하지 않으면 매우 사소한 것처럼 보일 수 있지만, 모든 달러가 중요합니다. Azure CosmosDB를 쿼리하는 시기, 방법 및 빈도를 신중히 다루면 큰 Azure 송장에서 자신을 보호할 수 있습니다.</p>\n<p>생각을 공유하고 댓글을 달아주세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}