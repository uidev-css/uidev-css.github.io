{"pageProps":{"post":{"title":"플러터에서 Cubit 상태 관리 사용하는 방법","description":"","date":"2024-06-21 23:02","slug":"2024-06-21-CubitStateManagementinFlutter","content":"\n![Cubit State Management in Flutter](/assets/img/2024-06-21-CubitStateManagementinFlutter_0.png)\n\n상태 관리는 모바일 앱 개발에서 중요한 요소이며, 특히 UI가 반응적인 Flutter와 같은 프레임워크에서는 더욱 중요합니다. Flutter에서 다양한 상태 관리 기술 중 하나인 BLoC (Business Logic Component) 패턴이 상당한 인기를 얻었습니다. BLoC의 영역 내에서 두 가지 주요 접근 방식이 있습니다: Bloc State Management과 Cubit State Management.\n\n# Cubit이란?\n\nCubit은 BLoC 패턴의 일부인 간단하고 직관적인 상태 관리 솔루션입니다. \"Business Logic Component\"의 약자입니다. 전통적인 BLoC와는 달리, Cubit은 더 가벼우며 더 간단한 API를 가지고 있어 더 작은 프로젝트나 간단한 상태 관리 필요에 쉽게 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n플러터에서 Cubit 상태 관리를 시작하려면 flutter_bloc 패키지를 설치해야 합니다:\n\n```js\ndependencies:\n   flutter_bloc: ^8.1.3\n```\n\n# Cubit을 사용한 카운터 앱\n\n더 나은 이해를 위해 Cubit을 사용하여 간단한 카운터 앱을 구현해 봅시다. 단계별로 진행하겠습니다. 함께 따라와 주세요.\n\n<div class=\"content-ad\"></div>\n\n친구야, Cubit 폴더를 만들어 그 안에 counter_cubit.dart 파일을 생성해보세요.\n\n![이미지](/assets/img/2024-06-21-CubitStateManagementinFlutter_1.png)\n\n파일 안에 Cubit을 확장한 클래스를 만들어주세요.\n\n```js\nclass CounterCubit extends Cubit {}\n```\n\n<div class=\"content-ad\"></div>\n\n문제: 하지만 이렇게 하면 오류가 발생합니다. 수퍼 클래스 'Cubit`dynamic`'에는 인수가 없는 생성자가 없습니다.\n\n그래서 생성자를 만들어 초기 상태를 전달해야 합니다.\n\n```js\nclass CounterCubit extends Cubit {\n  CounterCubit():super(0);\n}\n```\n\n여기서 '0'은 초기 상태이지만 문자열, 클래스 등이 될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 이제 초기 상태를 화면에 표시해야 합니다\n\n카운터 큐빗 클래스의 인스턴스를 만듭니다.\n\n이제 이 객체를 사용하여 다양한 것에 액세스할 수 있습니다:\n\n![Cubit State Management in Flutter](/assets/img/2024-06-21-CubitStateManagementinFlutter_2.png)\n\n<div class=\"content-ad\"></div>\n\n지금은 .state를 필요로 합니다.\n\n```js\nfinal counter = CounterCubit().state;\n```\n\n필요한 곳에서 사용할 수 있습니다.\n\n```js\nText(\"$counter\");\n```\n\n<div class=\"content-ad\"></div>\n\n문제: 작은 문제가 있습니다. 이 카운터는 동적 타입이므로 코드를 망가뜨리지는 않지만, 동적 타입을 피해야 합니다.\n\n![이미지](/assets/img/2024-06-21-CubitStateManagementinFlutter_3.png)\n\n그래서 카운터 cubic 클래스에 타입을 지정해 주세요.\n\n```js\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 초기 상태를 성공적으로 표시했어요.\n\n## 값 증가, 상태 변경\n\n이를 위해 카운터 커빗 클래스에 값을 증가시키는 함수를 만들고 모든 청취자에게 알립니다. 상태를 변경하기 위해 emit 함수를 사용합니다.\n\nemit(state) // 제공된 [state]로 상태를 업데이트합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() {\n    emit(state + 1);\n  }\n}\n```\n\n이제 이 함수를 버튼 클릭에 사용하세요\n\n```js\nonPressed: () => CounterCubit().increment(),\n```\n\n문제: 그러나 버튼을 클릭해도 상태가 변경되지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n이는 우리가 cubit의 두 개체를 생성하고 있기 때문입니다. 두 번째 cubit의 값을 업데이트하고 있습니다. 이것을 제거하려면 하나의 cubit만 사용해야 합니다.\n\n단일 객체 생성\n\n```js\nfinal counterCubit = CounterCubit();\n```\n\n그리고 이것을 모두에서 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nfinal counter = counterCubit.state; // 빌드 내부\n\n```\n\n버튼을 누르면\n\n```js\nonPressed: () => counterCubit.increment(),\n```\n\n문제점: 그러나 한 가지 더 빠진 것이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n한 번만 값을 받아서 상태를 업데이트하고 emit이 청취자에게 통지하지만 우리는 상태를 청취하고 있지 않습니다.\n\n이제 BlocBuilder를 사용해야 합니다. 이는 flutter_bloc에서 제공하는 위젯이며 bloc과 builder라는 두 인수가 필요합니다.\n\n```js\nBlocBuilder<CounterCubit, int>(\n      bloc: counterCubit, // 선택 사항\n      builder: (context, counter) {\n         return Text(\n           '$counter',\n         );\n}),\n```\n\n# 완료 단계\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\nCreate a separate class extend with cubit, give the initial state and a function to change the state.\n\n```js\nimport 'package:flutter_bloc/flutter_bloc.dart';\n\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() {\n    emit(state + 1);\n  }\n}\n```\n\nUse the state by making a single object of the cubit class and use BlocBuilder where you need the changing state\n\n```js\nclass _MyHomePageState extends State<MyHomePage> {\n  final counterCubit = CounterCubit(); // (1: object)\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            const Text(\n              'You have pushed the button this many times:',\n            ),\n            // (2: state value)\n            BlocBuilder<CounterCubit, int>(\n              bloc: counterCubit, // optional\n              builder: (context, counter) {\n                return Text(\n                  '$counter',\n                );\n              }\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () => counterCubit.increment(), // (3: increment)\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 감소 기능 추가\n\n```js\n void decrement() {\n    if (state == 0) {\n      return;\n    }\n    emit(state - 1);\n  }\n```\n\n```js\nonPressed: () => counterCubit.decrement(),\n```\n\n참고: emit() 함수는 Cubit 외부에서 사용할 수 없습니다.\n\n<div class=\"content-ad\"></div>\n\n# 질문: 두 개의 별도 페이지가 있는 경우\n\n두 개의 별도 페이지가 있는 경우에는 상태를 표시하는 페이지와 그 상태를 변경하는 버튼이 있는 페이지가 따로 있는 것을 의미합니다.\n\n그런데 앞서 언급한 대로 cubit 클래스의 두 개의 다른 객체를 사용할 수 없습니다.\n\n![이미지](/assets/img/2024-06-21-CubitStateManagementinFlutter_4.png)\n\n<div class=\"content-ad\"></div>\n\n이제 icc_dec_page에 버튼이 있고 home_page.dart에서 카운터를 표시하고 있습니다.\n\n카운터 Cubit의 두 인스턴스를 만들 수 없기 때문에 작동하지 않습니다. 하나의 인스턴스만 사용해야 합니다. 이 문제를 해결하기 위해 BlocProvider를 사용합니다. BlocProvider는 블록의 인스턴스를 전달하는 데 사용됩니다.\n\n따라서 main.dart에서 Material app을 BlocProvider로 래핑하고 cubit/bloc을 함수의 인수로 전달합니다.\n\nMarkdown 형식의 표로 변경:\n\nWidget build(BuildContext context) {\nreturn BlocProvider( // <-- 이 부분\ncreate: (\\_) => CounterCubit(),\nchild: MaterialApp(\ntitle: 'Flutter Demo',\ntheme: ThemeData(\ncolorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\nuseMaterial3: true,\n),\nhome: const MyHomePage(title: 'Flutter Demo Home Page'),\n),\n);\n}\n}\n\n<div class=\"content-ad\"></div>\n\n이제 앱 어디에서든 이 카운터 cubit 인스턴스에 액세스할 수 있습니다. 이전에 생성한 cubit 인스턴스를 제거하고 다음을 사용할 수 있습니다.\n\n```js\nfinal counterCubit = BlocProvider.of<CounterCubit>(context);\n```\n\nhome_page.dart에서\n\n```js\n  Widget build(BuildContext context) {\n    final counterCubit = BlocProvider.of<CounterCubit>(context);\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n\n            BlocBuilder<CounterCubit, int>(\n                bloc: counterCubit, // optional\n                builder: (context, counter) {\n                  return Text(\n                    '$counter',\n                  );\n                }),\n          ],\n        ),\n      ),\n```\n\n<div class=\"content-ad\"></div>\n\ninc_dec_page.dart 파일에서\n\n```js\n @override\n  Widget build(BuildContext context) {\n    final counterCubit = BlocProvider.of<CounterCubit>(context);\n    return Scaffold(\n      floatingActionButton: Column(\n        mainAxisAlignment: MainAxisAlignment.end,\n        children: [\n          IconButton(\n            onPressed: () => counterCubit.increment(),\n            tooltip: '증가',\n            icon: const Icon(Icons.add),\n          ),\n          const SizedBox(\n            height: 10,\n          ),\n          IconButton(\n            onPressed: () => counterCubit.decrement(),\n            tooltip: '감소',\n            icon: const Icon(Icons.minimize),\n          ),\n        ],\n```\n\n이 예시의 전체 코드는 제 GitHub 저장소에서 확인할 수 있습니다:\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n요약하자면, Cubit은 bloc 및 provider 패키지의 장점을 결합하여 상태를 관리하는 간단한 방법을 제공하며 이벤트의 복잡성 없이 상태를 관리할 수 있습니다. Cubit은 메서드 중심의 접근 방식과 최소한의 보일러플레이트 코드로 상태 관리를 간소화하므로 Flutter 개발자들에게 효율성과 구현 용이성을 위한 탁월한 선택지가 됩니다.\n\n- 👔 LinkedIn: muhammadnaqeeb\n- 💻 GitHub: muhammadnaqeeb\n","ogImage":{"url":"/assets/img/2024-06-21-CubitStateManagementinFlutter_0.png"},"coverImage":"/assets/img/2024-06-21-CubitStateManagementinFlutter_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-CubitStateManagementinFlutter_0.png\" alt=\"Cubit State Management in Flutter\"></p>\n<p>상태 관리는 모바일 앱 개발에서 중요한 요소이며, 특히 UI가 반응적인 Flutter와 같은 프레임워크에서는 더욱 중요합니다. Flutter에서 다양한 상태 관리 기술 중 하나인 BLoC (Business Logic Component) 패턴이 상당한 인기를 얻었습니다. BLoC의 영역 내에서 두 가지 주요 접근 방식이 있습니다: Bloc State Management과 Cubit State Management.</p>\n<h1>Cubit이란?</h1>\n<p>Cubit은 BLoC 패턴의 일부인 간단하고 직관적인 상태 관리 솔루션입니다. \"Business Logic Component\"의 약자입니다. 전통적인 BLoC와는 달리, Cubit은 더 가벼우며 더 간단한 API를 가지고 있어 더 작은 프로젝트나 간단한 상태 관리 필요에 쉽게 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>플러터에서 Cubit 상태 관리를 시작하려면 flutter_bloc 패키지를 설치해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">dependencies</span>:\n   <span class=\"hljs-attr\">flutter_bloc</span>: ^<span class=\"hljs-number\">8.1</span><span class=\"hljs-number\">.3</span>\n</code></pre>\n<h1>Cubit을 사용한 카운터 앱</h1>\n<p>더 나은 이해를 위해 Cubit을 사용하여 간단한 카운터 앱을 구현해 봅시다. 단계별로 진행하겠습니다. 함께 따라와 주세요.</p>\n<div class=\"content-ad\"></div>\n<p>친구야, Cubit 폴더를 만들어 그 안에 counter_cubit.dart 파일을 생성해보세요.</p>\n<p><img src=\"/assets/img/2024-06-21-CubitStateManagementinFlutter_1.png\" alt=\"이미지\"></p>\n<p>파일 안에 Cubit을 확장한 클래스를 만들어주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterCubit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Cubit</span> {}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>문제: 하지만 이렇게 하면 오류가 발생합니다. 수퍼 클래스 'Cubit<code>dynamic</code>'에는 인수가 없는 생성자가 없습니다.</p>\n<p>그래서 생성자를 만들어 초기 상태를 전달해야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterCubit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Cubit</span> {\n  <span class=\"hljs-title class_\">CounterCubit</span>():<span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-number\">0</span>);\n}\n</code></pre>\n<p>여기서 '0'은 초기 상태이지만 문자열, 클래스 등이 될 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>이제 초기 상태를 화면에 표시해야 합니다</h2>\n<p>카운터 큐빗 클래스의 인스턴스를 만듭니다.</p>\n<p>이제 이 객체를 사용하여 다양한 것에 액세스할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-21-CubitStateManagementinFlutter_2.png\" alt=\"Cubit State Management in Flutter\"></p>\n<div class=\"content-ad\"></div>\n<p>지금은 .state를 필요로 합니다.</p>\n<pre><code class=\"hljs language-js\">final counter = <span class=\"hljs-title class_\">CounterCubit</span>().<span class=\"hljs-property\">state</span>;\n</code></pre>\n<p>필요한 곳에서 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"$counter\"</span>);\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>문제: 작은 문제가 있습니다. 이 카운터는 동적 타입이므로 코드를 망가뜨리지는 않지만, 동적 타입을 피해야 합니다.</p>\n<p><img src=\"/assets/img/2024-06-21-CubitStateManagementinFlutter_3.png\" alt=\"이미지\"></p>\n<p>그래서 카운터 cubic 클래스에 타입을 지정해 주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterCubit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Cubit</span>&#x3C;int> {\n  <span class=\"hljs-title class_\">CounterCubit</span>() : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-number\">0</span>);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 초기 상태를 성공적으로 표시했어요.</p>\n<h2>값 증가, 상태 변경</h2>\n<p>이를 위해 카운터 커빗 클래스에 값을 증가시키는 함수를 만들고 모든 청취자에게 알립니다. 상태를 변경하기 위해 emit 함수를 사용합니다.</p>\n<p>emit(state) // 제공된 [state]로 상태를 업데이트합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterCubit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Cubit</span>&#x3C;int> {\n  <span class=\"hljs-title class_\">CounterCubit</span>() : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">emit</span>(state + <span class=\"hljs-number\">1</span>);\n  }\n}\n</code></pre>\n<p>이제 이 함수를 버튼 클릭에 사용하세요</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title class_\">CounterCubit</span>().<span class=\"hljs-title function_\">increment</span>(),\n</code></pre>\n<p>문제: 그러나 버튼을 클릭해도 상태가 변경되지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<p>이는 우리가 cubit의 두 개체를 생성하고 있기 때문입니다. 두 번째 cubit의 값을 업데이트하고 있습니다. 이것을 제거하려면 하나의 cubit만 사용해야 합니다.</p>\n<p>단일 객체 생성</p>\n<pre><code class=\"hljs language-js\">final counterCubit = <span class=\"hljs-title class_\">CounterCubit</span>();\n</code></pre>\n<p>그리고 이것을 모두에서 사용하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">final counter = counterCubit.<span class=\"hljs-property\">state</span>; <span class=\"hljs-comment\">// 빌드 내부</span>\n\n</code></pre>\n<p>버튼을 누르면</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterCubit.<span class=\"hljs-title function_\">increment</span>(),\n</code></pre>\n<p>문제점: 그러나 한 가지 더 빠진 것이 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>한 번만 값을 받아서 상태를 업데이트하고 emit이 청취자에게 통지하지만 우리는 상태를 청취하고 있지 않습니다.</p>\n<p>이제 BlocBuilder를 사용해야 합니다. 이는 flutter_bloc에서 제공하는 위젯이며 bloc과 builder라는 두 인수가 필요합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">BlocBuilder</span>&#x3C;<span class=\"hljs-title class_\">CounterCubit</span>, int>(\n      <span class=\"hljs-attr\">bloc</span>: counterCubit, <span class=\"hljs-comment\">// 선택 사항</span>\n      <span class=\"hljs-attr\">builder</span>: (context, counter) {\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(\n           <span class=\"hljs-string\">'$counter'</span>,\n         );\n}),\n</code></pre>\n<h1>완료 단계</h1>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 Markdown 형식으로 변경해주세요.</p>\n<p>Create a separate class extend with cubit, give the initial state and a function to change the state.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter_bloc/flutter_bloc.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CounterCubit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Cubit</span>&#x3C;int> {\n  <span class=\"hljs-title class_\">CounterCubit</span>() : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">emit</span>(state + <span class=\"hljs-number\">1</span>);\n  }\n}\n</code></pre>\n<p>Use the state by making a single object of the cubit class and use BlocBuilder where you need the changing state</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_MyHomePageState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">MyHomePage</span>> {\n  final counterCubit = <span class=\"hljs-title class_\">CounterCubit</span>(); <span class=\"hljs-comment\">// (1: object)</span>\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n            <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Text</span>(\n              <span class=\"hljs-string\">'You have pushed the button this many times:'</span>,\n            ),\n            <span class=\"hljs-comment\">// (2: state value)</span>\n            <span class=\"hljs-title class_\">BlocBuilder</span>&#x3C;<span class=\"hljs-title class_\">CounterCubit</span>, int>(\n              <span class=\"hljs-attr\">bloc</span>: counterCubit, <span class=\"hljs-comment\">// optional</span>\n              <span class=\"hljs-attr\">builder</span>: (context, counter) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(\n                  <span class=\"hljs-string\">'$counter'</span>,\n                );\n              }\n            ),\n          ],\n        ),\n      ),\n      <span class=\"hljs-attr\">floatingActionButton</span>: <span class=\"hljs-title class_\">FloatingActionButton</span>(\n        <span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterCubit.<span class=\"hljs-title function_\">increment</span>(), <span class=\"hljs-comment\">// (3: increment)</span>\n        <span class=\"hljs-attr\">tooltip</span>: <span class=\"hljs-string\">'Increment'</span>,\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">add</span>),\n      ),\n    );\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>감소 기능 추가</h2>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decrement</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (state == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-title function_\">emit</span>(state - <span class=\"hljs-number\">1</span>);\n  }\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterCubit.<span class=\"hljs-title function_\">decrement</span>(),\n</code></pre>\n<p>참고: emit() 함수는 Cubit 외부에서 사용할 수 없습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>질문: 두 개의 별도 페이지가 있는 경우</h1>\n<p>두 개의 별도 페이지가 있는 경우에는 상태를 표시하는 페이지와 그 상태를 변경하는 버튼이 있는 페이지가 따로 있는 것을 의미합니다.</p>\n<p>그런데 앞서 언급한 대로 cubit 클래스의 두 개의 다른 객체를 사용할 수 없습니다.</p>\n<p><img src=\"/assets/img/2024-06-21-CubitStateManagementinFlutter_4.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>이제 icc_dec_page에 버튼이 있고 home_page.dart에서 카운터를 표시하고 있습니다.</p>\n<p>카운터 Cubit의 두 인스턴스를 만들 수 없기 때문에 작동하지 않습니다. 하나의 인스턴스만 사용해야 합니다. 이 문제를 해결하기 위해 BlocProvider를 사용합니다. BlocProvider는 블록의 인스턴스를 전달하는 데 사용됩니다.</p>\n<p>따라서 main.dart에서 Material app을 BlocProvider로 래핑하고 cubit/bloc을 함수의 인수로 전달합니다.</p>\n<p>Markdown 형식의 표로 변경:</p>\n<p>Widget build(BuildContext context) {\nreturn BlocProvider( // &#x3C;-- 이 부분\ncreate: (_) => CounterCubit(),\nchild: MaterialApp(\ntitle: 'Flutter Demo',\ntheme: ThemeData(\ncolorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\nuseMaterial3: true,\n),\nhome: const MyHomePage(title: 'Flutter Demo Home Page'),\n),\n);\n}\n}</p>\n<div class=\"content-ad\"></div>\n<p>이제 앱 어디에서든 이 카운터 cubit 인스턴스에 액세스할 수 있습니다. 이전에 생성한 cubit 인스턴스를 제거하고 다음을 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">final counterCubit = <span class=\"hljs-title class_\">BlocProvider</span>.<span class=\"hljs-property\">of</span>&#x3C;<span class=\"hljs-title class_\">CounterCubit</span>>(context);\n</code></pre>\n<p>home_page.dart에서</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    final counterCubit = <span class=\"hljs-title class_\">BlocProvider</span>.<span class=\"hljs-property\">of</span>&#x3C;<span class=\"hljs-title class_\">CounterCubit</span>>(context);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Center</span>(\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">center</span>,\n          <span class=\"hljs-attr\">children</span>: &#x3C;<span class=\"hljs-title class_\">Widget</span>>[\n\n            <span class=\"hljs-title class_\">BlocBuilder</span>&#x3C;<span class=\"hljs-title class_\">CounterCubit</span>, int>(\n                <span class=\"hljs-attr\">bloc</span>: counterCubit, <span class=\"hljs-comment\">// optional</span>\n                <span class=\"hljs-attr\">builder</span>: (context, counter) {\n                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Text</span>(\n                    <span class=\"hljs-string\">'$counter'</span>,\n                  );\n                }),\n          ],\n        ),\n      ),\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>inc_dec_page.dart 파일에서</p>\n<pre><code class=\"hljs language-js\"> @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    final counterCubit = <span class=\"hljs-title class_\">BlocProvider</span>.<span class=\"hljs-property\">of</span>&#x3C;<span class=\"hljs-title class_\">CounterCubit</span>>(context);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">floatingActionButton</span>: <span class=\"hljs-title class_\">Column</span>(\n        <span class=\"hljs-attr\">mainAxisAlignment</span>: <span class=\"hljs-title class_\">MainAxisAlignment</span>.<span class=\"hljs-property\">end</span>,\n        <span class=\"hljs-attr\">children</span>: [\n          <span class=\"hljs-title class_\">IconButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterCubit.<span class=\"hljs-title function_\">increment</span>(),\n            <span class=\"hljs-attr\">tooltip</span>: <span class=\"hljs-string\">'증가'</span>,\n            <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">add</span>),\n          ),\n          <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SizedBox</span>(\n            <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">10</span>,\n          ),\n          <span class=\"hljs-title class_\">IconButton</span>(\n            <span class=\"hljs-attr\">onPressed</span>: <span class=\"hljs-function\">() =></span> counterCubit.<span class=\"hljs-title function_\">decrement</span>(),\n            <span class=\"hljs-attr\">tooltip</span>: <span class=\"hljs-string\">'감소'</span>,\n            <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Icon</span>(<span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">minimize</span>),\n          ),\n        ],\n</code></pre>\n<p>이 예시의 전체 코드는 제 GitHub 저장소에서 확인할 수 있습니다:</p>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>요약하자면, Cubit은 bloc 및 provider 패키지의 장점을 결합하여 상태를 관리하는 간단한 방법을 제공하며 이벤트의 복잡성 없이 상태를 관리할 수 있습니다. Cubit은 메서드 중심의 접근 방식과 최소한의 보일러플레이트 코드로 상태 관리를 간소화하므로 Flutter 개발자들에게 효율성과 구현 용이성을 위한 탁월한 선택지가 됩니다.</p>\n<ul>\n<li>👔 LinkedIn: muhammadnaqeeb</li>\n<li>💻 GitHub: muhammadnaqeeb</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}