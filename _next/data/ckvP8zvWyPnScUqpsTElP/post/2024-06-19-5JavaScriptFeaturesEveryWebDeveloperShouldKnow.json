{"pageProps":{"post":{"title":"웹 개발자가 알아야 할 5가지 JavaScript 기능","description":"","date":"2024-06-19 08:31","slug":"2024-06-19-5JavaScriptFeaturesEveryWebDeveloperShouldKnow","content":"\n\n<img src=\"/assets/img/2024-06-19-5JavaScriptFeaturesEveryWebDeveloperShouldKnow_0.png\" />\n\n안녕하세요! 이 글에서는 모든 웹 개발자가 알아야 할 5가지 JavaScript 기능을 소개해 드리겠습니다.\n\n## 1. Default Parameters\n\nDefault parameters(기본 매개변수)는 함수 매개변수의 기본 값을 설정할 수 있는 간단하지만 유용한 기능입니다.\n\n<div class=\"content-ad\"></div>\n\n가끔 함수가 매개변수를 받는지 확실하게 알 수 없을 때가 있습니다. 따라서 대체 값을 설정하면 예기치 못한 오류를 방지하는 데 도움이 됩니다.\n\n```js\nfunction greet(name = '손님') {\n    console.log(`안녕하세요, ${name}님!`);\n}\n\ngreet(); // 출력: 안녕하세요, 손님!\ngreet('Alice'); // 출력: 안녕하세요, Alice님!\n```\n\n기본 매개변수를 사용하여 일반적인 버그를 피하고 함수를 보다 견고하고 가독성 좋게 만들 수 있습니다.\n\n## 2. 구조 분해 할당\n\n<div class=\"content-ad\"></div>\n\n구조 분해 할당을 사용하면 배열에서 값이나 객체의 속성에서 값을 추출하여 별도의 변수로 할당할 수 있습니다. 이를 통해 코드를 더 깔끔하고 간결하게 만들 수 있습니다.\n\n구조 분해는 배열과 객체 모두에서 사용할 수 있습니다:\n\n배열:\n\n```js\nconst [first, second, third] = [1, 2, 3];\nconsole.log(first, second, third); // 결과: 1 2 3\n```\n\n<div class=\"content-ad\"></div>\n\n오브젝트:\n\n```js\nconst person = { name: 'Alice', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age); // 결과: Alice 30\n```\n\n## 3. 펼침 연산자\n\n펼침 연산자 ...은 배열이나 오브젝트의 요소를 확장할 수 있게 해줍니다. 이는 배열과 오브젝트를 결합하거나 복사하거나 조작하는 등 다양한 목적으로 활용될 수 있는 도구입니다.\n\n<div class=\"content-ad\"></div>\n\n배열 결합:\n\n```js\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // 출력: [1, 2, 3, 4, 5, 6]\n```\n\n객체 복사:\n\n```js\nconst original = { name: 'Alice', age: 30 };\nconst copy = { ...original, city: 'Wonderland' };\nconsole.log(copy); // 출력: { name: 'Alice', age: 30, city: 'Wonderland' }\n```\n\n<div class=\"content-ad\"></div>\n\n펼침 연산자를 사용하면 무제한 개수의 인수를 가지는 함수를 만들 수도 있어요. 함수가 받을 인수의 개수를 모를 때 유용할 수 있어요.\n\n```js\nfunction funcWithUnlimitedArguments(...args) {\n    for (let arg of args) {\n        console.log(arg);\n    }\n}\n\nfuncWithUnlimitedArguments(1,2,3,4,5,6,7);\n```\n\n## 4. 템플릿 리터럴\n\n템플릿 리터럴은 ES6에 도입된 기능으로, 문자열을 만드는 더 간단한 방법을 제공해요.\n\n<div class=\"content-ad\"></div>\n\n템플릿 리터럴을 만들려면 따옴표 대신 역 따옴표 ``를 사용하세요. 역 따옴표 안에 일반적인 문자열을 정의할 수 있을 뿐만 아니라 코드를 내장할 수도 있습니다.\n\n```js\nconst name = 'Alice';\nconst age = 30;\nconst message = `Hello, my name is ${name} and I am ${age} years old.`;\n\nconsole.log(message);\n// 출력: Hello, my name is Alice and I am 30 years old.\n```\n\n템플릿 리터럴을 사용하면 HTML 예시처럼 다음과 같이 간단하게 여러 줄의 문자열을 만들 수도 있습니다.\n\n```js\n// 템플릿 리터럴을 사용하여 동적 HTML 콘텐츠 작성\nconst person = {\n    name: 'Alice',\n    age: 30,\n    city: 'Wonderland'\n};\n\nconst markup = `\n    <div class=\"person\">\n        <h2>${person.name}</h2>\n        <p>Age: ${person.age}</p>\n        <p>Location: ${person.city}</p>\n    </div>\n`;\n\ndocument.body.innerHTML = markup;\n```\n\n<div class=\"content-ad\"></div>\n\n## 5. Async / Await\n\nasync 및 await은 ES8에서 소개된 키워드로, 비동기 JavaScript 코드를 처리하는 더 읽기 쉽고 직관적인 방법을 제공합니다.\n\nAsync는 비동기 함수를 선언하는 데 사용됩니다. 비동기 함수는 항상 프로미스를 반환하며 일반적인 동기식 코드 실행 흐름 외부에서 실행됩니다.\n\nAsync 함수 내부에서는 Promise가 해결되기를 기다리며 async 함수의 실행을 일시 중지하는 await 표현식을 사용할 수 있습니다. 해결되면 async 함수를 다시 시작하고 해결된 값을 반환합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 비동기 함수 예시\nasync function fetchData() {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('데이터를 불러오는 중 오류 발생:', error);\n        throw error;\n    }\n}\n```\n\n## 결론\n\n이러한 기능을 알면 JavaScript 코드를 개선하고 더 읽기 쉽게 만들 수 있습니다.\n\n읽어 주셔서 감사합니다! 즐거운 하루 되세요!\n","ogImage":{"url":"/assets/img/2024-06-19-5JavaScriptFeaturesEveryWebDeveloperShouldKnow_0.png"},"coverImage":"/assets/img/2024-06-19-5JavaScriptFeaturesEveryWebDeveloperShouldKnow_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-19-5JavaScriptFeaturesEveryWebDeveloperShouldKnow_0.png\">\n<p>안녕하세요! 이 글에서는 모든 웹 개발자가 알아야 할 5가지 JavaScript 기능을 소개해 드리겠습니다.</p>\n<h2>1. Default Parameters</h2>\n<p>Default parameters(기본 매개변수)는 함수 매개변수의 기본 값을 설정할 수 있는 간단하지만 유용한 기능입니다.</p>\n<div class=\"content-ad\"></div>\n<p>가끔 함수가 매개변수를 받는지 확실하게 알 수 없을 때가 있습니다. 따라서 대체 값을 설정하면 예기치 못한 오류를 방지하는 데 도움이 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name = <span class=\"hljs-string\">'손님'</span></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`안녕하세요, <span class=\"hljs-subst\">${name}</span>님!`</span>);\n}\n\n<span class=\"hljs-title function_\">greet</span>(); <span class=\"hljs-comment\">// 출력: 안녕하세요, 손님!</span>\n<span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-string\">'Alice'</span>); <span class=\"hljs-comment\">// 출력: 안녕하세요, Alice님!</span>\n</code></pre>\n<p>기본 매개변수를 사용하여 일반적인 버그를 피하고 함수를 보다 견고하고 가독성 좋게 만들 수 있습니다.</p>\n<h2>2. 구조 분해 할당</h2>\n<div class=\"content-ad\"></div>\n<p>구조 분해 할당을 사용하면 배열에서 값이나 객체의 속성에서 값을 추출하여 별도의 변수로 할당할 수 있습니다. 이를 통해 코드를 더 깔끔하고 간결하게 만들 수 있습니다.</p>\n<p>구조 분해는 배열과 객체 모두에서 사용할 수 있습니다:</p>\n<p>배열:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [first, second, third] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(first, second, third); <span class=\"hljs-comment\">// 결과: 1 2 3</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>오브젝트:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> person = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alice'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-keyword\">const</span> { name, age } = person;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, age); <span class=\"hljs-comment\">// 결과: Alice 30</span>\n</code></pre>\n<h2>3. 펼침 연산자</h2>\n<p>펼침 연산자 ...은 배열이나 오브젝트의 요소를 확장할 수 있게 해줍니다. 이는 배열과 오브젝트를 결합하거나 복사하거나 조작하는 등 다양한 목적으로 활용될 수 있는 도구입니다.</p>\n<div class=\"content-ad\"></div>\n<p>배열 결합:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">const</span> combined = [...arr1, ...arr2];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(combined); <span class=\"hljs-comment\">// 출력: [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n<p>객체 복사:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> original = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alice'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span> };\n<span class=\"hljs-keyword\">const</span> copy = { ...original, <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">'Wonderland'</span> };\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(copy); <span class=\"hljs-comment\">// 출력: { name: 'Alice', age: 30, city: 'Wonderland' }</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>펼침 연산자를 사용하면 무제한 개수의 인수를 가지는 함수를 만들 수도 있어요. 함수가 받을 인수의 개수를 모를 때 유용할 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">funcWithUnlimitedArguments</span>(<span class=\"hljs-params\">...args</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> arg <span class=\"hljs-keyword\">of</span> args) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arg);\n    }\n}\n\n<span class=\"hljs-title function_\">funcWithUnlimitedArguments</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>);\n</code></pre>\n<h2>4. 템플릿 리터럴</h2>\n<p>템플릿 리터럴은 ES6에 도입된 기능으로, 문자열을 만드는 더 간단한 방법을 제공해요.</p>\n<div class=\"content-ad\"></div>\n<p>템플릿 리터럴을 만들려면 따옴표 대신 역 따옴표 ``를 사용하세요. 역 따옴표 안에 일반적인 문자열을 정의할 수 있을 뿐만 아니라 코드를 내장할 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">'Alice'</span>;\n<span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-number\">30</span>;\n<span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">${name}</span> and I am <span class=\"hljs-subst\">${age}</span> years old.`</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);\n<span class=\"hljs-comment\">// 출력: Hello, my name is Alice and I am 30 years old.</span>\n</code></pre>\n<p>템플릿 리터럴을 사용하면 HTML 예시처럼 다음과 같이 간단하게 여러 줄의 문자열을 만들 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 템플릿 리터럴을 사용하여 동적 HTML 콘텐츠 작성</span>\n<span class=\"hljs-keyword\">const</span> person = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alice'</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">'Wonderland'</span>\n};\n\n<span class=\"hljs-keyword\">const</span> markup = <span class=\"hljs-string\">`\n    &#x3C;div class=\"person\">\n        &#x3C;h2><span class=\"hljs-subst\">${person.name}</span>&#x3C;/h2>\n        &#x3C;p>Age: <span class=\"hljs-subst\">${person.age}</span>&#x3C;/p>\n        &#x3C;p>Location: <span class=\"hljs-subst\">${person.city}</span>&#x3C;/p>\n    &#x3C;/div>\n`</span>;\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">innerHTML</span> = markup;\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>5. Async / Await</h2>\n<p>async 및 await은 ES8에서 소개된 키워드로, 비동기 JavaScript 코드를 처리하는 더 읽기 쉽고 직관적인 방법을 제공합니다.</p>\n<p>Async는 비동기 함수를 선언하는 데 사용됩니다. 비동기 함수는 항상 프로미스를 반환하며 일반적인 동기식 코드 실행 흐름 외부에서 실행됩니다.</p>\n<p>Async 함수 내부에서는 Promise가 해결되기를 기다리며 async 함수의 실행을 일시 중지하는 await 표현식을 사용할 수 있습니다. 해결되면 async 함수를 다시 시작하고 해결된 값을 반환합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 비동기 함수 예시</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.example.com/data'</span>);\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n        <span class=\"hljs-keyword\">return</span> data;\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'데이터를 불러오는 중 오류 발생:'</span>, error);\n        <span class=\"hljs-keyword\">throw</span> error;\n    }\n}\n</code></pre>\n<h2>결론</h2>\n<p>이러한 기능을 알면 JavaScript 코드를 개선하고 더 읽기 쉽게 만들 수 있습니다.</p>\n<p>읽어 주셔서 감사합니다! 즐거운 하루 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}