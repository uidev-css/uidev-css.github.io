{"pageProps":{"post":{"title":"플러터와 다트에서 코드 난독화 신비로운 코드 이해하기","description":"","date":"2024-06-21 20:49","slug":"2024-06-21-ObfuscationinFlutterandDartMysteriouscodes","content":"\n\n![image](/assets/img/2024-06-21-ObfuscationinFlutterandDartMysteriouscodes_0.png)\n\n안녕하세요, 이 글에서는 플러터와 다트 코드 난독화, 플러터의 중요한 주제 중 하나를 배우게 됩니다.\n\n먼저, 난독화가 무엇인지 알아보겠습니다.\n\n난독화는 코드를 사람이 해독할 수 없도록 만드는 과정입니다. 이는 역공학 공격을 어렵게 만들어서 애플리케이션의 보안을 높이기 위해 사용됩니다. 플러터와 다트는 난독화를 위한 일부 내장 도구와 방법을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n# 왜 난독화를 사용해야 하나요?\n\n- 보안: 코드를 알아보기 어렵게 만들어 악의적 사용자가 코드를 이해하고 남용하는 것을 어렵게 합니다.\n- 지적 재산권: 코드를 보호하여 지적 재산권을 안전하게 지킵니다.\n- 용량 감소: 어떤 경우에는 난독화가 코드의 크기를 줄이는 데 도움이 될 수도 있습니다.\n\n시작해봅시다! 🥷🏻\n\n- 플러터 프로젝트를 만들어보세요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nflutter create my_app\ncd my_app\n```\n\n2. 프로젝트 구조화\n\n난독화를 활성화하려면 flutter 빌드 명령에 몇 가지 추가 매개변수를 추가해야 합니다. Android 및 iOS 모두를 위해 난독화하는 방법을 살펴보겠습니다.\n\nAndroid용으로는;\n\n\n<div class=\"content-ad\"></div>\n\n- android/app/build.gradle 파일을 열어주세요.\n- buildTypes 섹션에서 릴리스 구성을 다음과 같이 업데이트해주세요:\n\n```js\nandroid {\n    ...\n    buildTypes {\n        release {\n            ...\n            minifyEnabled true\n            shrinkResources true\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n```\n\n- Proguard 규칙을 지정하려면 android/app/proguard-rules.pro 파일을 생성하고 다음 줄을 추가해주세요:\n\n```js\n# Flutter 난독화\n-ignorewarnings\n-keep class io.flutter.app.** { *; }\n-keep class io.flutter.plugin.** { *; }\n-keep class io.flutter.util.** { *; }\n-keep class io.flutter.view.** { *; }\n-keep class io.flutter.embedding.** { *; }\n-keep class io.flutter.embedding.engine.** { *; }\n-keep class io.flutter.embedding.android.** { *; }\n-keep class io.flutter.embedding.engine.plugins.** { *; }\n-keep class io.flutter.plugin.common.** { *; }\n-keep class io.flutter.plugin.platform.** { *; }\n```\n\n<div class=\"content-ad\"></div>\n\niOS에서는 다음을 수행하실 수 있습니다:\n\n- Open theios/Runner.xcodeproj 파일을 엽니다.\n- 빌드 설정 섹션에서 'Other Swift Flags' 설정을 찾아서 -D DART_OBFUSCATION을 추가합니다.\n\n3. 난독화된 애플리케이션 컴파일\n\n다음 명령어를 사용하여 Android 및 iOS용 난독화된 빌드를 생성합니다:\n\n<div class=\"content-ad\"></div>\n\n안드로이드:\n\n```js\nflutter build apk --release --obfuscate --split-debug-info=./build_info\n```\n\niOS:\n\n```js\nflutter build ios --release --obfuscate --split-debug-info=./build_info\n```\n\n<div class=\"content-ad\"></div>\n\n이 명령어들은 난독화된 코드의 디버그 정보 파일을 지정된 디렉토리에 넣습니다. 이 파일들은 디버깅 및 충돌 보고서 해결에 중요합니다.\n\n4. 애플리케이션 파일 검토\n\n난독화 프로세스의 결과물인 APK 또는 IPA 파일을 열어 코드가 숨겨져 있는지 확인할 수 있습니다. Android APK 파일을 검토하기 위해서는 apktool 또는 유사한 도구를 사용할 수 있습니다. iOS IPA 파일은 class-dump 또는 otool과 같은 도구를 사용할 수 있습니다.\n\n- Android APK 파일 검토:\napktool을 사용하여 APK 파일을 디컴파일합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\napktool d my_app.apk -o output_dir\n```\n\n- iOS IPA 파일을 조사해보세요:\nIPA 파일을 열고 Payload 디렉토리에서 응용 프로그램 파일을 추출하세요. class-dump나 otool을 사용하여 응용 프로그램 파일을 조사하세요.\n\n```js\nclass-dump -H MyApp -o output_dir\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n위의 단계를 따라 코드를 난독화하여 응용 프로그램의 안전성을 높일 수 있습니다. 이를 정기적으로 수행함으로써 응용 프로그램의 보안을 지속적으로 보호할 수 있습니다.\n\n독자 여러분, 읽어주셔서 감사합니다!\n새로운 기사에서 뵙겠습니다 💙\n\n제 계정을 여기에서 확인하고 질문을 하실 수 있습니다 ✨\n\n트위터에서 플러터 커뮤니티를 팔로우해보세요:\nhttps://www.twitter.com/FlutterComm","ogImage":{"url":"/assets/img/2024-06-21-ObfuscationinFlutterandDartMysteriouscodes_0.png"},"coverImage":"/assets/img/2024-06-21-ObfuscationinFlutterandDartMysteriouscodes_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-21-ObfuscationinFlutterandDartMysteriouscodes_0.png\" alt=\"image\"></p>\n<p>안녕하세요, 이 글에서는 플러터와 다트 코드 난독화, 플러터의 중요한 주제 중 하나를 배우게 됩니다.</p>\n<p>먼저, 난독화가 무엇인지 알아보겠습니다.</p>\n<p>난독화는 코드를 사람이 해독할 수 없도록 만드는 과정입니다. 이는 역공학 공격을 어렵게 만들어서 애플리케이션의 보안을 높이기 위해 사용됩니다. 플러터와 다트는 난독화를 위한 일부 내장 도구와 방법을 제공합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>왜 난독화를 사용해야 하나요?</h1>\n<ul>\n<li>보안: 코드를 알아보기 어렵게 만들어 악의적 사용자가 코드를 이해하고 남용하는 것을 어렵게 합니다.</li>\n<li>지적 재산권: 코드를 보호하여 지적 재산권을 안전하게 지킵니다.</li>\n<li>용량 감소: 어떤 경우에는 난독화가 코드의 크기를 줄이는 데 도움이 될 수도 있습니다.</li>\n</ul>\n<p>시작해봅시다! 🥷🏻</p>\n<ul>\n<li>플러터 프로젝트를 만들어보세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">flutter create my_app\ncd my_app\n</code></pre>\n<ol start=\"2\">\n<li>프로젝트 구조화</li>\n</ol>\n<p>난독화를 활성화하려면 flutter 빌드 명령에 몇 가지 추가 매개변수를 추가해야 합니다. Android 및 iOS 모두를 위해 난독화하는 방법을 살펴보겠습니다.</p>\n<p>Android용으로는;</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>android/app/build.gradle 파일을 열어주세요.</li>\n<li>buildTypes 섹션에서 릴리스 구성을 다음과 같이 업데이트해주세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">android {\n    ...\n    buildTypes {\n        release {\n            ...\n            minifyEnabled <span class=\"hljs-literal\">true</span>\n            shrinkResources <span class=\"hljs-literal\">true</span>\n            proguardFiles <span class=\"hljs-title function_\">getDefaultProguardFile</span>(<span class=\"hljs-string\">'proguard-android-optimize.txt'</span>), <span class=\"hljs-string\">'proguard-rules.pro'</span>\n        }\n    }\n}\n</code></pre>\n<ul>\n<li>Proguard 규칙을 지정하려면 android/app/proguard-rules.pro 파일을 생성하고 다음 줄을 추가해주세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Flutter</span> 난독화\n-ignorewarnings\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">app</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">plugin</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">util</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">view</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">embedding</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">embedding</span>.<span class=\"hljs-property\">engine</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">embedding</span>.<span class=\"hljs-property\">android</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">embedding</span>.<span class=\"hljs-property\">engine</span>.<span class=\"hljs-property\">plugins</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">plugin</span>.<span class=\"hljs-property\">common</span>.** { *; }\n-keep <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">io</span>.<span class=\"hljs-property\">flutter</span>.<span class=\"hljs-property\">plugin</span>.<span class=\"hljs-property\">platform</span>.** { *; }\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>iOS에서는 다음을 수행하실 수 있습니다:</p>\n<ul>\n<li>Open theios/Runner.xcodeproj 파일을 엽니다.</li>\n<li>빌드 설정 섹션에서 'Other Swift Flags' 설정을 찾아서 -D DART_OBFUSCATION을 추가합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>난독화된 애플리케이션 컴파일</li>\n</ol>\n<p>다음 명령어를 사용하여 Android 및 iOS용 난독화된 빌드를 생성합니다:</p>\n<div class=\"content-ad\"></div>\n<p>안드로이드:</p>\n<pre><code class=\"hljs language-js\">flutter build apk --release --obfuscate --split-debug-info=./build_info\n</code></pre>\n<p>iOS:</p>\n<pre><code class=\"hljs language-js\">flutter build ios --release --obfuscate --split-debug-info=./build_info\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이 명령어들은 난독화된 코드의 디버그 정보 파일을 지정된 디렉토리에 넣습니다. 이 파일들은 디버깅 및 충돌 보고서 해결에 중요합니다.</p>\n<ol start=\"4\">\n<li>애플리케이션 파일 검토</li>\n</ol>\n<p>난독화 프로세스의 결과물인 APK 또는 IPA 파일을 열어 코드가 숨겨져 있는지 확인할 수 있습니다. Android APK 파일을 검토하기 위해서는 apktool 또는 유사한 도구를 사용할 수 있습니다. iOS IPA 파일은 class-dump 또는 otool과 같은 도구를 사용할 수 있습니다.</p>\n<ul>\n<li>Android APK 파일 검토:\napktool을 사용하여 APK 파일을 디컴파일합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">apktool d my_app.<span class=\"hljs-property\">apk</span> -o output_dir\n</code></pre>\n<ul>\n<li>iOS IPA 파일을 조사해보세요:\nIPA 파일을 열고 Payload 디렉토리에서 응용 프로그램 파일을 추출하세요. class-dump나 otool을 사용하여 응용 프로그램 파일을 조사하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span>-dump -H <span class=\"hljs-title class_\">MyApp</span> -o output_dir\n</code></pre>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>위의 단계를 따라 코드를 난독화하여 응용 프로그램의 안전성을 높일 수 있습니다. 이를 정기적으로 수행함으로써 응용 프로그램의 보안을 지속적으로 보호할 수 있습니다.</p>\n<p>독자 여러분, 읽어주셔서 감사합니다!\n새로운 기사에서 뵙겠습니다 💙</p>\n<p>제 계정을 여기에서 확인하고 질문을 하실 수 있습니다 ✨</p>\n<p>트위터에서 플러터 커뮤니티를 팔로우해보세요:\n<a href=\"https://www.twitter.com/FlutterComm\" rel=\"nofollow\" target=\"_blank\">https://www.twitter.com/FlutterComm</a></p>\n</body>\n</html>\n"},"__N_SSG":true}