{"pageProps":{"post":{"title":"옵저버 디자인 패턴 - Dart","description":"","date":"2024-06-19 00:11","slug":"2024-06-19-ObserverDesignPatternDart","content":"\n\n\n<img src=\"/assets/img/2024-06-19-ObserverDesignPatternDart_0.png\" />\n\n옵저버는 행동 디자인 패턴입니다. 우리는 데이터를 변경할 때 객체에 알리는 관찰자 패턴을 사용할 수 있습니다. 객체에게 \"앗, 데이터가 변경되었어. 할 일을 해라\"고 알립니다. 이는 플러터의 ChangeNotifier와 비슷합니다. 옵저버 패턴에는 Subject와 Observer 두 가지 타입의 클래스가 있습니다. Observer 클래스는 데이터 업데이트를 기다리고 우리의 사용자 정의 로직을 실행할 것입니다. Subject 클래스는 옵저버를 저장하고 데이터를 알림하기 위해 사용됩니다.\n\n# 시작해보죠\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1000/1*MRIUs1xCFX0PjO88wG1AxQ.gif\" />\n\n\n<div class=\"content-ad\"></div>\n\n먼저, Observer 클래스와 update 메서드를 생성할 겁니다. 이 메서드에 대해 구체적인 옵저버들이 알림을 받겠죠.\n\n```js\nabstract class Observer {\n  void update(bool atHome);\n}\n```\n\n이제 Observer 추상 클래스를 구현하는 구체적인 옵저버들을 만들 수 있어요.\n\n```js\nclass Kettle implements Observer {\n  @override\n  void update(bool atHome) {\n    /// 여기에 사용자 정의 로직을 작성할 수 있어요\n    if (atHome) {\n      print('물 끓이는 중');\n    } else {\n      print('주전자가 꺼졌어요');\n    }\n  }\n}\n\nclass Lights implements Observer {\n  @override\n  void update(bool atHome) {\n    /// 여기에 사용자 정의 로직을 작성할 수 있어요\n    if (atHome) {\n      print('조명 켜짐');\n    } else {\n      print('모두 조명 끔');\n    }\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 Subject 클래스를 만들어 보겠습니다. 이것을 HomeManager라고 이름 짓겠습니다.\n\n```js\nclass HomeManager {\n  final List<Observer> _observersList = [];\n\n  /// 변경 가능한 데이터 (상태 데이터)\n  bool _atHome = false;\n\n  /// 새로운 옵서버를 목록에 추가합니다\n  void addListener(Observer observer) {\n    _observersList.add(observer);\n  }\n\n  /// 옵서버를 목록에서 제거합니다\n  void removeListener(Observer observer) {\n    _observersList.remove(observer);\n  }\n\n  /// 데이터 업데이트\n  void setData(bool atHome) {\n    _atHome = atHome;\n  }\n  \n  /// 추가된 모든 옵서버들에게 알립니다\n  void notify() {\n    for (var element in _observersList) {\n      element.update(_atHome);\n    }\n  }\n}\n```\n\n중요한 부분은 notify 메서드입니다. _observersList를 통해 반복하면서 각 옵서버 객체에 대해 update 메서드를 호출합니다. 따라서 각 옵서버는 그 데이터 변경 사항을 인식하게 됩니다. 모든 클래스를 함께 사용합시다. 주석과 함께 설명해 드렸습니다.\n\n```js\nimport 'package:observer_design_pattern/observer.dart';\n\nvoid main(List<String> arguments) {\n  HomeManager homeManager = HomeManager();\n\n  Lights lights = Lights();\n  Kettle kettle = Kettle();\n\n  /// 옵서버들을 목록에 추가합니다\n  homeManager.addListener(lights);\n  homeManager.addListener(kettle);\n\n  /// 데이터 업데이트\n  homeManager.setData(true);\n\n  /// 모든 옵서버에게 알림\n  ///\n  /// Kettle과 Lights가 트리거됩니다\n  homeManager.notify();\n\n  print('------옵서버 제거------');\n\n  /// Lights 옵서버를 제거합니다\n  homeManager.removeListener(lights);\n\n  homeManager.setData(false);\n\n  /// Kettle만 트리거됩니다\n  homeManager.notify();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n여기 결과입니다:\n\n![옵저버 디자인 패턴](/assets/img/2024-06-19-ObserverDesignPatternDart_1.png)\n\n그게 다에요. 간단한 예제를 활용하여 옵저버 디자인 패턴을 설명해보았어요. 마음에 드셨으면 좋겠네요... 의견 주시면 감사하겠어요! 아래에서 작동하는 예제(소스 코드)를 찾을 수 있어요.\n\n![옵저버 패턴 예제](https://miro.medium.com/v2/resize:fit:1000/1*ufNPsZPqqgunmv1Bd2JrzQ.gif)","ogImage":{"url":"/assets/img/2024-06-19-ObserverDesignPatternDart_0.png"},"coverImage":"/assets/img/2024-06-19-ObserverDesignPatternDart_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-19-ObserverDesignPatternDart_0.png\">\n<p>옵저버는 행동 디자인 패턴입니다. 우리는 데이터를 변경할 때 객체에 알리는 관찰자 패턴을 사용할 수 있습니다. 객체에게 \"앗, 데이터가 변경되었어. 할 일을 해라\"고 알립니다. 이는 플러터의 ChangeNotifier와 비슷합니다. 옵저버 패턴에는 Subject와 Observer 두 가지 타입의 클래스가 있습니다. Observer 클래스는 데이터 업데이트를 기다리고 우리의 사용자 정의 로직을 실행할 것입니다. Subject 클래스는 옵저버를 저장하고 데이터를 알림하기 위해 사용됩니다.</p>\n<h1>시작해보죠</h1>\n<img src=\"https://miro.medium.com/v2/resize:fit:1000/1*MRIUs1xCFX0PjO88wG1AxQ.gif\">\n<div class=\"content-ad\"></div>\n<p>먼저, Observer 클래스와 update 메서드를 생성할 겁니다. 이 메서드에 대해 구체적인 옵저버들이 알림을 받겠죠.</p>\n<pre><code class=\"hljs language-js\">abstract <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Observer</span> {\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span>(bool atHome);\n}\n</code></pre>\n<p>이제 Observer 추상 클래스를 구현하는 구체적인 옵저버들을 만들 수 있어요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Kettle</span> implements <span class=\"hljs-title class_\">Observer</span> {\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">bool atHome</span>) {\n    <span class=\"hljs-comment\">/// 여기에 사용자 정의 로직을 작성할 수 있어요</span>\n    <span class=\"hljs-keyword\">if</span> (atHome) {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'물 끓이는 중'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'주전자가 꺼졌어요'</span>);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Lights</span> implements <span class=\"hljs-title class_\">Observer</span> {\n  @override\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">bool atHome</span>) {\n    <span class=\"hljs-comment\">/// 여기에 사용자 정의 로직을 작성할 수 있어요</span>\n    <span class=\"hljs-keyword\">if</span> (atHome) {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'조명 켜짐'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'모두 조명 끔'</span>);\n    }\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 Subject 클래스를 만들어 보겠습니다. 이것을 HomeManager라고 이름 짓겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HomeManager</span> {\n  final <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Observer</span>> _observersList = [];\n\n  <span class=\"hljs-comment\">/// 변경 가능한 데이터 (상태 데이터)</span>\n  bool _atHome = <span class=\"hljs-literal\">false</span>;\n\n  <span class=\"hljs-comment\">/// 새로운 옵서버를 목록에 추가합니다</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addListener</span>(<span class=\"hljs-params\">Observer observer</span>) {\n    _observersList.<span class=\"hljs-title function_\">add</span>(observer);\n  }\n\n  <span class=\"hljs-comment\">/// 옵서버를 목록에서 제거합니다</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeListener</span>(<span class=\"hljs-params\">Observer observer</span>) {\n    _observersList.<span class=\"hljs-title function_\">remove</span>(observer);\n  }\n\n  <span class=\"hljs-comment\">/// 데이터 업데이트</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setData</span>(<span class=\"hljs-params\">bool atHome</span>) {\n    _atHome = atHome;\n  }\n  \n  <span class=\"hljs-comment\">/// 추가된 모든 옵서버들에게 알립니다</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> element <span class=\"hljs-keyword\">in</span> _observersList) {\n      element.<span class=\"hljs-title function_\">update</span>(_atHome);\n    }\n  }\n}\n</code></pre>\n<p>중요한 부분은 notify 메서드입니다. _observersList를 통해 반복하면서 각 옵서버 객체에 대해 update 메서드를 호출합니다. 따라서 각 옵서버는 그 데이터 변경 사항을 인식하게 됩니다. 모든 클래스를 함께 사용합시다. 주석과 함께 설명해 드렸습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:observer_design_pattern/observer.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\">List&#x3C;<span class=\"hljs-built_in\">String</span>> <span class=\"hljs-variable language_\">arguments</span></span>) {\n  <span class=\"hljs-title class_\">HomeManager</span> homeManager = <span class=\"hljs-title class_\">HomeManager</span>();\n\n  <span class=\"hljs-title class_\">Lights</span> lights = <span class=\"hljs-title class_\">Lights</span>();\n  <span class=\"hljs-title class_\">Kettle</span> kettle = <span class=\"hljs-title class_\">Kettle</span>();\n\n  <span class=\"hljs-comment\">/// 옵서버들을 목록에 추가합니다</span>\n  homeManager.<span class=\"hljs-title function_\">addListener</span>(lights);\n  homeManager.<span class=\"hljs-title function_\">addListener</span>(kettle);\n\n  <span class=\"hljs-comment\">/// 데이터 업데이트</span>\n  homeManager.<span class=\"hljs-title function_\">setData</span>(<span class=\"hljs-literal\">true</span>);\n\n  <span class=\"hljs-comment\">/// 모든 옵서버에게 알림</span>\n  <span class=\"hljs-comment\">///</span>\n  <span class=\"hljs-comment\">/// Kettle과 Lights가 트리거됩니다</span>\n  homeManager.<span class=\"hljs-title function_\">notify</span>();\n\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'------옵서버 제거------'</span>);\n\n  <span class=\"hljs-comment\">/// Lights 옵서버를 제거합니다</span>\n  homeManager.<span class=\"hljs-title function_\">removeListener</span>(lights);\n\n  homeManager.<span class=\"hljs-title function_\">setData</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-comment\">/// Kettle만 트리거됩니다</span>\n  homeManager.<span class=\"hljs-title function_\">notify</span>();\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>여기 결과입니다:</p>\n<p><img src=\"/assets/img/2024-06-19-ObserverDesignPatternDart_1.png\" alt=\"옵저버 디자인 패턴\"></p>\n<p>그게 다에요. 간단한 예제를 활용하여 옵저버 디자인 패턴을 설명해보았어요. 마음에 드셨으면 좋겠네요... 의견 주시면 감사하겠어요! 아래에서 작동하는 예제(소스 코드)를 찾을 수 있어요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*ufNPsZPqqgunmv1Bd2JrzQ.gif\" alt=\"옵저버 패턴 예제\"></p>\n</body>\n</html>\n"},"__N_SSG":true}