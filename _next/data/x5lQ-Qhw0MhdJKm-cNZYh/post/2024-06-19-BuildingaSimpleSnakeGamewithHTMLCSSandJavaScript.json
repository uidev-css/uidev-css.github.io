{"pageProps":{"post":{"title":"간단한 Snake 게임 만들기 HTML, CSS 및 JavaScript를 활용하여 함께 해봐요","description":"","date":"2024-06-19 14:38","slug":"2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript","content":"\n\n\n![Game screenshot](/assets/img/2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_0.png)\n\n클래식 스네이크 게임을 만드는 것은 JavaScript 기술을 향상시키는 환상적인 방법입니다. 이 튜토리얼에서는 HTML, CSS 및 JavaScript를 사용하여 간단한 스네이크 게임을 만드는 방법을 단계별로 안내해 드리겠습니다.\n\n여기에서 게임을 확인하실 수 있고, 여기에서 GitHub 저장소를 확인하실 수 있습니다.\n\n# HTML 구조\n\n\n<div class=\"content-ad\"></div>\n\nHTML 구조부터 시작할게요. 주요 구성 요소는 게임을 렌더링하는 캔버스, 현재 및 최고 점수를 표시하는 스코어보드, 그리고 효과음을 출력하는 오디오 요소입니다.\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Snake Game</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"game-container\">\n        <div class=\"score-board\">\n            <span id=\"score\">Score: 0</span>\n            <span id=\"high-score\">High Score: 0</span>\n        </div>\n        <canvas id=\"gameCanvas\"></canvas>\n    </div>\n    <audio id=\"eatSound\" src=\"eat.wav\"></audio>\n    <audio id=\"bombSound\" src=\"bomb.wav\"></audio>\n    <audio id=\"gameOverSound\" src=\"gameover.wav\"></audio>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n# CSS 스타일링\n\n다음으로, 게임을 중앙 정렬하고 캔버스와 스코어보드 스타일을 추가할게요.\n\n<div class=\"content-ad\"></div>\n\n```js\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #282c34;\n    color: #61dafb;\n    font-family: 'Arial', sans-serif;\n}\n.game-container {\n    text-align: center;\n}\n.score-board {\n    margin-bottom: 10px;\n    font-size: 24px;\n}\ncanvas {\n    border: 1px solid #61dafb;\n    background-color: #000;\n}\n```\n\n# JavaScript Logic\n\n자, 이제 게임을 기능적으로 만들기 위해 JavaScript에 집중해 봅시다. 게임을 초기화하는 것, 게임 루프를 처리하는 것, 뱀을 그리고 움직이는 것, 음식을 다루는 것, 그리고 게임 오버 조건을 확인하는 것 등이 있습니다.\n\n# 초기 설정\n\n\n<div class=\"content-ad\"></div>\n\n먼저 캔버스, 콘텍스트 및 초기 게임 변수를 설정합니다.\n\n```js\nconst canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\nconst scoreElement = document.getElementById('score');\nconst highScoreElement = document.getElementById('high-score');\nconst eatSound = document.getElementById('eatSound');\nconst bombSound = document.getElementById('bombSound');\nconst gameOverSound = document.getElementById('gameOverSound');\nconst gridSize = 20;\ncanvas.width = 400;\ncanvas.height = 400;\nlet snake = [{x: gridSize * 2, y: gridSize * 2}];\nlet direction = {x: 0, y: 0};\nlet food = {};\nlet bombFood = null;\nlet score = 0;\nlet highScore = localStorage.getItem('highScore') || 0;\nlet bombTimeout;\nhighScoreElement.innerText = `High Score: ${highScore}`;\n```\n\n# 게임 초기화\n\ninit 함수는 초기 음식을 배치하고 키 입력에 대한 이벤트 리스너를 설정합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction init() {\n    placeFood();\n    document.addEventListener('keydown', changeDirection);\n    gameLoop();\n}\n```\n\n# 게임 루프\n\n게임 루프 함수는 게임의 핵심입니다. 일정 간격으로 게임 상태를 업데이트합니다.\n\n```js\nfunction gameLoop() {\n    if (isGameOver()) {\n        return;\n    }\n    setTimeout(() => {\n        clearCanvas();\n        drawSnake();\n        moveSnake();\n        drawFood();\n        if (bombFood) drawBombFood();\n        checkFoodCollision();\n        checkBombFoodCollision();\n        gameLoop();\n    }, 100);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 캔버스 초기화\n\nclearCanvas 함수는 매번 새로 그려짐에 앞서 캔버스를 지웁니다.\n\n```js\nfunction clearCanvas() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n```\n\n# 뱀 그리기\n\n<div class=\"content-ad\"></div>\n\n다음은 캔버스에 뱀을 렌더링하는 drawSnake 함수입니다.\n\n```js\nfunction drawSnake() {\n    ctx.fillStyle = 'green';\n    snake.forEach((segment, index) => {\n        if (index === 0) {\n            ctx.fillStyle = 'lightgreen'; // 머리 색상\n        } else {\n            ctx.fillStyle = 'green';\n        }\n        ctx.fillRect(segment.x, segment.y, gridSize, gridSize);\n    });\n}\n```\n\n# 뱀 이동\n\nmoveSnake 함수는 현재 방향을 기반으로 뱀의 위치를 업데이트합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction moveSnake() {\n    const head = {x: snake[0].x + direction.x, y: snake[0].y + direction.y};\n    if (head.x >= canvas.width) {\n        head.x = 0;\n    } else if (head.x < 0) {\n        head.x = canvas.width - gridSize;\n    }\n    if (head.y >= canvas.height) {\n        head.y = 0;\n    } else if (head.y < 0) {\n        head.y = canvas.height - gridSize;\n    }\n    snake.unshift(head);\n    snake.pop();\n}\n```\n\n# 방향 변경\n\nchangeDirection 함수는 뱀의 방향을 변경하는 키 입력을 처리합니다.\n\n```js\nfunction changeDirection(event) {\n    const keyPressed = event.keyCode;\n    const LEFT = 37;\n    const UP = 38;\n    const RIGHT = 39;\n    const DOWN = 40;\n    const W = 87;\n    const A = 65;\n    const S = 83;\n    const D = 68;\n    const goingUp = direction.y === -gridSize;\n    const goingDown = direction.y === gridSize;\n    const goingRight = direction.x === gridSize;\n    const goingLeft = direction.x === -gridSize;\n    if ((keyPressed === LEFT || keyPressed === A) && !goingRight) {\n        direction = {x: -gridSize, y: 0};\n    } else if ((keyPressed === UP || keyPressed === W) && !goingDown) {\n        direction = {x: 0, y: -gridSize};\n    } else if ((keyPressed === RIGHT || keyPressed === D) && !goingLeft) {\n        direction = {x: gridSize, y: 0};\n    } else if ((keyPressed === DOWN || keyPressed === S) && !goingUp) {\n        direction = {x: 0, y: gridSize};\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 음식 배치\n\nplaceFood 함수는 캔버스의 무작위 위치에 음식을 배치합니다.\n\n```js\nfunction placeFood() {\n    food = {\n        x: Math.floor(Math.random() * canvas.width / gridSize) * gridSize,\n        y: Math.floor(Math.random() * canvas.height / gridSize) * gridSize\n    };\n}\n```\n\n# 음식 그리기\n\n<div class=\"content-ad\"></div>\n\n```js\ndrawFood 함수는 캔버스에 음식을 렌더링합니다.\n\nfunction drawFood() {\n    ctx.fillStyle = 'red';\n    ctx.fillRect(food.x, food.y, gridSize, gridSize);\n}\n```\n\n# 음식 충돌 처리\n\ncheckFoodCollision 함수는 뱀이 음식을 먹었는지 확인합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction checkFoodCollision() {\n    if (snake[0].x === food.x && snake[0].y === food.y) {\n        eatSound.play();\n        score++;\n        scoreElement.innerText = `Score: ${score}`;\n        snake.push({});\n        placeFood();\n        if (Math.random() < 0.1) {\n            placeBombFood();\n        }\n    }\n}\n```\n\n# 폭탄 음식 배치\n\nplaceBombFood 함수는 뱀이 추가 점수를 얻을 수 있는 폭탄 음식을 배치합니다.\n\n```js\nfunction placeBombFood() {\n    bombFood = {\n        x: Math.floor(Math.random() * canvas.width / gridSize) * gridSize,\n        y: Math.floor(Math.random() * canvas.height / gridSize) * gridSize\n    };\n    bombSound.play();\n    bombTimeout = setTimeout(() => {\n        bombFood = null;\n    }, 5000);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 폭탄 음식 그리기\n\ndrawBombFood 함수는 캔버스에 폭탄 음식을 렌더링합니다\n\n```js\nfunction drawBombFood() {\n    if (bombFood) {\n        ctx.fillStyle = 'purple';\n        ctx.fillRect(bombFood.x, bombFood.y, gridSize, gridSize);\n    }\n}\n```\n\n# 폭탄 음식 충돌 처리\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경하세요.\n\n```js\nfunction checkBombFoodCollision() {\n    if (bombFood && snake[0].x === bombFood.x && snake[0].y === bombFood.y) {\n        eatSound.play();\n        score += 2;\n        scoreElement.innerText = `점수: ${score}`;\n        snake.push({}, {});\n        bombFood = null;\n        clearTimeout(bombTimeout);\n    }\n}\n```\n\n## 게임 종료 확인\n\nisGameOver 함수는 뱀이 자신과 충돌했는지 확인합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nfunction isGameOver() {\n    for (let i = 4; i < snake.length; i++) {\n        if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) {\n            playGameOverSound()\n                .then(() => {\n                    if (score > highScore) {\n                        highScore = score;\n                        localStorage.setItem('highScore', highScore);\n                        highScoreElement.innerText = `High Score: ${highScore}`;\n                    }\n                    alert('게임 오버!');\n                })\n                .catch((error) => {\n                    console.error('게임 오버 사운드 재생 중 오류 발생:', error);\n                    if (score > highScore) {\n                        highScore = score;\n                        localStorage.setItem('highScore', highScore);\n                        highScoreElement.innerText = `High Score: ${highScore}`;\n                    }\n                    alert('게임 오버!');\n                });\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n# 게임 오버 사운드 재생\n\nplayGameOverSound 함수는 게임 오버 사운드 효과를 재생합니다.\n\n```js\nfunction playGameOverSound() {\n    return new Promise((resolve, reject) => {\n        gameOverSound.onended = resolve;\n        gameOverSound.onerror = reject;\n        gameOverSound.play();\n    });\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 게임 시작\n\n마침내 init 함수를 호출하여 게임을 시작합니다.\n\n```js\ninit();\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n여기에서 간단한 뱀 게임이 HTML, CSS 및 JavaScript로 구축되었습니다. 레벨, 다양한 종류의 음식 또는 보다 복잡한 뱀 이동과 같은 기능을 추가하여 이 게임을 확장할 수 있습니다.\n\n읽어 주셔서 감사합니다! 이 기사를 즐겁게 보셨다면 미디엄에서 저를 팔로우해 주시면 저의 향후 컨텐츠를 계속 받아보실 수 있습니다. 응원을 보내주세요!\n\n콘텐츠가 마음에 드셨다면 커피 한 잔 사주는 것으로 응원해 주세요!\n\n![BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_1.png](/assets/img/2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_1.png)","ogImage":{"url":"/assets/img/2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_0.png\" alt=\"Game screenshot\"></p>\n<p>클래식 스네이크 게임을 만드는 것은 JavaScript 기술을 향상시키는 환상적인 방법입니다. 이 튜토리얼에서는 HTML, CSS 및 JavaScript를 사용하여 간단한 스네이크 게임을 만드는 방법을 단계별로 안내해 드리겠습니다.</p>\n<p>여기에서 게임을 확인하실 수 있고, 여기에서 GitHub 저장소를 확인하실 수 있습니다.</p>\n<h1>HTML 구조</h1>\n<p>HTML 구조부터 시작할게요. 주요 구성 요소는 게임을 렌더링하는 캔버스, 현재 및 최고 점수를 표시하는 스코어보드, 그리고 효과음을 출력하는 오디오 요소입니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>Snake Game&#x3C;/title>\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div class=\"game-container\">\n        &#x3C;div class=\"score-board\">\n            &#x3C;span id=\"score\">Score: 0&#x3C;/span>\n            &#x3C;span id=\"high-score\">High Score: 0&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;canvas id=\"gameCanvas\">&#x3C;/canvas>\n    &#x3C;/div>\n    &#x3C;audio id=\"eatSound\" src=\"eat.wav\">&#x3C;/audio>\n    &#x3C;audio id=\"bombSound\" src=\"bomb.wav\">&#x3C;/audio>\n    &#x3C;audio id=\"gameOverSound\" src=\"gameover.wav\">&#x3C;/audio>\n    &#x3C;script src=\"script.js\">&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h1>CSS 스타일링</h1>\n<p>다음으로, 게임을 중앙 정렬하고 캔버스와 스코어보드 스타일을 추가할게요.</p>\n<pre><code class=\"hljs language-js\">body {\n    <span class=\"hljs-attr\">display</span>: flex;\n    justify-<span class=\"hljs-attr\">content</span>: center;\n    align-<span class=\"hljs-attr\">items</span>: center;\n    <span class=\"hljs-attr\">height</span>: 100vh;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n    background-<span class=\"hljs-attr\">color</span>: #282c34;\n    <span class=\"hljs-attr\">color</span>: #61dafb;\n    font-<span class=\"hljs-attr\">family</span>: <span class=\"hljs-string\">'Arial'</span>, sans-serif;\n}\n.<span class=\"hljs-property\">game</span>-container {\n    text-<span class=\"hljs-attr\">align</span>: center;\n}\n.<span class=\"hljs-property\">score</span>-board {\n    margin-<span class=\"hljs-attr\">bottom</span>: 10px;\n    font-<span class=\"hljs-attr\">size</span>: 24px;\n}\ncanvas {\n    <span class=\"hljs-attr\">border</span>: 1px solid #61dafb;\n    background-<span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">000</span>;\n}\n</code></pre>\n<h1>JavaScript Logic</h1>\n<p>자, 이제 게임을 기능적으로 만들기 위해 JavaScript에 집중해 봅시다. 게임을 초기화하는 것, 게임 루프를 처리하는 것, 뱀을 그리고 움직이는 것, 음식을 다루는 것, 그리고 게임 오버 조건을 확인하는 것 등이 있습니다.</p>\n<h1>초기 설정</h1>\n<p>먼저 캔버스, 콘텍스트 및 초기 게임 변수를 설정합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'gameCanvas'</span>);\n<span class=\"hljs-keyword\">const</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">'2d'</span>);\n<span class=\"hljs-keyword\">const</span> scoreElement = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'score'</span>);\n<span class=\"hljs-keyword\">const</span> highScoreElement = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'high-score'</span>);\n<span class=\"hljs-keyword\">const</span> eatSound = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'eatSound'</span>);\n<span class=\"hljs-keyword\">const</span> bombSound = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'bombSound'</span>);\n<span class=\"hljs-keyword\">const</span> gameOverSound = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'gameOverSound'</span>);\n<span class=\"hljs-keyword\">const</span> gridSize = <span class=\"hljs-number\">20</span>;\ncanvas.<span class=\"hljs-property\">width</span> = <span class=\"hljs-number\">400</span>;\ncanvas.<span class=\"hljs-property\">height</span> = <span class=\"hljs-number\">400</span>;\n<span class=\"hljs-keyword\">let</span> snake = [{<span class=\"hljs-attr\">x</span>: gridSize * <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: gridSize * <span class=\"hljs-number\">2</span>}];\n<span class=\"hljs-keyword\">let</span> direction = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>};\n<span class=\"hljs-keyword\">let</span> food = {};\n<span class=\"hljs-keyword\">let</span> bombFood = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">let</span> score = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> highScore = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">'highScore'</span>) || <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> bombTimeout;\nhighScoreElement.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">`High Score: <span class=\"hljs-subst\">${highScore}</span>`</span>;\n</code></pre>\n<h1>게임 초기화</h1>\n<p>init 함수는 초기 음식을 배치하고 키 입력에 대한 이벤트 리스너를 설정합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">placeFood</span>();\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'keydown'</span>, changeDirection);\n    <span class=\"hljs-title function_\">gameLoop</span>();\n}\n</code></pre>\n<h1>게임 루프</h1>\n<p>게임 루프 함수는 게임의 핵심입니다. 일정 간격으로 게임 상태를 업데이트합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gameLoop</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isGameOver</span>()) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-title function_\">clearCanvas</span>();\n        <span class=\"hljs-title function_\">drawSnake</span>();\n        <span class=\"hljs-title function_\">moveSnake</span>();\n        <span class=\"hljs-title function_\">drawFood</span>();\n        <span class=\"hljs-keyword\">if</span> (bombFood) <span class=\"hljs-title function_\">drawBombFood</span>();\n        <span class=\"hljs-title function_\">checkFoodCollision</span>();\n        <span class=\"hljs-title function_\">checkBombFoodCollision</span>();\n        <span class=\"hljs-title function_\">gameLoop</span>();\n    }, <span class=\"hljs-number\">100</span>);\n}\n</code></pre>\n<h1>캔버스 초기화</h1>\n<p>clearCanvas 함수는 매번 새로 그려짐에 앞서 캔버스를 지웁니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">clearCanvas</span>(<span class=\"hljs-params\"></span>) {\n    ctx.<span class=\"hljs-title function_\">clearRect</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, canvas.<span class=\"hljs-property\">width</span>, canvas.<span class=\"hljs-property\">height</span>);\n}\n</code></pre>\n<h1>뱀 그리기</h1>\n<p>다음은 캔버스에 뱀을 렌더링하는 drawSnake 함수입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">drawSnake</span>(<span class=\"hljs-params\"></span>) {\n    ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">'green'</span>;\n    snake.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">segment, index</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) {\n            ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">'lightgreen'</span>; <span class=\"hljs-comment\">// 머리 색상</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">'green'</span>;\n        }\n        ctx.<span class=\"hljs-title function_\">fillRect</span>(segment.<span class=\"hljs-property\">x</span>, segment.<span class=\"hljs-property\">y</span>, gridSize, gridSize);\n    });\n}\n</code></pre>\n<h1>뱀 이동</h1>\n<p>moveSnake 함수는 현재 방향을 기반으로 뱀의 위치를 업데이트합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">moveSnake</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> head = {<span class=\"hljs-attr\">x</span>: snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">x</span> + direction.<span class=\"hljs-property\">x</span>, <span class=\"hljs-attr\">y</span>: snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">y</span> + direction.<span class=\"hljs-property\">y</span>};\n    <span class=\"hljs-keyword\">if</span> (head.<span class=\"hljs-property\">x</span> >= canvas.<span class=\"hljs-property\">width</span>) {\n        head.<span class=\"hljs-property\">x</span> = <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (head.<span class=\"hljs-property\">x</span> &#x3C; <span class=\"hljs-number\">0</span>) {\n        head.<span class=\"hljs-property\">x</span> = canvas.<span class=\"hljs-property\">width</span> - gridSize;\n    }\n    <span class=\"hljs-keyword\">if</span> (head.<span class=\"hljs-property\">y</span> >= canvas.<span class=\"hljs-property\">height</span>) {\n        head.<span class=\"hljs-property\">y</span> = <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (head.<span class=\"hljs-property\">y</span> &#x3C; <span class=\"hljs-number\">0</span>) {\n        head.<span class=\"hljs-property\">y</span> = canvas.<span class=\"hljs-property\">height</span> - gridSize;\n    }\n    snake.<span class=\"hljs-title function_\">unshift</span>(head);\n    snake.<span class=\"hljs-title function_\">pop</span>();\n}\n</code></pre>\n<h1>방향 변경</h1>\n<p>changeDirection 함수는 뱀의 방향을 변경하는 키 입력을 처리합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeDirection</span>(<span class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-keyword\">const</span> keyPressed = event.<span class=\"hljs-property\">keyCode</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">LEFT</span> = <span class=\"hljs-number\">37</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">UP</span> = <span class=\"hljs-number\">38</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">RIGHT</span> = <span class=\"hljs-number\">39</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOWN</span> = <span class=\"hljs-number\">40</span>;\n    <span class=\"hljs-keyword\">const</span> W = <span class=\"hljs-number\">87</span>;\n    <span class=\"hljs-keyword\">const</span> A = <span class=\"hljs-number\">65</span>;\n    <span class=\"hljs-keyword\">const</span> S = <span class=\"hljs-number\">83</span>;\n    <span class=\"hljs-keyword\">const</span> D = <span class=\"hljs-number\">68</span>;\n    <span class=\"hljs-keyword\">const</span> goingUp = direction.<span class=\"hljs-property\">y</span> === -gridSize;\n    <span class=\"hljs-keyword\">const</span> goingDown = direction.<span class=\"hljs-property\">y</span> === gridSize;\n    <span class=\"hljs-keyword\">const</span> goingRight = direction.<span class=\"hljs-property\">x</span> === gridSize;\n    <span class=\"hljs-keyword\">const</span> goingLeft = direction.<span class=\"hljs-property\">x</span> === -gridSize;\n    <span class=\"hljs-keyword\">if</span> ((keyPressed === <span class=\"hljs-variable constant_\">LEFT</span> || keyPressed === A) &#x26;&#x26; !goingRight) {\n        direction = {<span class=\"hljs-attr\">x</span>: -gridSize, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>};\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((keyPressed === <span class=\"hljs-variable constant_\">UP</span> || keyPressed === W) &#x26;&#x26; !goingDown) {\n        direction = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: -gridSize};\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((keyPressed === <span class=\"hljs-variable constant_\">RIGHT</span> || keyPressed === D) &#x26;&#x26; !goingLeft) {\n        direction = {<span class=\"hljs-attr\">x</span>: gridSize, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>};\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((keyPressed === <span class=\"hljs-variable constant_\">DOWN</span> || keyPressed === S) &#x26;&#x26; !goingUp) {\n        direction = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: gridSize};\n    }\n}\n</code></pre>\n<h1>음식 배치</h1>\n<p>placeFood 함수는 캔버스의 무작위 위치에 음식을 배치합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">placeFood</span>(<span class=\"hljs-params\"></span>) {\n    food = {\n        <span class=\"hljs-attr\">x</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * canvas.<span class=\"hljs-property\">width</span> / gridSize) * gridSize,\n        <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * canvas.<span class=\"hljs-property\">height</span> / gridSize) * gridSize\n    };\n}\n</code></pre>\n<h1>음식 그리기</h1>\n<pre><code class=\"hljs language-js\">drawFood 함수는 캔버스에 음식을 렌더링합니다.\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">drawFood</span>(<span class=\"hljs-params\"></span>) {\n    ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">'red'</span>;\n    ctx.<span class=\"hljs-title function_\">fillRect</span>(food.<span class=\"hljs-property\">x</span>, food.<span class=\"hljs-property\">y</span>, gridSize, gridSize);\n}\n</code></pre>\n<h1>음식 충돌 처리</h1>\n<p>checkFoodCollision 함수는 뱀이 음식을 먹었는지 확인합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkFoodCollision</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">x</span> === food.<span class=\"hljs-property\">x</span> &#x26;&#x26; snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">y</span> === food.<span class=\"hljs-property\">y</span>) {\n        eatSound.<span class=\"hljs-title function_\">play</span>();\n        score++;\n        scoreElement.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">`Score: <span class=\"hljs-subst\">${score}</span>`</span>;\n        snake.<span class=\"hljs-title function_\">push</span>({});\n        <span class=\"hljs-title function_\">placeFood</span>();\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() &#x3C; <span class=\"hljs-number\">0.1</span>) {\n            <span class=\"hljs-title function_\">placeBombFood</span>();\n        }\n    }\n}\n</code></pre>\n<h1>폭탄 음식 배치</h1>\n<p>placeBombFood 함수는 뱀이 추가 점수를 얻을 수 있는 폭탄 음식을 배치합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">placeBombFood</span>(<span class=\"hljs-params\"></span>) {\n    bombFood = {\n        <span class=\"hljs-attr\">x</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * canvas.<span class=\"hljs-property\">width</span> / gridSize) * gridSize,\n        <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * canvas.<span class=\"hljs-property\">height</span> / gridSize) * gridSize\n    };\n    bombSound.<span class=\"hljs-title function_\">play</span>();\n    bombTimeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n        bombFood = <span class=\"hljs-literal\">null</span>;\n    }, <span class=\"hljs-number\">5000</span>);\n}\n</code></pre>\n<h1>폭탄 음식 그리기</h1>\n<p>drawBombFood 함수는 캔버스에 폭탄 음식을 렌더링합니다</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">drawBombFood</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (bombFood) {\n        ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">'purple'</span>;\n        ctx.<span class=\"hljs-title function_\">fillRect</span>(bombFood.<span class=\"hljs-property\">x</span>, bombFood.<span class=\"hljs-property\">y</span>, gridSize, gridSize);\n    }\n}\n</code></pre>\n<h1>폭탄 음식 충돌 처리</h1>\n<p>테이블 태그를 Markdown 형식으로 변경하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkBombFoodCollision</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (bombFood &#x26;&#x26; snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">x</span> === bombFood.<span class=\"hljs-property\">x</span> &#x26;&#x26; snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">y</span> === bombFood.<span class=\"hljs-property\">y</span>) {\n        eatSound.<span class=\"hljs-title function_\">play</span>();\n        score += <span class=\"hljs-number\">2</span>;\n        scoreElement.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">`점수: <span class=\"hljs-subst\">${score}</span>`</span>;\n        snake.<span class=\"hljs-title function_\">push</span>({}, {});\n        bombFood = <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-built_in\">clearTimeout</span>(bombTimeout);\n    }\n}\n</code></pre>\n<h2>게임 종료 확인</h2>\n<p>isGameOver 함수는 뱀이 자신과 충돌했는지 확인합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isGameOver</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">4</span>; i &#x3C; snake.<span class=\"hljs-property\">length</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (snake[i].<span class=\"hljs-property\">x</span> === snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">x</span> &#x26;&#x26; snake[i].<span class=\"hljs-property\">y</span> === snake[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">y</span>) {\n            <span class=\"hljs-title function_\">playGameOverSound</span>()\n                .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> {\n                    <span class=\"hljs-keyword\">if</span> (score > highScore) {\n                        highScore = score;\n                        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'highScore'</span>, highScore);\n                        highScoreElement.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">`High Score: <span class=\"hljs-subst\">${highScore}</span>`</span>;\n                    }\n                    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'게임 오버!'</span>);\n                })\n                .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> {\n                    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'게임 오버 사운드 재생 중 오류 발생:'</span>, error);\n                    <span class=\"hljs-keyword\">if</span> (score > highScore) {\n                        highScore = score;\n                        <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">'highScore'</span>, highScore);\n                        highScoreElement.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">`High Score: <span class=\"hljs-subst\">${highScore}</span>`</span>;\n                    }\n                    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'게임 오버!'</span>);\n                });\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<h1>게임 오버 사운드 재생</h1>\n<p>playGameOverSound 함수는 게임 오버 사운드 효과를 재생합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">playGameOverSound</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n        gameOverSound.<span class=\"hljs-property\">onended</span> = resolve;\n        gameOverSound.<span class=\"hljs-property\">onerror</span> = reject;\n        gameOverSound.<span class=\"hljs-title function_\">play</span>();\n    });\n}\n</code></pre>\n<h1>게임 시작</h1>\n<p>마침내 init 함수를 호출하여 게임을 시작합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">init</span>();\n</code></pre>\n<h1>결론</h1>\n<p>여기에서 간단한 뱀 게임이 HTML, CSS 및 JavaScript로 구축되었습니다. 레벨, 다양한 종류의 음식 또는 보다 복잡한 뱀 이동과 같은 기능을 추가하여 이 게임을 확장할 수 있습니다.</p>\n<p>읽어 주셔서 감사합니다! 이 기사를 즐겁게 보셨다면 미디엄에서 저를 팔로우해 주시면 저의 향후 컨텐츠를 계속 받아보실 수 있습니다. 응원을 보내주세요!</p>\n<p>콘텐츠가 마음에 드셨다면 커피 한 잔 사주는 것으로 응원해 주세요!</p>\n<p><img src=\"/assets/img/2024-06-19-BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_1.png\" alt=\"BuildingaSimpleSnakeGamewithHTMLCSSandJavaScript_1.png\"></p>\n</body>\n</html>\n"},"__N_SSG":true}