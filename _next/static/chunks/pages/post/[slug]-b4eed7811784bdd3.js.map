{"version":3,"file":"static/chunks/pages/post/[slug]-b4eed7811784bdd3.js","mappings":"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","sources":["webpack://_N_E/?4e61","webpack://_N_E/./components/CustomHead/index.tsx","webpack://_N_E/./components/Header/index.tsx","webpack://_N_E/./lib/constants.ts","webpack://_N_E/./node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/unist-util-visit-parents/lib/color.browser.js","webpack://_N_E/./node_modules/unist-util-visit-parents/lib/index.js","webpack://_N_E/./node_modules/unist-util-visit/lib/index.js","webpack://_N_E/./components/GoogleAd/index.tsx","webpack://_N_E/./pages/post/[slug].tsx","webpack://_N_E/./components/CustomHead/CustomHead.module.scss","webpack://_N_E/./components/Header/Header.module.scss","webpack://_N_E/./pages/post/posts.module.scss","webpack://_N_E/./node_modules/next/error.js","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/post/[slug]\",\n      function () {\n        return require(\"private-next-pages/post/[slug].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/post/[slug]\"])\n      });\n    }\n  ","import React from \"react\";\nimport style from \"./CustomHead.module.scss\";\nimport classnames from \"classnames/bind\";\nimport { LANG_LOCALE, SITE_DESCRIPTION, SITE_NAME, SITE_URL } from \"@/lib/constants\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport PostType from \"@/interfaces/post\";\nimport Project from \"@/interfaces/project\";\n\nconst cx = classnames.bind(style);\n\ninterface SectoinTitleProps {\n  type: \"home\" | \"post\" | \"project\";\n  post?: PostType;\n  project?: Project;\n}\n\nexport const CustomHead = ({ type, post, project }: SectoinTitleProps) => {\n  const router = useRouter();\n  let lang: string = \"en\";\n\n  if (type === \"post\" && post) {\n    return (\n      <Head>\n        <title>{`${post.title} | ${SITE_NAME}`}</title>\n        <meta name=\"description\" content={post.description} />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n        {/* Facebook og Tags */}\n        <meta property=\"og:url\" content={`${SITE_URL}/${router.asPath}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:type\" content=\"website\" data-gatsby-head=\"true\" />\n        <meta property=\"og:site_name\" content={`${post.title} | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:title\" content={`${post.title} | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:description\" content={post.description} data-gatsby-head=\"true\" />\n        <meta property=\"og:image\" content={post.ogImage.url} data-gatsby-head=\"true\" />\n        <meta property=\"og:locale\" content={LANG_LOCALE[lang]} data-gatsby-head=\"true\" />\n\n        {/* twitter og Tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" data-gatsby-head=\"true\" />\n        <meta property=\"twitter:domain\" content={`https://${SITE_NAME}.github.io/`} data-gatsby-head=\"true\" />\n        <meta property=\"twitter:url\" content={`${SITE_URL}/${router.asPath}`} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:title\" content={`${post.title} | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:description\" content={post.description} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:image\" content={post.ogImage.url} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:data1\" content={`Dev | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta name=\"article:published_time\" content={post.date} data-gatsby-head=\"true\" />\n      </Head>\n    );\n  } else if (type === \"project\" && project) {\n    return (\n      <Head>\n        <title>{`${project.title} | ${SITE_NAME}`}</title>\n        <meta name=\"description\" content={project.description} />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n        {/* Facebook og Tags */}\n        <meta property=\"og:url\" content={`${SITE_URL}/${router.asPath}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:type\" content=\"website\" data-gatsby-head=\"true\" />\n        <meta property=\"og:site_name\" content={`${project.title} | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:title\" content={`${project.title} | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:description\" content={project.description} data-gatsby-head=\"true\" />\n        <meta property=\"og:image\" content={project.ogImage.url} data-gatsby-head=\"true\" />\n        <meta property=\"og:locale\" content={LANG_LOCALE[lang]} data-gatsby-head=\"true\" />\n\n        {/* twitter og Tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" data-gatsby-head=\"true\" />\n        <meta property=\"twitter:domain\" content={`https://${SITE_NAME}.github.io/`} data-gatsby-head=\"true\" />\n        <meta property=\"twitter:url\" content={`${SITE_URL}/${router.asPath}`} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:title\" content={`${project.title} | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:description\" content={project.description} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:image\" content={project.ogImage.url} data-gatsby-head=\"true\" />\n        <meta name=\"article:published_time\" content={project.date} data-gatsby-head=\"true\" />\n      </Head>\n    );\n  } else {\n    return (\n      <Head>\n        <title>{SITE_NAME}</title>\n        <meta name=\"description\" content={SITE_DESCRIPTION[lang]} />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n        {/* Facebook og Tags */}\n        <meta property=\"og:url\" content={`${SITE_URL}/${router.asPath}`} data-gatsby-head=\"true\" />\n        <meta property=\"og:type\" content=\"website\" data-gatsby-head=\"true\" />\n        <meta property=\"og:site_name\" content={SITE_NAME} data-gatsby-head=\"true\" />\n        <meta property=\"og:title\" content={SITE_NAME} data-gatsby-head=\"true\" />\n        <meta property=\"og:description\" content={SITE_DESCRIPTION[lang]} data-gatsby-head=\"true\" />\n        <meta property=\"og:image\" content={\"/favicons/ms-icon-310x310.png\"} data-gatsby-head=\"true\" />\n        <meta property=\"og:locale\" content={LANG_LOCALE[lang]} data-gatsby-head=\"true\" />\n\n        {/* twitter og Tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" data-gatsby-head=\"true\" />\n        <meta property=\"twitter:domain\" content={`https://${SITE_NAME}.github.io/`} data-gatsby-head=\"true\" />\n        <meta property=\"twitter:url\" content={`${SITE_URL}/${router.asPath}`} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:title\" content={SITE_NAME} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:description\" content={SITE_DESCRIPTION[lang]} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:image\" content={\"/favicons/ms-icon-310x310.png\"} data-gatsby-head=\"true\" />\n        <meta name=\"twitter:data1\" content={`Dev | ${SITE_NAME}`} data-gatsby-head=\"true\" />\n      </Head>\n    );\n  }\n};\n\nexport default CustomHead;\n","import React, { useState } from \"react\";\nimport style from \"./Header.module.scss\";\nimport classnames from \"classnames/bind\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { AUTHOR } from \"@/lib/constants\";\n\nconst cx = classnames.bind(style);\n\nconst Header = () => {\n  const router = useRouter();\n\n  return (\n    <header className={cx(\"header\")}>\n      <div className={cx(\"inner\")}>\n        <strong className={cx(\"title\")}>\n          <Link href={`/`}>{AUTHOR}</Link>\n        </strong>\n        <nav className={cx(\"nav_area\")}>\n          <Link href={`/posts/1`} className={cx(\"nav_item\")}>\n            Posts\n          </Link>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","export const EXAMPLE_PATH = \"blog-starter\";\nexport const CMS_NAME = \"Markdown\";\nexport const HOME_OG_IMAGE_URL =\n  \"https://og-image.vercel.app/Next.js%20Blog%20Starter%20Example.png?theme=light&md=1&fontSize=100px&images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg\";\n\nexport const LANG_LOCALE: { [key: string]: string } = {\n  ko: \"ko_KR\",\n  en: \"en_US\",\n  ja: \"ja_JP\",\n};\nexport const SITE_NAME = \"uidev-css\";\nexport const SITE_URL = \"https://uidev-css.github.io/\";\nexport const AUTHOR = \"UIDEV CSS\";\nexport const SITE_DESCRIPTION: { [key: string]: string } = {\n  ko: \"HTML, CSS, JS로 웹사이트, 게임, 앱을 만들고 있습니다.\",\n  en: \"I develop websites, games and apps with HTML, CSS and JS.\",\n  ja: \"HTML、CSS、JSでウェブサイト、ゲーム、アプリを開発しています。\",\n};\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import React, { useEffect } from \"react\";\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nconst GoogleAd = () => {\n  useEffect(() => {\n    try {\n      (window.adsbygoogle = window.adsbygoogle || []).push({});\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  return (\n    <div className=\"googleAd-container\">\n      <ins className=\"adsbygoogle\" style={{ display: \"block\" }} data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"1107185301\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n    </div>\n  );\n};\n\nexport default GoogleAd;\n","import { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport { getPosts } from \"@/lib/api\";\nimport type PostType from \"@/interfaces/post\";\nimport Header from \"@/components/Header\";\nimport style from \"./posts.module.scss\";\nimport classnames from \"classnames/bind\";\nimport Image from \"next/image\";\nimport { serialize } from \"next-mdx-remote/serialize\";\nimport { MDXRemote } from \"next-mdx-remote\";\nimport rehypeHighlight from \"rehype-highlight\";\nimport remarkDirective from \"remark-directive\";\nimport { visit } from \"unist-util-visit\";\n\nimport markdownIt from \"markdown-it\";\nimport highlightjs from \"markdown-it-highlightjs\";\nimport markdownContainer from \"markdown-it-container\";\nimport { AUTHOR, LANG_LOCALE, SITE_NAME, SITE_URL } from \"@/lib/constants\";\nimport CustomHead from \"@/components/CustomHead\";\nimport GoogleAd from \"@/components/GoogleAd\";\nimport moment from \"moment\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\nimport markdownToHtml from \"@/lib/markdownToHtml\";\n\nconst cx = classnames.bind(style);\nconst components = { Image, GoogleAd };\ntype Props = {\n  post: PostType;\n  morePosts: PostType[];\n  preview?: boolean;\n  content: any;\n};\n\nexport default function Post({ post, content }: Props) {\n  const router = useRouter();\n\n  if (!router.isFallback && !post?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n\n  return (\n    <>\n      {router.isFallback ? (\n        \" Loading…\"\n      ) : (\n        <>\n          <CustomHead type=\"post\" post={post} />\n          <Header></Header>\n          <main className={cx(\"container\")}>\n            <div className={cx(\"inner\")}>\n              <h1 className={cx(\"post_title\")}>{post.title}</h1>\n              <div className={cx(\"meta\")}>\n                <div className={cx(\"profile_wrap\")}>\n                  <div className={cx(\"profile_image_wrap\")}>\n                    <Image\n                      src={\"/favicons/apple-icon-114x114.png\"}\n                      className={cx(\"profile\")}\n                      alt={post.title}\n                      width={44}\n                      height={44}\n                    />\n                  </div>\n                  <div className={cx(\"textarea\")}>\n                    <span className={cx(\"writer\")}>{AUTHOR}</span>\n                    <span className={cx(\"info\")}>\n                      <span className={cx(\"date\")}>{`Posted On ${moment(post.date).format(\"MMM D, YYYY\")}`}</span>\n                      <span className={cx(\"reading_time\")}>{post.readingTime} min read</span>\n                    </span>\n                  </div>\n                </div>\n\n                <Image\n                  width={\"50\"}\n                  height={\"50\"}\n                  className={cx(\"view_badge\")}\n                  src={`https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fallround-coder.github.io${router.asPath}&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=views&edge_flat=false`}\n                  alt=\"\"\n                />\n              </div>\n\n              <article className={cx(\"post_content\")}>\n                {/* <div dangerouslySetInnerHTML={{ __html: md.render(post.content) }}></div> */}\n                <div dangerouslySetInnerHTML={{ __html: content }} />\n                {/* <MDXRemote {...content} components={components} /> */}\n              </article>\n            </div>\n          </main>\n        </>\n      )}\n    </>\n  );\n}\n\nexport function myRemarkPlugin() {\n  return (tree: any) => {\n    visit(tree, (node) => {\n      if (node.type === \"textDirective\" || node.type === \"leafDirective\" || node.type === \"containerDirective\") {\n        if (node.name === \"tip\") {\n          const data = node.data || (node.data = {});\n          const tagName = node.type === \"textDirective\" ? \"span\" : \"div\";\n\n          data.hName = tagName;\n          // data.hProperties = h(tagName, node.attributes).properties;\n          data.hProperties = { className: [\"tip\"] };\n        }\n\n        if (node.name === \"warning\") {\n          const data = node.data || (node.data = {});\n          const tagName = node.type === \"textDirective\" ? \"span\" : \"div\";\n\n          data.hName = tagName;\n          data.hProperties = { className: [\"warning\"] };\n        }\n      }\n    });\n  };\n}\n\ntype Params = {\n  params: {\n    slug: string;\n  };\n};\n\nexport async function getStaticProps({ params }: Params) {\n  const [post]: any = await getPosts({\n    file: params.slug,\n    fields: [\n      \"title\",\n      \"description\",\n      \"date\",\n      \"slug\",\n      \"author\",\n      \"content\",\n      \"ogImage\",\n      \"coverImage\",\n      \"date\",\n      \"tag\",\n      \"readingTime\",\n    ],\n  });\n\n  // const content = await serialize(post.content, {\n  //   mdxOptions: {\n  //     rehypePlugins: [rehypeHighlight],\n  //     remarkPlugins: [remarkDirective, myRemarkPlugin],\n  //   },\n  // });\n  // console.log(post.content);\n  // console.log(mdxcontent);\n  const content = await markdownToHtml(post.content || \"\");\n  return {\n    props: {\n      post: {\n        ...post,\n      },\n      content,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const posts: any = await getPosts({ fields: [\"slug\"] });\n  let paths = [];\n  // console.log(posts);\n\n  for (let i in posts) {\n    const post = posts[i];\n\n    paths.push({\n      params: {\n        slug: post.slug,\n      },\n    });\n  }\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section_title\":\"CustomHead_section_title__QQBnD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Z8PUO\",\"inner\":\"Header_inner__tfr0u\",\"title\":\"Header_title__Otn70\",\"nav_area\":\"Header_nav_area__6KVpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_content\":\"posts_post_content__n_L6j\",\"container\":\"posts_container__NyRU3\",\"-list\":\"posts_-list__uNgdi\",\"inner\":\"posts_inner__i3n_i\",\"project_list\":\"posts_project_list__SjBxj\",\"ifram_wrap\":\"posts_ifram_wrap__glp9I\",\"iframe\":\"posts_iframe__lRdaY\",\"meta\":\"posts_meta__cR7lu\",\"date\":\"posts_date__ctqHI\",\"profile_wrap\":\"posts_profile_wrap__mslMl\",\"profile_image_wrap\":\"posts_profile_image_wrap__kPikV\",\"textarea\":\"posts_textarea__w_iKT\",\"info\":\"posts_info__5KJdN\",\"reading_time\":\"posts_reading_time__f7YPP\",\"post_title\":\"posts_post_title__EbxNx\",\"tag_area\":\"posts_tag_area__sTSlv\",\"tag\":\"posts_tag__9cdg9\",\"view_badge\":\"posts_view_badge__tcbfm\"};","module.exports = require('./dist/pages/_error')\n"],"names":["window","__NEXT_P","push","__webpack_require__","classnames","style","CustomHead","type","post","project","param","router","useRouter","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Head","jsx","title","SITE_NAME","concat","meta","name","content","description","property","SITE_URL","asPath","data-gatsby-head","ogImage","url","LANG_LOCALE","date","SITE_DESCRIPTION","__webpack_exports__","cx","Header","header","className","div","strong","Link","href","AUTHOR","nav","ko","en","ja","convert","test","ok","castFactory","node","Array","isArray","anyFactory","tests","checks","index","length","parameters","call","key","check","Boolean","visitParents","tree","visitor","reverse","is","step","factory","parents","value","tagName","undefined","Object","defineProperty","visit","subresult","offset","grandparents","result","children","parent","indexOf","Image","Post","isFallback","slug","jsx_runtime","Fragment","main","h1","src","alt","width","height","span","moment","format","readingTime","article","dangerouslySetInnerHTML","__html","ErrorPage","statusCode","myRemarkPlugin","data","hName","hProperties","module","exports"],"sourceRoot":""}